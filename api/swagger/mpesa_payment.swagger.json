{
  "swagger": "2.0",
  "info": {
    "title": "MPESA Payment Service",
    "description": "Gateway to confirm and validate MPESA payments, and a CRUD API for the MpesaPayment resource",
    "version": "0.1",
    "contact": {
      "name": "Github \u003cGideon Kamau\u003e",
      "url": "https://github.com/gidyon/mpesapayments/src/master/",
      "email": "gkamau@onfonmedia.com"
    },
    "license": {
      "name": "BSD 3-Clause License",
      "url": "https://github.com/gidyon/mpesapayments/src/master/LICENSE.txt"
    }
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/mpestx/payments": {
      "get": {
        "summary": "Retrieves a collection of MPESA payments.",
        "operationId": "LipaNaMPESA_ListMPESAPayments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/mpesaListMPESAPaymentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter.txDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.msisdns",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.accountsNumber",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.processState",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "PROCESS_STATE_UNSPECIFIED",
              "PROCESSED",
              "NOT_PROCESSED"
            ],
            "default": "PROCESS_STATE_UNSPECIFIED"
          },
          {
            "name": "filter.amount",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "name": "filter.startTimestamp",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "filter.endTimestamp",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "LipaNaMPESA"
        ]
      },
      "post": {
        "summary": "Creates a record of mpesa payment.",
        "operationId": "LipaNaMPESA_CreateMPESAPayment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/mpesaCreateMPESAPaymentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mpesaCreateMPESAPaymentRequest"
            }
          }
        ],
        "tags": [
          "LipaNaMPESA"
        ]
      }
    },
    "/api/mpestx/payments/actions/get-random-transaction": {
      "get": {
        "summary": "Retrives a random transaction using RM=NG algorithm",
        "operationId": "LipaNaMPESA_GetRandomTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/mpesaMPESAPayment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "accountsNumber",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "startTimeSeconds",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "endTimeSeconds",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "amount",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "float"
          }
        ],
        "tags": [
          "LipaNaMPESA"
        ]
      }
    },
    "/api/mpestx/payments/actions/process": {
      "post": {
        "summary": "Updates Mpesa transaction processed state to either true or false.",
        "operationId": "LipaNaMPESA_ProcessMpesaPayment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mpesaProcessMpesaPaymentRequest"
            }
          }
        ],
        "tags": [
          "LipaNaMPESA"
        ]
      }
    },
    "/api/mpestx/payments/actions/publish": {
      "post": {
        "summary": "Publishes Mpesa statement for listeners to process. Safe to be called many times.",
        "operationId": "LipaNaMPESA_PublishMpesaPayment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mpesaPublishMpesaPaymentRequest"
            }
          }
        ],
        "tags": [
          "LipaNaMPESA"
        ]
      }
    },
    "/api/mpestx/payments/actions/publishall": {
      "post": {
        "summary": "Publish all failed Mpesa transaction for listeners to process.",
        "operationId": "LipaNaMPESA_PublishAllMpesaPayment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mpesaPublishAllMpesaPaymentRequest"
            }
          }
        ],
        "tags": [
          "LipaNaMPESA"
        ]
      }
    },
    "/api/mpestx/payments/actions/transactions": {
      "get": {
        "summary": "Get transactions count summary",
        "operationId": "LipaNaMPESA_GetTransactionsCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/mpesaTransactionsSummary"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "accountsNumber",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "msisdns",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "startTimeSeconds",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "endTimeSeconds",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "amount",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "float"
          }
        ],
        "tags": [
          "LipaNaMPESA"
        ]
      }
    },
    "/api/mpestx/payments/{paymentId}": {
      "get": {
        "summary": "Retrieves MPESA payment.",
        "operationId": "LipaNaMPESA_GetMPESAPayment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/mpesaMPESAPayment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "LipaNaMPESA"
        ]
      }
    },
    "/api/mpestx/scopes/{userId}": {
      "get": {
        "summary": "Retrieves scopes for a user.",
        "operationId": "LipaNaMPESA_GetScopes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/mpesaGetScopesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "LipaNaMPESA"
        ]
      }
    },
    "/api/mpestx/scopes:add": {
      "post": {
        "summary": "Adds scopes to a user.",
        "operationId": "LipaNaMPESA_AddScopes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mpesaAddScopesRequest"
            }
          }
        ],
        "tags": [
          "LipaNaMPESA"
        ]
      }
    }
  },
  "definitions": {
    "gidyonmpesaScopes": {
      "type": "object",
      "properties": {
        "allowedPhones": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allowedAccNumber": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Identities that is allowed access",
      "title": "Scopes"
    },
    "mpesaAddScopesRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "scopes": {
          "$ref": "#/definitions/gidyonmpesaScopes"
        }
      },
      "description": "Request to add scopes",
      "title": "AddScopesRequest",
      "required": [
        "user_id",
        "scopes"
      ]
    },
    "mpesaCreateMPESAPaymentRequest": {
      "type": "object",
      "properties": {
        "mpesaPayment": {
          "$ref": "#/definitions/mpesaMPESAPayment"
        }
      },
      "description": "Request to create record of mpesa payment",
      "title": "CreateMPESAPaymentRequest",
      "required": [
        "mpesa_payment"
      ]
    },
    "mpesaCreateMPESAPaymentResponse": {
      "type": "object",
      "properties": {
        "paymentId": {
          "type": "string"
        }
      },
      "description": "Response after creating payment containing payment id",
      "title": "CreateMPESAPaymentResponse"
    },
    "mpesaGetScopesResponse": {
      "type": "object",
      "properties": {
        "scopes": {
          "$ref": "#/definitions/gidyonmpesaScopes"
        }
      },
      "description": "Reponse containing scopes",
      "title": "GetScopesResponse"
    },
    "mpesaListMPESAPaymentsFilter": {
      "type": "object",
      "properties": {
        "txDate": {
          "type": "string"
        },
        "msisdns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "accountsNumber": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "processState": {
          "$ref": "#/definitions/mpesaProcessedState"
        },
        "amount": {
          "type": "number",
          "format": "float"
        },
        "startTimestamp": {
          "type": "string",
          "format": "int64"
        },
        "endTimestamp": {
          "type": "string",
          "format": "int64"
        }
      },
      "description": "Filter payload for querying payments",
      "title": "ListMPESAPaymentsFilter"
    },
    "mpesaListMPESAPaymentsResponse": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string"
        },
        "mpesaPayments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mpesaMPESAPayment"
          }
        }
      },
      "description": "Reponse containing a collection of mpesa payments",
      "title": "ListMPESAPaymentsResponse"
    },
    "mpesaMPESAPayment": {
      "type": "object",
      "properties": {
        "paymentId": {
          "type": "string"
        },
        "txType": {
          "type": "string"
        },
        "txId": {
          "type": "string"
        },
        "msisdn": {
          "type": "string"
        },
        "names": {
          "type": "string"
        },
        "txRefNumber": {
          "type": "string"
        },
        "txTimestamp": {
          "type": "string",
          "format": "int64"
        },
        "txAmount": {
          "type": "number",
          "format": "float"
        },
        "orgBalance": {
          "type": "number",
          "format": "float"
        },
        "businessShortCode": {
          "type": "integer",
          "format": "int32"
        },
        "processed": {
          "type": "boolean"
        }
      },
      "description": "Lipa na MPESA Payment information",
      "title": "MPESAPayment"
    },
    "mpesaProcessMpesaPaymentRequest": {
      "type": "object",
      "properties": {
        "paymentId": {
          "type": "string"
        },
        "state": {
          "type": "boolean"
        },
        "retry": {
          "type": "boolean"
        }
      },
      "description": "Request to update Mpesa transaction processed state",
      "title": "ProcessMpesaPaymentRequest"
    },
    "mpesaProcessedState": {
      "type": "string",
      "enum": [
        "PROCESS_STATE_UNSPECIFIED",
        "PROCESSED",
        "NOT_PROCESSED"
      ],
      "default": "PROCESS_STATE_UNSPECIFIED"
    },
    "mpesaPublishAllMpesaPaymentRequest": {
      "type": "object",
      "properties": {
        "processedState": {
          "$ref": "#/definitions/mpesaProcessedState"
        },
        "startTimestamp": {
          "type": "string",
          "format": "int64"
        },
        "endTimestamp": {
          "type": "string",
          "format": "int64"
        }
      },
      "description": "Update Mpesa tx processed state to either true or false",
      "title": "PublishAllMpesaPaymentRequest"
    },
    "mpesaPublishMpesaPaymentRequest": {
      "type": "object",
      "properties": {
        "paymentId": {
          "type": "string"
        },
        "initiatorId": {
          "type": "string"
        },
        "processedState": {
          "$ref": "#/definitions/mpesaProcessedState"
        }
      },
      "description": "Request to publish an mpesa transaction for listerners to process",
      "title": "PublishMpesaPaymentRequest"
    },
    "mpesaTransactionsSummary": {
      "type": "object",
      "properties": {
        "totalAmount": {
          "type": "number",
          "format": "float"
        },
        "transactionsCount": {
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "Transactions summary",
      "title": "TransactionsSummary"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "description": "Authentication token, prefixed by Bearer: Bearer \u003ctoken\u003e",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "bearer": []
    }
  ]
}
