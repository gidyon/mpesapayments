syntax = "proto3";

package gidyon.mpesa;

option go_package="github.com/gidyon/mpesapayments/pkg/api/stk";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/api/field_behaviour.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "mpesa_payment.proto";

message StkPayload {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "StkPayload"
			description: "Stk Push payload callback"
		}
    };

    string initiator_id = 1;
    string payload_id = 2;
    string merchant_request_id = 3;
    string checkout_request_id = 4;
    string result_code = 5;
    string result_desc = 6;
    string amount = 7;
    string mpesa_receipt_number = 8;
    string balance = 9;
    string transaction_date = 10;
    string phone_number = 11;
    bool succeeded = 12;
    bool processed = 13;
}

message InitiateSTKPushRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "InitiateSTKPushRequest"
			description: "Initiates a STK push payment to the specified phone number"
			required: ["phone", "amount", "payload"]
		}
    };

	string initiator_id = 1 [(google.api.field_behavior) = REQUIRED];
	string phone = 2 [(google.api.field_behavior) = REQUIRED];
	double amount = 3 [(google.api.field_behavior) = REQUIRED];
	map<string, string> payload = 4 [(google.api.field_behavior) = REQUIRED];
}

message InitiateSTKPushResponse {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "InitiateSTKPushResponse"
			description: "Response after initiating STK push"
		}
    };

    bool progress = 1;
    string message = 2;
}

message GetStkPayloadRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "GetStkPayloadRequest"
			description: "Request to retrieve stk push payload"
			required: ["payload_id"]
		}
    };
    
    string payload_id = 1;
}

message CreateStkPayloadRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "CreateStkPayloadRequest"
			description: "Request to create stk push payload"
			required: ["payload"]
		}
    };
    
    StkPayload payload = 1;
}

message ListStkPayloadFilter {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "ListStkPayloadFilter"
			description: "Filter payload for querying stk payloads"
		}
	};
	
	string tx_date = 1;
	repeated string msisdns = 2;
	gidyon.mpesa.ProcessedState process_state = 3;
	int64 start_timestamp = 4;
	int64 end_timestamp = 5;
}

message ListStkPayloadsRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "ListStkPayloadsRequest"
			description: "Request to retrieve a collection of stk push payloads"
		}
	};

	string page_token = 1;
	int32 page_size = 2;
	ListStkPayloadFilter filter = 3;
}

message ListStkPayloadsResponse {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "ListStkPayloadsResponse"
			description: "Reponse containing a collection of stk push payloads"
		}
	};

	string next_page_token = 1;
	repeated StkPayload stk_payloads = 2;
}

message ProcessStkPayloadRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "ProcessStkPayloadRequest"
			description: "Request to update stk push processed state"
		}
	};

	string payload_id = 1;
	bool processed = 2;
}

message PublishStkPayloadRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "PublishStkPayloadRequest"
			description: "Request to publish a stk push payload"
		}
	};

	string payload_id = 1 [(google.api.field_behavior) = REQUIRED];
	map<string, string> payload = 2 [(google.api.field_behavior) = REQUIRED];
	ProcessedState processed_state = 3;
	bool from_cache = 4;
}

message PublishAllStkPayloadRequest {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "PublishAllStkPayloadRequest"
			description: "Request to publish all stk push payloads"
		}
	};

	int64 since_time_seconds = 1;
	ProcessedState processed_state = 2;
}

message PublishMessage {
	option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "PublishMessage"
			description: "Published stk message to consumers"
		}
	};

	string payload_id = 1;
	map<string, string> payload = 2 [(google.api.field_behavior) = REQUIRED];
}

service StkPushAPI {
    // Initiates mpesa payment.
    rpc InitiateSTKPush (InitiateSTKPushRequest) returns (InitiateSTKPushResponse) {
        option (google.api.http) = {
            post: "/api/mpestx/stkpush:initiate"
            body: "*"
        };
    };

    // Retrieves a single stk payload
    rpc GetStkPayload (GetStkPayloadRequest) returns (StkPayload) {
        option (google.api.http) = {
			get: "/api/mpestx/stkpush/{payload_id}"
		};
    };

    // Creates a record of stk push response sent to callback
    rpc CreateStkPayload (CreateStkPayloadRequest) returns (StkPayload) {
        option (google.api.http) = {
			post: "/api/mpestx/stkpush"
			body: "*"
		};
    };

    // Retrieves a collection of stk push payloads
    rpc ListStkPayloads (ListStkPayloadsRequest) returns (ListStkPayloadsResponse) {
        option (google.api.http) = {
			get: "/api/mpestx/stkpush"
		};
    };

	// Processes stk push payload updating its status
	rpc ProcessStkPayload (ProcessStkPayloadRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			get: "/api/mpestx/stkpush:process"
		};
	};

	// Publishes stk push payload for consumers
	rpc PublishStkPayload (PublishStkPayloadRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			get: "/api/mpestx/stkpush:publish"
		};
	};

	// Publihses all stk push payloads to consumers
	rpc PublishAllStkPayload (PublishAllStkPayloadRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			get: "/api/mpestx/stkpush:publishall"
		};
	};
}
