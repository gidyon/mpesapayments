syntax = "proto3";

package gidyon.mpesa;

option go_package = "github.com/gidyon/mpesapayments/pkg/api/stk/v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/api/field_behaviour.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "c2b.v1.proto";

message StkTransaction {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "StkTransaction"
      description : "Stk Push payload callback"
    }
  };

  string initiator_id = 1;
  string transaction_id = 2;
  string merchant_request_id = 3;
  string checkout_request_id = 4;
  string short_code = 5;
  string account_reference = 6;
  string transaction_desc = 7;
  string result_code = 8;
  string result_desc = 9;
  string amount = 10;
  string mpesa_receipt_id = 11;
  string balance = 12;
  string phone_number = 13;
  bool succeeded = 14;
  bool processed = 15;
  int64 transaction_timestamp = 16;
  int64 create_timestamp = 17;
}

message PublishInfo {
  bool only_on_success = 1;
  string channel_name = 2;
  map<string, string> payload = 3;
}

message InitiateSTKPushRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "InitiateSTKPushRequest"
      description : "Initiates a STK push payment to the specified phone number"
      required : [ "phone", "amount" ]
    }
  };

  string initiator_id = 1 [ (google.api.field_behavior) = REQUIRED ];
  string phone = 2 [ (google.api.field_behavior) = REQUIRED ];
  double amount = 3 [ (google.api.field_behavior) = REQUIRED ];
  string account_reference = 4;
  string transaction_desc = 5;
  bool publish = 6;
  PublishInfo publish_message = 7;
}

message InitiateSTKPushResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "InitiateSTKPushResponse"
      description : "Response after initiating STK push"
    }
  };

  bool progress = 1;
  string message = 2;
}

message GetStkTransactionRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "GetStkTransactionRequest"
      description : "Request to retrieve stk push payload"
      required : [ "transaction_id" ]
    }
  };

  string transaction_id = 1;
  string mpesa_receipt_id = 2;
}

message CreateStkTransactionRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "CreateStkTransactionRequest"
      description : "Request to create stk push payload"
      required : [ "payload" ]
    }
  };

  StkTransaction payload = 1;
  bool publish = 2;
}

message ListStkTransactionFilter {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListStkTransactionFilter"
      description : "Filter payload for querying stk payloads"
    }
  };

  string tx_date = 1;
  repeated string msisdns = 2;
  gidyon.mpesa.ProcessedState process_state = 3;
  int64 start_timestamp = 4;
  int64 end_timestamp = 5;
}

message ListStkTransactionsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListStkTransactionsRequest"
      description : "Request to retrieve a collection of stk push payloads"
    }
  };

  string page_token = 1;
  int32 page_size = 2;
  ListStkTransactionFilter filter = 3;
}

message ListStkTransactionsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ListStkTransactionsResponse"
      description : "Reponse containing a collection of stk push payloads"
    }
  };

  string next_page_token = 1;
  repeated StkTransaction stk_transactions = 2;
}

message ProcessStkTransactionRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "ProcessStkTransactionRequest"
      description : "Request to update stk push processed state"
    }
  };

  string transaction_id = 1;
  string mpesa_receipt_id = 2;
  bool processed = 3;
}

message PublishStkTransactionRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "PublishStkTransactionRequest"
      description : "Request to publish a stk push payload"
    }
  };

  PublishMessage publish_message = 1 [ (google.api.field_behavior) = REQUIRED ];
  ProcessedState processed_state = 2;
}

message PublishMessage {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema : {
      title : "PublishMessage"
      description : "Published stk message to consumers"
    }
  };

  string initiator_id = 1;
  string transaction_id = 2;
  string mpesa_receipt_id = 3;
  string phone_number = 4;
  PublishInfo publish_info = 5;
  StkTransaction transaction_info = 6;
}

service StkPushAPI {
  // Initiates mpesa payment.
  rpc InitiateSTKPush(InitiateSTKPushRequest)
      returns (InitiateSTKPushResponse) {
    option (google.api.http) = {
      post : "/v1/api/mpestx/stk:initiateSTKPush"
      body : "*"
    };
  };

  // Retrieves a single stk payload
  rpc GetStkTransaction(GetStkTransactionRequest) returns (StkTransaction) {
    option (google.api.http) = {
      get : "/v1/api/mpestx/stk/{transaction_id}"
    };
  };

  // Creates a record of stk push response sent to callback
  rpc CreateStkTransaction(CreateStkTransactionRequest)
      returns (StkTransaction) {
    option (google.api.http) = {
      post : "/v1/api/mpestx/stk"
      body : "*"
    };
  };

  // Retrieves a collection of stk push payloads
  rpc ListStkTransactions(ListStkTransactionsRequest)
      returns (ListStkTransactionsResponse) {
    option (google.api.http) = {
      get : "/v1/api/mpestx/stk"
    };
  };

  // Processes stk push payload updating its status
  rpc ProcessStkTransaction(ProcessStkTransactionRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/v1/api/mpestx/stk:processStkTransaction"
      body : "*"
    };
  };

  // Publishes stk push payload for consumers
  rpc PublishStkTransaction(PublishStkTransactionRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/v1/api/mpestx/stk:publishStkTransaction"
      body : "*"
    };
  };
}

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info : {title : "STK Mpesa Service";
description : "API for initiating STK push and receiving payments"
version : "0.1";
contact : {
name:
  "Github <Gideon Kamau>";
url:
  "https://github.com/gidyon/mpesapayments/blob/master/api/proto/stk.proto";
email:
  "gideonhacer@gmail.com";
};
license : {
name:
  "GNU GENERAL PUBLIC LICENSE";
url:
  "https://github.com/gidyon/mpesapayments/src/master/LICENSE";
};
}
;
schemes : HTTP;
schemes : HTTPS;
consumes : "application/json";
produces : "application/json";
security_definitions : {
security : {
key:
  "bearer" value : {
  type:
    TYPE_API_KEY
  in:
    IN_HEADER
  name:
    "Authorization"
    description : "Authentication token, prefixed by Bearer: Bearer <token>"
  }
}
}
security : {
security_requirement : {
key:
  "bearer"
}
}
}
;