// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	b2c "github.com/gidyon/mpesapayments/pkg/api/b2c"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// B2CAPIClient is an autogenerated mock type for the B2CAPIClient type
type B2CAPIClient struct {
	mock.Mock
}

// CreateB2CPayment provides a mock function with given fields: ctx, in, opts
func (_m *B2CAPIClient) CreateB2CPayment(ctx context.Context, in *b2c.CreateB2CPaymentRequest, opts ...grpc.CallOption) (*b2c.B2CPayment, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *b2c.B2CPayment
	if rf, ok := ret.Get(0).(func(context.Context, *b2c.CreateB2CPaymentRequest, ...grpc.CallOption) *b2c.B2CPayment); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*b2c.B2CPayment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *b2c.CreateB2CPaymentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetB2CPayment provides a mock function with given fields: ctx, in, opts
func (_m *B2CAPIClient) GetB2CPayment(ctx context.Context, in *b2c.GetB2CPaymentRequest, opts ...grpc.CallOption) (*b2c.B2CPayment, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *b2c.B2CPayment
	if rf, ok := ret.Get(0).(func(context.Context, *b2c.GetB2CPaymentRequest, ...grpc.CallOption) *b2c.B2CPayment); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*b2c.B2CPayment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *b2c.GetB2CPaymentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListB2CPayments provides a mock function with given fields: ctx, in, opts
func (_m *B2CAPIClient) ListB2CPayments(ctx context.Context, in *b2c.ListB2CPaymentsRequest, opts ...grpc.CallOption) (*b2c.ListB2CPaymentsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *b2c.ListB2CPaymentsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *b2c.ListB2CPaymentsRequest, ...grpc.CallOption) *b2c.ListB2CPaymentsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*b2c.ListB2CPaymentsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *b2c.ListB2CPaymentsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessB2CPayment provides a mock function with given fields: ctx, in, opts
func (_m *B2CAPIClient) ProcessB2CPayment(ctx context.Context, in *b2c.ProcessB2CPaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *b2c.ProcessB2CPaymentRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *b2c.ProcessB2CPaymentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryAccountBalance provides a mock function with given fields: ctx, in, opts
func (_m *B2CAPIClient) QueryAccountBalance(ctx context.Context, in *b2c.QueryAccountBalanceRequest, opts ...grpc.CallOption) (*b2c.QueryAccountBalanceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *b2c.QueryAccountBalanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *b2c.QueryAccountBalanceRequest, ...grpc.CallOption) *b2c.QueryAccountBalanceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*b2c.QueryAccountBalanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *b2c.QueryAccountBalanceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryTransactionStatus provides a mock function with given fields: ctx, in, opts
func (_m *B2CAPIClient) QueryTransactionStatus(ctx context.Context, in *b2c.QueryTransactionStatusRequest, opts ...grpc.CallOption) (*b2c.QueryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *b2c.QueryResponse
	if rf, ok := ret.Get(0).(func(context.Context, *b2c.QueryTransactionStatusRequest, ...grpc.CallOption) *b2c.QueryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*b2c.QueryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *b2c.QueryTransactionStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReverseTransaction provides a mock function with given fields: ctx, in, opts
func (_m *B2CAPIClient) ReverseTransaction(ctx context.Context, in *b2c.ReverseTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *b2c.ReverseTransactionRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *b2c.ReverseTransactionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferFunds provides a mock function with given fields: ctx, in, opts
func (_m *B2CAPIClient) TransferFunds(ctx context.Context, in *b2c.TransferFundsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *b2c.TransferFundsRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *b2c.TransferFundsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
