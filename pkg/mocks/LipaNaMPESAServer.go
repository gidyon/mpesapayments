// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mpesapayment "github.com/gidyon/mpesapayments/pkg/api/mpesapayment"
)

// LipaNaMPESAServer is an autogenerated mock type for the LipaNaMPESAServer type
type LipaNaMPESAServer struct {
	mock.Mock
}

// AddScopes provides a mock function with given fields: _a0, _a1
func (_m *LipaNaMPESAServer) AddScopes(_a0 context.Context, _a1 *mpesapayment.AddScopesRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *mpesapayment.AddScopesRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mpesapayment.AddScopesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMPESAPayment provides a mock function with given fields: _a0, _a1
func (_m *LipaNaMPESAServer) CreateMPESAPayment(_a0 context.Context, _a1 *mpesapayment.CreateMPESAPaymentRequest) (*mpesapayment.CreateMPESAPaymentResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *mpesapayment.CreateMPESAPaymentResponse
	if rf, ok := ret.Get(0).(func(context.Context, *mpesapayment.CreateMPESAPaymentRequest) *mpesapayment.CreateMPESAPaymentResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpesapayment.CreateMPESAPaymentResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mpesapayment.CreateMPESAPaymentRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMPESAPayment provides a mock function with given fields: _a0, _a1
func (_m *LipaNaMPESAServer) GetMPESAPayment(_a0 context.Context, _a1 *mpesapayment.GetMPESAPaymentRequest) (*mpesapayment.MPESAPayment, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *mpesapayment.MPESAPayment
	if rf, ok := ret.Get(0).(func(context.Context, *mpesapayment.GetMPESAPaymentRequest) *mpesapayment.MPESAPayment); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpesapayment.MPESAPayment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mpesapayment.GetMPESAPaymentRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRandomTransaction provides a mock function with given fields: _a0, _a1
func (_m *LipaNaMPESAServer) GetRandomTransaction(_a0 context.Context, _a1 *mpesapayment.GetRandomTransactionRequest) (*mpesapayment.MPESAPayment, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *mpesapayment.MPESAPayment
	if rf, ok := ret.Get(0).(func(context.Context, *mpesapayment.GetRandomTransactionRequest) *mpesapayment.MPESAPayment); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpesapayment.MPESAPayment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mpesapayment.GetRandomTransactionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScopes provides a mock function with given fields: _a0, _a1
func (_m *LipaNaMPESAServer) GetScopes(_a0 context.Context, _a1 *mpesapayment.GetScopesRequest) (*mpesapayment.GetScopesResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *mpesapayment.GetScopesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *mpesapayment.GetScopesRequest) *mpesapayment.GetScopesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpesapayment.GetScopesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mpesapayment.GetScopesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionsCount provides a mock function with given fields: _a0, _a1
func (_m *LipaNaMPESAServer) GetTransactionsCount(_a0 context.Context, _a1 *mpesapayment.GetTransactionsCountRequest) (*mpesapayment.TransactionsSummary, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *mpesapayment.TransactionsSummary
	if rf, ok := ret.Get(0).(func(context.Context, *mpesapayment.GetTransactionsCountRequest) *mpesapayment.TransactionsSummary); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpesapayment.TransactionsSummary)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mpesapayment.GetTransactionsCountRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMPESAPayments provides a mock function with given fields: _a0, _a1
func (_m *LipaNaMPESAServer) ListMPESAPayments(_a0 context.Context, _a1 *mpesapayment.ListMPESAPaymentsRequest) (*mpesapayment.ListMPESAPaymentsResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *mpesapayment.ListMPESAPaymentsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *mpesapayment.ListMPESAPaymentsRequest) *mpesapayment.ListMPESAPaymentsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpesapayment.ListMPESAPaymentsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mpesapayment.ListMPESAPaymentsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessMpesaPayment provides a mock function with given fields: _a0, _a1
func (_m *LipaNaMPESAServer) ProcessMpesaPayment(_a0 context.Context, _a1 *mpesapayment.ProcessMpesaPaymentRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *mpesapayment.ProcessMpesaPaymentRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mpesapayment.ProcessMpesaPaymentRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishAllMpesaPayment provides a mock function with given fields: _a0, _a1
func (_m *LipaNaMPESAServer) PublishAllMpesaPayment(_a0 context.Context, _a1 *mpesapayment.PublishAllMpesaPaymentRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *mpesapayment.PublishAllMpesaPaymentRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mpesapayment.PublishAllMpesaPaymentRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishMpesaPayment provides a mock function with given fields: _a0, _a1
func (_m *LipaNaMPESAServer) PublishMpesaPayment(_a0 context.Context, _a1 *mpesapayment.PublishMpesaPaymentRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *mpesapayment.PublishMpesaPaymentRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mpesapayment.PublishMpesaPaymentRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedLipaNaMPESAServer provides a mock function with given fields:
func (_m *LipaNaMPESAServer) mustEmbedUnimplementedLipaNaMPESAServer() {
	_m.Called()
}
