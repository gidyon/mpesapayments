// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	c2b "github.com/gidyon/mpesapayments/pkg/api/c2b"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// LNMAPIMock is an autogenerated mock type for the LNMAPIMock type
type LNMAPIMock struct {
	mock.Mock
}

// ArchiveTransactions provides a mock function with given fields: ctx, in, opts
func (_m *LNMAPIMock) ArchiveTransactions(ctx context.Context, in *c2b.ArchiveTransactionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *c2b.ArchiveTransactionsRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *c2b.ArchiveTransactionsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateC2BPayment provides a mock function with given fields: ctx, in, opts
func (_m *LNMAPIMock) CreateC2BPayment(ctx context.Context, in *c2b.CreateC2BPaymentRequest, opts ...grpc.CallOption) (*c2b.CreateC2BPaymentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *c2b.CreateC2BPaymentResponse
	if rf, ok := ret.Get(0).(func(context.Context, *c2b.CreateC2BPaymentRequest, ...grpc.CallOption) *c2b.CreateC2BPaymentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*c2b.CreateC2BPaymentResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *c2b.CreateC2BPaymentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetC2BPayment provides a mock function with given fields: ctx, in, opts
func (_m *LNMAPIMock) GetC2BPayment(ctx context.Context, in *c2b.GetC2BPaymentRequest, opts ...grpc.CallOption) (*c2b.C2BPayment, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *c2b.C2BPayment
	if rf, ok := ret.Get(0).(func(context.Context, *c2b.GetC2BPaymentRequest, ...grpc.CallOption) *c2b.C2BPayment); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*c2b.C2BPayment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *c2b.GetC2BPaymentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRandomTransaction provides a mock function with given fields: ctx, in, opts
func (_m *LNMAPIMock) GetRandomTransaction(ctx context.Context, in *c2b.GetRandomTransactionRequest, opts ...grpc.CallOption) (*c2b.C2BPayment, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *c2b.C2BPayment
	if rf, ok := ret.Get(0).(func(context.Context, *c2b.GetRandomTransactionRequest, ...grpc.CallOption) *c2b.C2BPayment); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*c2b.C2BPayment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *c2b.GetRandomTransactionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScopes provides a mock function with given fields: ctx, in, opts
func (_m *LNMAPIMock) GetScopes(ctx context.Context, in *c2b.GetScopesRequest, opts ...grpc.CallOption) (*c2b.GetScopesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *c2b.GetScopesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *c2b.GetScopesRequest, ...grpc.CallOption) *c2b.GetScopesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*c2b.GetScopesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *c2b.GetScopesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStats provides a mock function with given fields: ctx, in, opts
func (_m *LNMAPIMock) GetStats(ctx context.Context, in *c2b.GetStatsRequest, opts ...grpc.CallOption) (*c2b.StatsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *c2b.StatsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *c2b.GetStatsRequest, ...grpc.CallOption) *c2b.StatsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*c2b.StatsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *c2b.GetStatsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionsCount provides a mock function with given fields: ctx, in, opts
func (_m *LNMAPIMock) GetTransactionsCount(ctx context.Context, in *c2b.GetTransactionsCountRequest, opts ...grpc.CallOption) (*c2b.TransactionsSummary, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *c2b.TransactionsSummary
	if rf, ok := ret.Get(0).(func(context.Context, *c2b.GetTransactionsCountRequest, ...grpc.CallOption) *c2b.TransactionsSummary); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*c2b.TransactionsSummary)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *c2b.GetTransactionsCountRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListC2BPayments provides a mock function with given fields: ctx, in, opts
func (_m *LNMAPIMock) ListC2BPayments(ctx context.Context, in *c2b.ListC2BPaymentsRequest, opts ...grpc.CallOption) (*c2b.ListC2BPaymentsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *c2b.ListC2BPaymentsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *c2b.ListC2BPaymentsRequest, ...grpc.CallOption) *c2b.ListC2BPaymentsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*c2b.ListC2BPaymentsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *c2b.ListC2BPaymentsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStats provides a mock function with given fields: ctx, in, opts
func (_m *LNMAPIMock) ListStats(ctx context.Context, in *c2b.ListStatsRequest, opts ...grpc.CallOption) (*c2b.StatsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *c2b.StatsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *c2b.ListStatsRequest, ...grpc.CallOption) *c2b.StatsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*c2b.StatsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *c2b.ListStatsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessC2BPayment provides a mock function with given fields: ctx, in, opts
func (_m *LNMAPIMock) ProcessC2BPayment(ctx context.Context, in *c2b.ProcessC2BPaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *c2b.ProcessC2BPaymentRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *c2b.ProcessC2BPaymentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishAllC2BPayments provides a mock function with given fields: ctx, in, opts
func (_m *LNMAPIMock) PublishAllC2BPayments(ctx context.Context, in *c2b.PublishAllC2BPaymentsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *c2b.PublishAllC2BPaymentsRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *c2b.PublishAllC2BPaymentsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishC2BPayment provides a mock function with given fields: ctx, in, opts
func (_m *LNMAPIMock) PublishC2BPayment(ctx context.Context, in *c2b.PublishC2BPaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *c2b.PublishC2BPaymentRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *c2b.PublishC2BPaymentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveScopes provides a mock function with given fields: ctx, in, opts
func (_m *LNMAPIMock) SaveScopes(ctx context.Context, in *c2b.SaveScopesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *c2b.SaveScopesRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *c2b.SaveScopesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
