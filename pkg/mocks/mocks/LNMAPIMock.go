// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"

	mpesapayment "github.com/gidyon/mpesapayments/pkg/api/mpesapayment"
)

// LNMAPIMock is an autogenerated mock type for the LNMAPIMock type
type LNMAPIMock struct {
	mock.Mock
}

// AddScopes provides a mock function with given fields: ctx, in, opts
func (_m *LNMAPIMock) AddScopes(ctx context.Context, in *mpesapayment.AddScopesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *mpesapayment.AddScopesRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mpesapayment.AddScopesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMPESAPayment provides a mock function with given fields: ctx, in, opts
func (_m *LNMAPIMock) CreateMPESAPayment(ctx context.Context, in *mpesapayment.CreateMPESAPaymentRequest, opts ...grpc.CallOption) (*mpesapayment.CreateMPESAPaymentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mpesapayment.CreateMPESAPaymentResponse
	if rf, ok := ret.Get(0).(func(context.Context, *mpesapayment.CreateMPESAPaymentRequest, ...grpc.CallOption) *mpesapayment.CreateMPESAPaymentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpesapayment.CreateMPESAPaymentResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mpesapayment.CreateMPESAPaymentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMPESAPayment provides a mock function with given fields: ctx, in, opts
func (_m *LNMAPIMock) GetMPESAPayment(ctx context.Context, in *mpesapayment.GetMPESAPaymentRequest, opts ...grpc.CallOption) (*mpesapayment.MPESAPayment, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mpesapayment.MPESAPayment
	if rf, ok := ret.Get(0).(func(context.Context, *mpesapayment.GetMPESAPaymentRequest, ...grpc.CallOption) *mpesapayment.MPESAPayment); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpesapayment.MPESAPayment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mpesapayment.GetMPESAPaymentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScopes provides a mock function with given fields: ctx, in, opts
func (_m *LNMAPIMock) GetScopes(ctx context.Context, in *mpesapayment.GetScopesRequest, opts ...grpc.CallOption) (*mpesapayment.GetScopesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mpesapayment.GetScopesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *mpesapayment.GetScopesRequest, ...grpc.CallOption) *mpesapayment.GetScopesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpesapayment.GetScopesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mpesapayment.GetScopesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMPESAPayments provides a mock function with given fields: ctx, in, opts
func (_m *LNMAPIMock) ListMPESAPayments(ctx context.Context, in *mpesapayment.ListMPESAPaymentsRequest, opts ...grpc.CallOption) (*mpesapayment.ListMPESAPaymentsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mpesapayment.ListMPESAPaymentsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *mpesapayment.ListMPESAPaymentsRequest, ...grpc.CallOption) *mpesapayment.ListMPESAPaymentsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpesapayment.ListMPESAPaymentsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mpesapayment.ListMPESAPaymentsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessMpesaPayment provides a mock function with given fields: ctx, in, opts
func (_m *LNMAPIMock) ProcessMpesaPayment(ctx context.Context, in *mpesapayment.ProcessMpesaPaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *mpesapayment.ProcessMpesaPaymentRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mpesapayment.ProcessMpesaPaymentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishAllMpesaPayment provides a mock function with given fields: ctx, in, opts
func (_m *LNMAPIMock) PublishAllMpesaPayment(ctx context.Context, in *mpesapayment.PublishAllMpesaPaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *mpesapayment.PublishAllMpesaPaymentRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mpesapayment.PublishAllMpesaPaymentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishMpesaPayment provides a mock function with given fields: ctx, in, opts
func (_m *LNMAPIMock) PublishMpesaPayment(ctx context.Context, in *mpesapayment.PublishMpesaPaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *mpesapayment.PublishMpesaPaymentRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mpesapayment.PublishMpesaPaymentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
