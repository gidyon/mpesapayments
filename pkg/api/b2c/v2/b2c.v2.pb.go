// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: b2c.v2.proto

package v2

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommandId int32

const (
	CommandId_COMMANDID_UNSPECIFIED CommandId = 0
	CommandId_SALARY_PAYMENT        CommandId = 1
	CommandId_BUSINESS_PAYMENT      CommandId = 2
	CommandId_PROMOTION_PAYMENT     CommandId = 3
)

// Enum value maps for CommandId.
var (
	CommandId_name = map[int32]string{
		0: "COMMANDID_UNSPECIFIED",
		1: "SALARY_PAYMENT",
		2: "BUSINESS_PAYMENT",
		3: "PROMOTION_PAYMENT",
	}
	CommandId_value = map[string]int32{
		"COMMANDID_UNSPECIFIED": 0,
		"SALARY_PAYMENT":        1,
		"BUSINESS_PAYMENT":      2,
		"PROMOTION_PAYMENT":     3,
	}
)

func (x CommandId) Enum() *CommandId {
	p := new(CommandId)
	*p = x
	return p
}

func (x CommandId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandId) Descriptor() protoreflect.EnumDescriptor {
	return file_b2c_v2_proto_enumTypes[0].Descriptor()
}

func (CommandId) Type() protoreflect.EnumType {
	return &file_b2c_v2_proto_enumTypes[0]
}

func (x CommandId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommandId.Descriptor instead.
func (CommandId) EnumDescriptor() ([]byte, []int) {
	return file_b2c_v2_proto_rawDescGZIP(), []int{0}
}

type B2CStatus int32

const (
	B2CStatus_B2C_STATUS_UNKNOWN   B2CStatus = 0
	B2CStatus_B2C_REQUEST_FAILED   B2CStatus = 1
	B2CStatus_B2C_REQUEST_SUBMITED B2CStatus = 3
	B2CStatus_B2C_SUCCESS          B2CStatus = 5
	B2CStatus_B2C_FAILED           B2CStatus = 6
)

// Enum value maps for B2CStatus.
var (
	B2CStatus_name = map[int32]string{
		0: "B2C_STATUS_UNKNOWN",
		1: "B2C_REQUEST_FAILED",
		3: "B2C_REQUEST_SUBMITED",
		5: "B2C_SUCCESS",
		6: "B2C_FAILED",
	}
	B2CStatus_value = map[string]int32{
		"B2C_STATUS_UNKNOWN":   0,
		"B2C_REQUEST_FAILED":   1,
		"B2C_REQUEST_SUBMITED": 3,
		"B2C_SUCCESS":          5,
		"B2C_FAILED":           6,
	}
)

func (x B2CStatus) Enum() *B2CStatus {
	p := new(B2CStatus)
	*p = x
	return p
}

func (x B2CStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (B2CStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_b2c_v2_proto_enumTypes[1].Descriptor()
}

func (B2CStatus) Type() protoreflect.EnumType {
	return &file_b2c_v2_proto_enumTypes[1]
}

func (x B2CStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use B2CStatus.Descriptor instead.
func (B2CStatus) EnumDescriptor() ([]byte, []int) {
	return file_b2c_v2_proto_rawDescGZIP(), []int{1}
}

type B2COrderField int32

const (
	B2COrderField_B2C_ORDER_FIELD_UNSPECIFIED B2COrderField = 0
	B2COrderField_B2C_PAYMENT_ID              B2COrderField = 1
	B2COrderField_B2C_TRANSACTION_TIMESTAMP   B2COrderField = 2
)

// Enum value maps for B2COrderField.
var (
	B2COrderField_name = map[int32]string{
		0: "B2C_ORDER_FIELD_UNSPECIFIED",
		1: "B2C_PAYMENT_ID",
		2: "B2C_TRANSACTION_TIMESTAMP",
	}
	B2COrderField_value = map[string]int32{
		"B2C_ORDER_FIELD_UNSPECIFIED": 0,
		"B2C_PAYMENT_ID":              1,
		"B2C_TRANSACTION_TIMESTAMP":   2,
	}
)

func (x B2COrderField) Enum() *B2COrderField {
	p := new(B2COrderField)
	*p = x
	return p
}

func (x B2COrderField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (B2COrderField) Descriptor() protoreflect.EnumDescriptor {
	return file_b2c_v2_proto_enumTypes[2].Descriptor()
}

func (B2COrderField) Type() protoreflect.EnumType {
	return &file_b2c_v2_proto_enumTypes[2]
}

func (x B2COrderField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use B2COrderField.Descriptor instead.
func (B2COrderField) EnumDescriptor() ([]byte, []int) {
	return file_b2c_v2_proto_rawDescGZIP(), []int{2}
}

type B2CProcessedState int32

const (
	B2CProcessedState_B2C_PROCESS_STATE_UNSPECIFIED B2CProcessedState = 0
	B2CProcessedState_B2C_PROCESSED                 B2CProcessedState = 1
	B2CProcessedState_B2C_NOT_PROCESSED             B2CProcessedState = 2
)

// Enum value maps for B2CProcessedState.
var (
	B2CProcessedState_name = map[int32]string{
		0: "B2C_PROCESS_STATE_UNSPECIFIED",
		1: "B2C_PROCESSED",
		2: "B2C_NOT_PROCESSED",
	}
	B2CProcessedState_value = map[string]int32{
		"B2C_PROCESS_STATE_UNSPECIFIED": 0,
		"B2C_PROCESSED":                 1,
		"B2C_NOT_PROCESSED":             2,
	}
)

func (x B2CProcessedState) Enum() *B2CProcessedState {
	p := new(B2CProcessedState)
	*p = x
	return p
}

func (x B2CProcessedState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (B2CProcessedState) Descriptor() protoreflect.EnumDescriptor {
	return file_b2c_v2_proto_enumTypes[3].Descriptor()
}

func (B2CProcessedState) Type() protoreflect.EnumType {
	return &file_b2c_v2_proto_enumTypes[3]
}

func (x B2CProcessedState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use B2CProcessedState.Descriptor instead.
func (B2CProcessedState) EnumDescriptor() ([]byte, []int) {
	return file_b2c_v2_proto_rawDescGZIP(), []int{3}
}

type QueryTransactionStatusRequest_IdentifierType int32

const (
	QueryTransactionStatusRequest_QUERY_TRANSACTION_UNSPECIFIED QueryTransactionStatusRequest_IdentifierType = 0
	QueryTransactionStatusRequest_MSISDN                        QueryTransactionStatusRequest_IdentifierType = 1
	QueryTransactionStatusRequest_TILL_NUMBER                   QueryTransactionStatusRequest_IdentifierType = 2
	QueryTransactionStatusRequest_ORGANIZATION_SHORT_CODE       QueryTransactionStatusRequest_IdentifierType = 3
)

// Enum value maps for QueryTransactionStatusRequest_IdentifierType.
var (
	QueryTransactionStatusRequest_IdentifierType_name = map[int32]string{
		0: "QUERY_TRANSACTION_UNSPECIFIED",
		1: "MSISDN",
		2: "TILL_NUMBER",
		3: "ORGANIZATION_SHORT_CODE",
	}
	QueryTransactionStatusRequest_IdentifierType_value = map[string]int32{
		"QUERY_TRANSACTION_UNSPECIFIED": 0,
		"MSISDN":                        1,
		"TILL_NUMBER":                   2,
		"ORGANIZATION_SHORT_CODE":       3,
	}
)

func (x QueryTransactionStatusRequest_IdentifierType) Enum() *QueryTransactionStatusRequest_IdentifierType {
	p := new(QueryTransactionStatusRequest_IdentifierType)
	*p = x
	return p
}

func (x QueryTransactionStatusRequest_IdentifierType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryTransactionStatusRequest_IdentifierType) Descriptor() protoreflect.EnumDescriptor {
	return file_b2c_v2_proto_enumTypes[4].Descriptor()
}

func (QueryTransactionStatusRequest_IdentifierType) Type() protoreflect.EnumType {
	return &file_b2c_v2_proto_enumTypes[4]
}

func (x QueryTransactionStatusRequest_IdentifierType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryTransactionStatusRequest_IdentifierType.Descriptor instead.
func (QueryTransactionStatusRequest_IdentifierType) EnumDescriptor() ([]byte, []int) {
	return file_b2c_v2_proto_rawDescGZIP(), []int{15, 0}
}

type QueryAccountBalanceRequest_IdentifierType int32

const (
	QueryAccountBalanceRequest_QUERY_ACCOUNT_UNSPECIFIED QueryAccountBalanceRequest_IdentifierType = 0
	QueryAccountBalanceRequest_MSISDN                    QueryAccountBalanceRequest_IdentifierType = 1
	QueryAccountBalanceRequest_TILL_NUMBER               QueryAccountBalanceRequest_IdentifierType = 2
	QueryAccountBalanceRequest_ORGANIZATION_SHORT_CODE   QueryAccountBalanceRequest_IdentifierType = 4
)

// Enum value maps for QueryAccountBalanceRequest_IdentifierType.
var (
	QueryAccountBalanceRequest_IdentifierType_name = map[int32]string{
		0: "QUERY_ACCOUNT_UNSPECIFIED",
		1: "MSISDN",
		2: "TILL_NUMBER",
		4: "ORGANIZATION_SHORT_CODE",
	}
	QueryAccountBalanceRequest_IdentifierType_value = map[string]int32{
		"QUERY_ACCOUNT_UNSPECIFIED": 0,
		"MSISDN":                    1,
		"TILL_NUMBER":               2,
		"ORGANIZATION_SHORT_CODE":   4,
	}
)

func (x QueryAccountBalanceRequest_IdentifierType) Enum() *QueryAccountBalanceRequest_IdentifierType {
	p := new(QueryAccountBalanceRequest_IdentifierType)
	*p = x
	return p
}

func (x QueryAccountBalanceRequest_IdentifierType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryAccountBalanceRequest_IdentifierType) Descriptor() protoreflect.EnumDescriptor {
	return file_b2c_v2_proto_enumTypes[5].Descriptor()
}

func (QueryAccountBalanceRequest_IdentifierType) Type() protoreflect.EnumType {
	return &file_b2c_v2_proto_enumTypes[5]
}

func (x QueryAccountBalanceRequest_IdentifierType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryAccountBalanceRequest_IdentifierType.Descriptor instead.
func (QueryAccountBalanceRequest_IdentifierType) EnumDescriptor() ([]byte, []int) {
	return file_b2c_v2_proto_rawDescGZIP(), []int{17, 0}
}

type TransferFundsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitiatorId                   string       `protobuf:"bytes,1,opt,name=initiator_id,json=initiatorId,proto3" json:"initiator_id,omitempty"`
	InitiatorTransactionReference string       `protobuf:"bytes,2,opt,name=initiator_transaction_reference,json=initiatorTransactionReference,proto3" json:"initiator_transaction_reference,omitempty"`
	InitiatorCustomerReference    string       `protobuf:"bytes,3,opt,name=initiator_customer_reference,json=initiatorCustomerReference,proto3" json:"initiator_customer_reference,omitempty"`
	InitiatorCustomerNames        string       `protobuf:"bytes,4,opt,name=initiator_customer_names,json=initiatorCustomerNames,proto3" json:"initiator_customer_names,omitempty"`
	Msisdn                        string       `protobuf:"bytes,5,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	Amount                        float64      `protobuf:"fixed64,6,opt,name=amount,proto3" json:"amount,omitempty"`
	ShortCode                     string       `protobuf:"bytes,7,opt,name=short_code,json=shortCode,proto3" json:"short_code,omitempty"`
	Remarks                       string       `protobuf:"bytes,8,opt,name=remarks,proto3" json:"remarks,omitempty"`
	Occassion                     string       `protobuf:"bytes,9,opt,name=occassion,proto3" json:"occassion,omitempty"`
	CommandId                     CommandId    `protobuf:"varint,11,opt,name=command_id,json=commandId,proto3,enum=gidyon.mpesa.b2c.CommandId" json:"command_id,omitempty"`
	Publish                       bool         `protobuf:"varint,12,opt,name=publish,proto3" json:"publish,omitempty"`
	PublishMessage                *PublishInfo `protobuf:"bytes,13,opt,name=publish_message,json=publishMessage,proto3" json:"publish_message,omitempty"`
}

func (x *TransferFundsRequest) Reset() {
	*x = TransferFundsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_v2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferFundsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferFundsRequest) ProtoMessage() {}

func (x *TransferFundsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_v2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferFundsRequest.ProtoReflect.Descriptor instead.
func (*TransferFundsRequest) Descriptor() ([]byte, []int) {
	return file_b2c_v2_proto_rawDescGZIP(), []int{0}
}

func (x *TransferFundsRequest) GetInitiatorId() string {
	if x != nil {
		return x.InitiatorId
	}
	return ""
}

func (x *TransferFundsRequest) GetInitiatorTransactionReference() string {
	if x != nil {
		return x.InitiatorTransactionReference
	}
	return ""
}

func (x *TransferFundsRequest) GetInitiatorCustomerReference() string {
	if x != nil {
		return x.InitiatorCustomerReference
	}
	return ""
}

func (x *TransferFundsRequest) GetInitiatorCustomerNames() string {
	if x != nil {
		return x.InitiatorCustomerNames
	}
	return ""
}

func (x *TransferFundsRequest) GetMsisdn() string {
	if x != nil {
		return x.Msisdn
	}
	return ""
}

func (x *TransferFundsRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TransferFundsRequest) GetShortCode() string {
	if x != nil {
		return x.ShortCode
	}
	return ""
}

func (x *TransferFundsRequest) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *TransferFundsRequest) GetOccassion() string {
	if x != nil {
		return x.Occassion
	}
	return ""
}

func (x *TransferFundsRequest) GetCommandId() CommandId {
	if x != nil {
		return x.CommandId
	}
	return CommandId_COMMANDID_UNSPECIFIED
}

func (x *TransferFundsRequest) GetPublish() bool {
	if x != nil {
		return x.Publish
	}
	return false
}

func (x *TransferFundsRequest) GetPublishMessage() *PublishInfo {
	if x != nil {
		return x.PublishMessage
	}
	return nil
}

type TransferFundsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Progress bool   `protobuf:"varint,1,opt,name=progress,proto3" json:"progress,omitempty"`
	Message  string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TransferFundsResponse) Reset() {
	*x = TransferFundsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_v2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferFundsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferFundsResponse) ProtoMessage() {}

func (x *TransferFundsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_v2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferFundsResponse.ProtoReflect.Descriptor instead.
func (*TransferFundsResponse) Descriptor() ([]byte, []int) {
	return file_b2c_v2_proto_rawDescGZIP(), []int{1}
}

func (x *TransferFundsResponse) GetProgress() bool {
	if x != nil {
		return x.Progress
	}
	return false
}

func (x *TransferFundsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PublishMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitiatorId    string       `protobuf:"bytes,1,opt,name=initiator_id,json=initiatorId,proto3" json:"initiator_id,omitempty"`
	PaymentId      string       `protobuf:"bytes,2,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	MpesaReceiptId string       `protobuf:"bytes,3,opt,name=mpesa_receipt_id,json=mpesaReceiptId,proto3" json:"mpesa_receipt_id,omitempty"`
	Msisdn         string       `protobuf:"bytes,4,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	PublishInfo    *PublishInfo `protobuf:"bytes,5,opt,name=publish_info,json=publishInfo,proto3" json:"publish_info,omitempty"`
	Payment        *B2CPayment  `protobuf:"bytes,6,opt,name=payment,proto3" json:"payment,omitempty"`
}

func (x *PublishMessage) Reset() {
	*x = PublishMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_v2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishMessage) ProtoMessage() {}

func (x *PublishMessage) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_v2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishMessage.ProtoReflect.Descriptor instead.
func (*PublishMessage) Descriptor() ([]byte, []int) {
	return file_b2c_v2_proto_rawDescGZIP(), []int{2}
}

func (x *PublishMessage) GetInitiatorId() string {
	if x != nil {
		return x.InitiatorId
	}
	return ""
}

func (x *PublishMessage) GetPaymentId() string {
	if x != nil {
		return x.PaymentId
	}
	return ""
}

func (x *PublishMessage) GetMpesaReceiptId() string {
	if x != nil {
		return x.MpesaReceiptId
	}
	return ""
}

func (x *PublishMessage) GetMsisdn() string {
	if x != nil {
		return x.Msisdn
	}
	return ""
}

func (x *PublishMessage) GetPublishInfo() *PublishInfo {
	if x != nil {
		return x.PublishInfo
	}
	return nil
}

func (x *PublishMessage) GetPayment() *B2CPayment {
	if x != nil {
		return x.Payment
	}
	return nil
}

type PublishInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlyOnSuccess bool              `protobuf:"varint,1,opt,name=only_on_success,json=onlyOnSuccess,proto3" json:"only_on_success,omitempty"`
	ChannelName   string            `protobuf:"bytes,2,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
	Payload       map[string]string `protobuf:"bytes,3,rep,name=payload,proto3" json:"payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PublishInfo) Reset() {
	*x = PublishInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_v2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishInfo) ProtoMessage() {}

func (x *PublishInfo) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_v2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishInfo.ProtoReflect.Descriptor instead.
func (*PublishInfo) Descriptor() ([]byte, []int) {
	return file_b2c_v2_proto_rawDescGZIP(), []int{3}
}

func (x *PublishInfo) GetOnlyOnSuccess() bool {
	if x != nil {
		return x.OnlyOnSuccess
	}
	return false
}

func (x *PublishInfo) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *PublishInfo) GetPayload() map[string]string {
	if x != nil {
		return x.Payload
	}
	return nil
}

type B2CPayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitiatorId                   string    `protobuf:"bytes,1,opt,name=initiator_id,json=initiatorId,proto3" json:"initiator_id,omitempty"`
	TransactionId                 string    `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	InitiatorTransactionReference string    `protobuf:"bytes,3,opt,name=initiator_transaction_reference,json=initiatorTransactionReference,proto3" json:"initiator_transaction_reference,omitempty"`
	InitiatorCustomerReference    string    `protobuf:"bytes,4,opt,name=initiator_customer_reference,json=initiatorCustomerReference,proto3" json:"initiator_customer_reference,omitempty"`
	InitiatorCustomerNames        string    `protobuf:"bytes,5,opt,name=initiator_customer_names,json=initiatorCustomerNames,proto3" json:"initiator_customer_names,omitempty"`
	OrgShortCode                  string    `protobuf:"bytes,6,opt,name=org_short_code,json=orgShortCode,proto3" json:"org_short_code,omitempty"`
	CommandId                     CommandId `protobuf:"varint,7,opt,name=command_id,json=commandId,proto3,enum=gidyon.mpesa.b2c.CommandId" json:"command_id,omitempty"`
	Msisdn                        string    `protobuf:"bytes,8,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	Amount                        float32   `protobuf:"fixed32,9,opt,name=amount,proto3" json:"amount,omitempty"`
	ConversationId                string    `protobuf:"bytes,10,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	OriginalConversationId        string    `protobuf:"bytes,11,opt,name=original_conversation_id,json=originalConversationId,proto3" json:"original_conversation_id,omitempty"`
	B2CResponseDescription        string    `protobuf:"bytes,12,opt,name=b2c_response_description,json=b2cResponseDescription,proto3" json:"b2c_response_description,omitempty"`
	B2CResponseCode               string    `protobuf:"bytes,13,opt,name=b2c_response_code,json=b2cResponseCode,proto3" json:"b2c_response_code,omitempty"`
	B2CResultDescription          string    `protobuf:"bytes,15,opt,name=b2c_result_description,json=b2cResultDescription,proto3" json:"b2c_result_description,omitempty"`
	B2CResultCode                 string    `protobuf:"bytes,16,opt,name=b2c_result_code,json=b2cResultCode,proto3" json:"b2c_result_code,omitempty"`
	ReceiverPartyPublicName       string    `protobuf:"bytes,17,opt,name=receiver_party_public_name,json=receiverPartyPublicName,proto3" json:"receiver_party_public_name,omitempty"`
	MpesaReceiptId                string    `protobuf:"bytes,18,opt,name=mpesa_receipt_id,json=mpesaReceiptId,proto3" json:"mpesa_receipt_id,omitempty"`
	WorkingAccountFunds           float32   `protobuf:"fixed32,19,opt,name=working_account_funds,json=workingAccountFunds,proto3" json:"working_account_funds,omitempty"`
	UtilityAccountFunds           float32   `protobuf:"fixed32,20,opt,name=utility_account_funds,json=utilityAccountFunds,proto3" json:"utility_account_funds,omitempty"`
	MpesaCharges                  float32   `protobuf:"fixed32,21,opt,name=mpesa_charges,json=mpesaCharges,proto3" json:"mpesa_charges,omitempty"`
	OnfonCharges                  float32   `protobuf:"fixed32,22,opt,name=onfon_charges,json=onfonCharges,proto3" json:"onfon_charges,omitempty"`
	RecipientRegistered           bool      `protobuf:"varint,23,opt,name=recipient_registered,json=recipientRegistered,proto3" json:"recipient_registered,omitempty"`
	B2CStatus                     B2CStatus `protobuf:"varint,24,opt,name=b2c_status,json=b2cStatus,proto3,enum=gidyon.mpesa.b2c.B2CStatus" json:"b2c_status,omitempty"`
	Source                        string    `protobuf:"bytes,25,opt,name=source,proto3" json:"source,omitempty"`
	Tag                           string    `protobuf:"bytes,26,opt,name=tag,proto3" json:"tag,omitempty"`
	Succeeded                     bool      `protobuf:"varint,27,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Processed                     bool      `protobuf:"varint,28,opt,name=processed,proto3" json:"processed,omitempty"`
	TransactionTimestamp          int64     `protobuf:"varint,29,opt,name=transaction_timestamp,json=transactionTimestamp,proto3" json:"transaction_timestamp,omitempty"`
	CreateDate                    string    `protobuf:"bytes,30,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
}

func (x *B2CPayment) Reset() {
	*x = B2CPayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_v2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *B2CPayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*B2CPayment) ProtoMessage() {}

func (x *B2CPayment) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_v2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use B2CPayment.ProtoReflect.Descriptor instead.
func (*B2CPayment) Descriptor() ([]byte, []int) {
	return file_b2c_v2_proto_rawDescGZIP(), []int{4}
}

func (x *B2CPayment) GetInitiatorId() string {
	if x != nil {
		return x.InitiatorId
	}
	return ""
}

func (x *B2CPayment) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *B2CPayment) GetInitiatorTransactionReference() string {
	if x != nil {
		return x.InitiatorTransactionReference
	}
	return ""
}

func (x *B2CPayment) GetInitiatorCustomerReference() string {
	if x != nil {
		return x.InitiatorCustomerReference
	}
	return ""
}

func (x *B2CPayment) GetInitiatorCustomerNames() string {
	if x != nil {
		return x.InitiatorCustomerNames
	}
	return ""
}

func (x *B2CPayment) GetOrgShortCode() string {
	if x != nil {
		return x.OrgShortCode
	}
	return ""
}

func (x *B2CPayment) GetCommandId() CommandId {
	if x != nil {
		return x.CommandId
	}
	return CommandId_COMMANDID_UNSPECIFIED
}

func (x *B2CPayment) GetMsisdn() string {
	if x != nil {
		return x.Msisdn
	}
	return ""
}

func (x *B2CPayment) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *B2CPayment) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *B2CPayment) GetOriginalConversationId() string {
	if x != nil {
		return x.OriginalConversationId
	}
	return ""
}

func (x *B2CPayment) GetB2CResponseDescription() string {
	if x != nil {
		return x.B2CResponseDescription
	}
	return ""
}

func (x *B2CPayment) GetB2CResponseCode() string {
	if x != nil {
		return x.B2CResponseCode
	}
	return ""
}

func (x *B2CPayment) GetB2CResultDescription() string {
	if x != nil {
		return x.B2CResultDescription
	}
	return ""
}

func (x *B2CPayment) GetB2CResultCode() string {
	if x != nil {
		return x.B2CResultCode
	}
	return ""
}

func (x *B2CPayment) GetReceiverPartyPublicName() string {
	if x != nil {
		return x.ReceiverPartyPublicName
	}
	return ""
}

func (x *B2CPayment) GetMpesaReceiptId() string {
	if x != nil {
		return x.MpesaReceiptId
	}
	return ""
}

func (x *B2CPayment) GetWorkingAccountFunds() float32 {
	if x != nil {
		return x.WorkingAccountFunds
	}
	return 0
}

func (x *B2CPayment) GetUtilityAccountFunds() float32 {
	if x != nil {
		return x.UtilityAccountFunds
	}
	return 0
}

func (x *B2CPayment) GetMpesaCharges() float32 {
	if x != nil {
		return x.MpesaCharges
	}
	return 0
}

func (x *B2CPayment) GetOnfonCharges() float32 {
	if x != nil {
		return x.OnfonCharges
	}
	return 0
}

func (x *B2CPayment) GetRecipientRegistered() bool {
	if x != nil {
		return x.RecipientRegistered
	}
	return false
}

func (x *B2CPayment) GetB2CStatus() B2CStatus {
	if x != nil {
		return x.B2CStatus
	}
	return B2CStatus_B2C_STATUS_UNKNOWN
}

func (x *B2CPayment) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *B2CPayment) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *B2CPayment) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *B2CPayment) GetProcessed() bool {
	if x != nil {
		return x.Processed
	}
	return false
}

func (x *B2CPayment) GetTransactionTimestamp() int64 {
	if x != nil {
		return x.TransactionTimestamp
	}
	return 0
}

func (x *B2CPayment) GetCreateDate() string {
	if x != nil {
		return x.CreateDate
	}
	return ""
}

type GetB2CPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId string `protobuf:"bytes,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	IsMpesaId bool   `protobuf:"varint,2,opt,name=is_mpesa_id,json=isMpesaId,proto3" json:"is_mpesa_id,omitempty"`
}

func (x *GetB2CPaymentRequest) Reset() {
	*x = GetB2CPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_v2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetB2CPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetB2CPaymentRequest) ProtoMessage() {}

func (x *GetB2CPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_v2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetB2CPaymentRequest.ProtoReflect.Descriptor instead.
func (*GetB2CPaymentRequest) Descriptor() ([]byte, []int) {
	return file_b2c_v2_proto_rawDescGZIP(), []int{5}
}

func (x *GetB2CPaymentRequest) GetPaymentId() string {
	if x != nil {
		return x.PaymentId
	}
	return ""
}

func (x *GetB2CPaymentRequest) GetIsMpesaId() bool {
	if x != nil {
		return x.IsMpesaId
	}
	return false
}

type ListB2CPaymentFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxDate                         string            `protobuf:"bytes,1,opt,name=tx_date,json=txDate,proto3" json:"tx_date,omitempty"`
	Msisdns                        []string          `protobuf:"bytes,2,rep,name=msisdns,proto3" json:"msisdns,omitempty"`
	MpesaReceipts                  []string          `protobuf:"bytes,3,rep,name=mpesa_receipts,json=mpesaReceipts,proto3" json:"mpesa_receipts,omitempty"`
	InitiatorIds                   []string          `protobuf:"bytes,4,rep,name=initiator_ids,json=initiatorIds,proto3" json:"initiator_ids,omitempty"`
	InitiatorCustomerReferences    []string          `protobuf:"bytes,5,rep,name=initiator_customer_references,json=initiatorCustomerReferences,proto3" json:"initiator_customer_references,omitempty"`
	InitiatorTransactionReferences []string          `protobuf:"bytes,6,rep,name=initiator_transaction_references,json=initiatorTransactionReferences,proto3" json:"initiator_transaction_references,omitempty"`
	ShortCodes                     []string          `protobuf:"bytes,7,rep,name=short_codes,json=shortCodes,proto3" json:"short_codes,omitempty"`
	B2CStatuses                    []B2CStatus       `protobuf:"varint,8,rep,packed,name=b2c_statuses,json=b2cStatuses,proto3,enum=gidyon.mpesa.b2c.B2CStatus" json:"b2c_statuses,omitempty"`
	ProcessState                   B2CProcessedState `protobuf:"varint,9,opt,name=process_state,json=processState,proto3,enum=gidyon.mpesa.b2c.B2CProcessedState" json:"process_state,omitempty"`
	StartTimestamp                 int64             `protobuf:"varint,10,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	EndTimestamp                   int64             `protobuf:"varint,11,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	OrderField                     B2COrderField     `protobuf:"varint,12,opt,name=order_field,json=orderField,proto3,enum=gidyon.mpesa.b2c.B2COrderField" json:"order_field,omitempty"`
}

func (x *ListB2CPaymentFilter) Reset() {
	*x = ListB2CPaymentFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_v2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListB2CPaymentFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListB2CPaymentFilter) ProtoMessage() {}

func (x *ListB2CPaymentFilter) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_v2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListB2CPaymentFilter.ProtoReflect.Descriptor instead.
func (*ListB2CPaymentFilter) Descriptor() ([]byte, []int) {
	return file_b2c_v2_proto_rawDescGZIP(), []int{6}
}

func (x *ListB2CPaymentFilter) GetTxDate() string {
	if x != nil {
		return x.TxDate
	}
	return ""
}

func (x *ListB2CPaymentFilter) GetMsisdns() []string {
	if x != nil {
		return x.Msisdns
	}
	return nil
}

func (x *ListB2CPaymentFilter) GetMpesaReceipts() []string {
	if x != nil {
		return x.MpesaReceipts
	}
	return nil
}

func (x *ListB2CPaymentFilter) GetInitiatorIds() []string {
	if x != nil {
		return x.InitiatorIds
	}
	return nil
}

func (x *ListB2CPaymentFilter) GetInitiatorCustomerReferences() []string {
	if x != nil {
		return x.InitiatorCustomerReferences
	}
	return nil
}

func (x *ListB2CPaymentFilter) GetInitiatorTransactionReferences() []string {
	if x != nil {
		return x.InitiatorTransactionReferences
	}
	return nil
}

func (x *ListB2CPaymentFilter) GetShortCodes() []string {
	if x != nil {
		return x.ShortCodes
	}
	return nil
}

func (x *ListB2CPaymentFilter) GetB2CStatuses() []B2CStatus {
	if x != nil {
		return x.B2CStatuses
	}
	return nil
}

func (x *ListB2CPaymentFilter) GetProcessState() B2CProcessedState {
	if x != nil {
		return x.ProcessState
	}
	return B2CProcessedState_B2C_PROCESS_STATE_UNSPECIFIED
}

func (x *ListB2CPaymentFilter) GetStartTimestamp() int64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *ListB2CPaymentFilter) GetEndTimestamp() int64 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *ListB2CPaymentFilter) GetOrderField() B2COrderField {
	if x != nil {
		return x.OrderField
	}
	return B2COrderField_B2C_ORDER_FIELD_UNSPECIFIED
}

type ListB2CPaymentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageToken string                `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	PageSize  int32                 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Filter    *ListB2CPaymentFilter `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListB2CPaymentsRequest) Reset() {
	*x = ListB2CPaymentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_v2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListB2CPaymentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListB2CPaymentsRequest) ProtoMessage() {}

func (x *ListB2CPaymentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_v2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListB2CPaymentsRequest.ProtoReflect.Descriptor instead.
func (*ListB2CPaymentsRequest) Descriptor() ([]byte, []int) {
	return file_b2c_v2_proto_rawDescGZIP(), []int{7}
}

func (x *ListB2CPaymentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListB2CPaymentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListB2CPaymentsRequest) GetFilter() *ListB2CPaymentFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListB2CPaymentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextPageToken   string        `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	B2CPayments     []*B2CPayment `protobuf:"bytes,2,rep,name=b2c_payments,json=b2cPayments,proto3" json:"b2c_payments,omitempty"`
	CollectionCount int64         `protobuf:"varint,3,opt,name=collection_count,json=collectionCount,proto3" json:"collection_count,omitempty"`
}

func (x *ListB2CPaymentsResponse) Reset() {
	*x = ListB2CPaymentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_v2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListB2CPaymentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListB2CPaymentsResponse) ProtoMessage() {}

func (x *ListB2CPaymentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_v2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListB2CPaymentsResponse.ProtoReflect.Descriptor instead.
func (*ListB2CPaymentsResponse) Descriptor() ([]byte, []int) {
	return file_b2c_v2_proto_rawDescGZIP(), []int{8}
}

func (x *ListB2CPaymentsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListB2CPaymentsResponse) GetB2CPayments() []*B2CPayment {
	if x != nil {
		return x.B2CPayments
	}
	return nil
}

func (x *ListB2CPaymentsResponse) GetCollectionCount() int64 {
	if x != nil {
		return x.CollectionCount
	}
	return 0
}

type ProcessB2CPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId string `protobuf:"bytes,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	Processed bool   `protobuf:"varint,2,opt,name=processed,proto3" json:"processed,omitempty"`
}

func (x *ProcessB2CPaymentRequest) Reset() {
	*x = ProcessB2CPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_v2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessB2CPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessB2CPaymentRequest) ProtoMessage() {}

func (x *ProcessB2CPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_v2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessB2CPaymentRequest.ProtoReflect.Descriptor instead.
func (*ProcessB2CPaymentRequest) Descriptor() ([]byte, []int) {
	return file_b2c_v2_proto_rawDescGZIP(), []int{9}
}

func (x *ProcessB2CPaymentRequest) GetPaymentId() string {
	if x != nil {
		return x.PaymentId
	}
	return ""
}

func (x *ProcessB2CPaymentRequest) GetProcessed() bool {
	if x != nil {
		return x.Processed
	}
	return false
}

type PublishB2CPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishMessage *PublishMessage   `protobuf:"bytes,1,opt,name=publish_message,json=publishMessage,proto3" json:"publish_message,omitempty"`
	ProcessedState B2CProcessedState `protobuf:"varint,3,opt,name=processed_state,json=processedState,proto3,enum=gidyon.mpesa.b2c.B2CProcessedState" json:"processed_state,omitempty"`
}

func (x *PublishB2CPaymentRequest) Reset() {
	*x = PublishB2CPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_v2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishB2CPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishB2CPaymentRequest) ProtoMessage() {}

func (x *PublishB2CPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_v2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishB2CPaymentRequest.ProtoReflect.Descriptor instead.
func (*PublishB2CPaymentRequest) Descriptor() ([]byte, []int) {
	return file_b2c_v2_proto_rawDescGZIP(), []int{10}
}

func (x *PublishB2CPaymentRequest) GetPublishMessage() *PublishMessage {
	if x != nil {
		return x.PublishMessage
	}
	return nil
}

func (x *PublishB2CPaymentRequest) GetProcessedState() B2CProcessedState {
	if x != nil {
		return x.ProcessedState
	}
	return B2CProcessedState_B2C_PROCESS_STATE_UNSPECIFIED
}

type DailyStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatId                 string  `protobuf:"bytes,1,opt,name=stat_id,json=statId,proto3" json:"stat_id,omitempty"`
	Date                   string  `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	OrgShortCode           string  `protobuf:"bytes,3,opt,name=org_short_code,json=orgShortCode,proto3" json:"org_short_code,omitempty"`
	TotalTransactions      int32   `protobuf:"varint,4,opt,name=total_transactions,json=totalTransactions,proto3" json:"total_transactions,omitempty"`
	SuccessfulTransactions int64   `protobuf:"varint,5,opt,name=successful_transactions,json=successfulTransactions,proto3" json:"successful_transactions,omitempty"`
	FailedTransactions     int64   `protobuf:"varint,6,opt,name=failed_transactions,json=failedTransactions,proto3" json:"failed_transactions,omitempty"`
	TotalAmountTransacted  float32 `protobuf:"fixed32,7,opt,name=total_amount_transacted,json=totalAmountTransacted,proto3" json:"total_amount_transacted,omitempty"`
	TotalCharges           float32 `protobuf:"fixed32,8,opt,name=total_charges,json=totalCharges,proto3" json:"total_charges,omitempty"`
	CreateTimeSeconds      int64   `protobuf:"varint,9,opt,name=create_time_seconds,json=createTimeSeconds,proto3" json:"create_time_seconds,omitempty"`
	UpdateTimeSeconds      int64   `protobuf:"varint,10,opt,name=update_time_seconds,json=updateTimeSeconds,proto3" json:"update_time_seconds,omitempty"`
}

func (x *DailyStat) Reset() {
	*x = DailyStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_v2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyStat) ProtoMessage() {}

func (x *DailyStat) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_v2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyStat.ProtoReflect.Descriptor instead.
func (*DailyStat) Descriptor() ([]byte, []int) {
	return file_b2c_v2_proto_rawDescGZIP(), []int{11}
}

func (x *DailyStat) GetStatId() string {
	if x != nil {
		return x.StatId
	}
	return ""
}

func (x *DailyStat) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *DailyStat) GetOrgShortCode() string {
	if x != nil {
		return x.OrgShortCode
	}
	return ""
}

func (x *DailyStat) GetTotalTransactions() int32 {
	if x != nil {
		return x.TotalTransactions
	}
	return 0
}

func (x *DailyStat) GetSuccessfulTransactions() int64 {
	if x != nil {
		return x.SuccessfulTransactions
	}
	return 0
}

func (x *DailyStat) GetFailedTransactions() int64 {
	if x != nil {
		return x.FailedTransactions
	}
	return 0
}

func (x *DailyStat) GetTotalAmountTransacted() float32 {
	if x != nil {
		return x.TotalAmountTransacted
	}
	return 0
}

func (x *DailyStat) GetTotalCharges() float32 {
	if x != nil {
		return x.TotalCharges
	}
	return 0
}

func (x *DailyStat) GetCreateTimeSeconds() int64 {
	if x != nil {
		return x.CreateTimeSeconds
	}
	return 0
}

func (x *DailyStat) GetUpdateTimeSeconds() int64 {
	if x != nil {
		return x.UpdateTimeSeconds
	}
	return 0
}

type StatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats         []*DailyStat `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
	NextPageToken string       `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *StatsResponse) Reset() {
	*x = StatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_v2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsResponse) ProtoMessage() {}

func (x *StatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_v2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsResponse.ProtoReflect.Descriptor instead.
func (*StatsResponse) Descriptor() ([]byte, []int) {
	return file_b2c_v2_proto_rawDescGZIP(), []int{12}
}

func (x *StatsResponse) GetStats() []*DailyStat {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *StatsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListStatsFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationShortCodes []string `protobuf:"bytes,1,rep,name=organization_short_codes,json=organizationShortCodes,proto3" json:"organization_short_codes,omitempty"`
	StartTimeSeconds       int64    `protobuf:"varint,2,opt,name=start_time_seconds,json=startTimeSeconds,proto3" json:"start_time_seconds,omitempty"`
	EndTimeSeconds         int64    `protobuf:"varint,3,opt,name=end_time_seconds,json=endTimeSeconds,proto3" json:"end_time_seconds,omitempty"`
	TxDates                []string `protobuf:"bytes,4,rep,name=tx_dates,json=txDates,proto3" json:"tx_dates,omitempty"`
}

func (x *ListStatsFilter) Reset() {
	*x = ListStatsFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_v2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStatsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStatsFilter) ProtoMessage() {}

func (x *ListStatsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_v2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStatsFilter.ProtoReflect.Descriptor instead.
func (*ListStatsFilter) Descriptor() ([]byte, []int) {
	return file_b2c_v2_proto_rawDescGZIP(), []int{13}
}

func (x *ListStatsFilter) GetOrganizationShortCodes() []string {
	if x != nil {
		return x.OrganizationShortCodes
	}
	return nil
}

func (x *ListStatsFilter) GetStartTimeSeconds() int64 {
	if x != nil {
		return x.StartTimeSeconds
	}
	return 0
}

func (x *ListStatsFilter) GetEndTimeSeconds() int64 {
	if x != nil {
		return x.EndTimeSeconds
	}
	return 0
}

func (x *ListStatsFilter) GetTxDates() []string {
	if x != nil {
		return x.TxDates
	}
	return nil
}

type ListDailyStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageToken string           `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	PageSize  int32            `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Filter    *ListStatsFilter `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListDailyStatsRequest) Reset() {
	*x = ListDailyStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_v2_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDailyStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDailyStatsRequest) ProtoMessage() {}

func (x *ListDailyStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_v2_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDailyStatsRequest.ProtoReflect.Descriptor instead.
func (*ListDailyStatsRequest) Descriptor() ([]byte, []int) {
	return file_b2c_v2_proto_rawDescGZIP(), []int{14}
}

func (x *ListDailyStatsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListDailyStatsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDailyStatsRequest) GetFilter() *ListStatsFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type QueryTransactionStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentifierType     QueryTransactionStatusRequest_IdentifierType `protobuf:"varint,1,opt,name=identifier_type,json=identifierType,proto3,enum=gidyon.mpesa.b2c.QueryTransactionStatusRequest_IdentifierType" json:"identifier_type,omitempty"`
	PartyA             int64                                        `protobuf:"varint,3,opt,name=party_a,json=partyA,proto3" json:"party_a,omitempty"`
	Remarks            string                                       `protobuf:"bytes,4,opt,name=remarks,proto3" json:"remarks,omitempty"`
	Initiator          string                                       `protobuf:"bytes,5,opt,name=initiator,proto3" json:"initiator,omitempty"`
	SecurityCredential string                                       `protobuf:"bytes,6,opt,name=security_credential,json=securityCredential,proto3" json:"security_credential,omitempty"`
	QueueTimeoutUrl    string                                       `protobuf:"bytes,7,opt,name=queue_timeout_url,json=queueTimeoutUrl,proto3" json:"queue_timeout_url,omitempty"`
	ResultUrl          string                                       `protobuf:"bytes,8,opt,name=result_url,json=resultUrl,proto3" json:"result_url,omitempty"`
	TransactionId      string                                       `protobuf:"bytes,9,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Occassion          string                                       `protobuf:"bytes,10,opt,name=occassion,proto3" json:"occassion,omitempty"`
	Synchronous        bool                                         `protobuf:"varint,11,opt,name=synchronous,proto3" json:"synchronous,omitempty"`
}

func (x *QueryTransactionStatusRequest) Reset() {
	*x = QueryTransactionStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_v2_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTransactionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTransactionStatusRequest) ProtoMessage() {}

func (x *QueryTransactionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_v2_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTransactionStatusRequest.ProtoReflect.Descriptor instead.
func (*QueryTransactionStatusRequest) Descriptor() ([]byte, []int) {
	return file_b2c_v2_proto_rawDescGZIP(), []int{15}
}

func (x *QueryTransactionStatusRequest) GetIdentifierType() QueryTransactionStatusRequest_IdentifierType {
	if x != nil {
		return x.IdentifierType
	}
	return QueryTransactionStatusRequest_QUERY_TRANSACTION_UNSPECIFIED
}

func (x *QueryTransactionStatusRequest) GetPartyA() int64 {
	if x != nil {
		return x.PartyA
	}
	return 0
}

func (x *QueryTransactionStatusRequest) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *QueryTransactionStatusRequest) GetInitiator() string {
	if x != nil {
		return x.Initiator
	}
	return ""
}

func (x *QueryTransactionStatusRequest) GetSecurityCredential() string {
	if x != nil {
		return x.SecurityCredential
	}
	return ""
}

func (x *QueryTransactionStatusRequest) GetQueueTimeoutUrl() string {
	if x != nil {
		return x.QueueTimeoutUrl
	}
	return ""
}

func (x *QueryTransactionStatusRequest) GetResultUrl() string {
	if x != nil {
		return x.ResultUrl
	}
	return ""
}

func (x *QueryTransactionStatusRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *QueryTransactionStatusRequest) GetOccassion() string {
	if x != nil {
		return x.Occassion
	}
	return ""
}

func (x *QueryTransactionStatusRequest) GetSynchronous() bool {
	if x != nil {
		return x.Synchronous
	}
	return false
}

type QueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginatorConversionId string `protobuf:"bytes,1,opt,name=originator_conversion_id,json=originatorConversionId,proto3" json:"originator_conversion_id,omitempty"`
	ConversionId           string `protobuf:"bytes,2,opt,name=conversion_id,json=conversionId,proto3" json:"conversion_id,omitempty"`
	ResponseDescription    string `protobuf:"bytes,3,opt,name=response_description,json=responseDescription,proto3" json:"response_description,omitempty"`
	Success                bool   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_v2_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_v2_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_b2c_v2_proto_rawDescGZIP(), []int{16}
}

func (x *QueryResponse) GetOriginatorConversionId() string {
	if x != nil {
		return x.OriginatorConversionId
	}
	return ""
}

func (x *QueryResponse) GetConversionId() string {
	if x != nil {
		return x.ConversionId
	}
	return ""
}

func (x *QueryResponse) GetResponseDescription() string {
	if x != nil {
		return x.ResponseDescription
	}
	return ""
}

func (x *QueryResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type QueryAccountBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentifierType QueryAccountBalanceRequest_IdentifierType `protobuf:"varint,1,opt,name=identifier_type,json=identifierType,proto3,enum=gidyon.mpesa.b2c.QueryAccountBalanceRequest_IdentifierType" json:"identifier_type,omitempty"`
	PartyA         int64                                     `protobuf:"varint,2,opt,name=party_a,json=partyA,proto3" json:"party_a,omitempty"`
	Remarks        string                                    `protobuf:"bytes,3,opt,name=remarks,proto3" json:"remarks,omitempty"`
	InitiatorId    string                                    `protobuf:"bytes,4,opt,name=initiator_id,json=initiatorId,proto3" json:"initiator_id,omitempty"`
	RequestId      string                                    `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Synchronous    bool                                      `protobuf:"varint,6,opt,name=synchronous,proto3" json:"synchronous,omitempty"`
}

func (x *QueryAccountBalanceRequest) Reset() {
	*x = QueryAccountBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_v2_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAccountBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAccountBalanceRequest) ProtoMessage() {}

func (x *QueryAccountBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_v2_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAccountBalanceRequest.ProtoReflect.Descriptor instead.
func (*QueryAccountBalanceRequest) Descriptor() ([]byte, []int) {
	return file_b2c_v2_proto_rawDescGZIP(), []int{17}
}

func (x *QueryAccountBalanceRequest) GetIdentifierType() QueryAccountBalanceRequest_IdentifierType {
	if x != nil {
		return x.IdentifierType
	}
	return QueryAccountBalanceRequest_QUERY_ACCOUNT_UNSPECIFIED
}

func (x *QueryAccountBalanceRequest) GetPartyA() int64 {
	if x != nil {
		return x.PartyA
	}
	return 0
}

func (x *QueryAccountBalanceRequest) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *QueryAccountBalanceRequest) GetInitiatorId() string {
	if x != nil {
		return x.InitiatorId
	}
	return ""
}

func (x *QueryAccountBalanceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *QueryAccountBalanceRequest) GetSynchronous() bool {
	if x != nil {
		return x.Synchronous
	}
	return false
}

type QueryAccountBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party               int64   `protobuf:"varint,1,opt,name=party,proto3" json:"party,omitempty"`
	WorkingAccountFunds float32 `protobuf:"fixed32,2,opt,name=working_account_funds,json=workingAccountFunds,proto3" json:"working_account_funds,omitempty"`
	UtilityAccountFunds float32 `protobuf:"fixed32,3,opt,name=utility_account_funds,json=utilityAccountFunds,proto3" json:"utility_account_funds,omitempty"`
	ChargesPaidFunds    float32 `protobuf:"fixed32,4,opt,name=charges_paid_funds,json=chargesPaidFunds,proto3" json:"charges_paid_funds,omitempty"`
	RequestId           string  `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	InitiatorId         string  `protobuf:"bytes,6,opt,name=initiator_id,json=initiatorId,proto3" json:"initiator_id,omitempty"`
	Completed           bool    `protobuf:"varint,7,opt,name=completed,proto3" json:"completed,omitempty"`
}

func (x *QueryAccountBalanceResponse) Reset() {
	*x = QueryAccountBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_v2_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAccountBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAccountBalanceResponse) ProtoMessage() {}

func (x *QueryAccountBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_v2_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAccountBalanceResponse.ProtoReflect.Descriptor instead.
func (*QueryAccountBalanceResponse) Descriptor() ([]byte, []int) {
	return file_b2c_v2_proto_rawDescGZIP(), []int{18}
}

func (x *QueryAccountBalanceResponse) GetParty() int64 {
	if x != nil {
		return x.Party
	}
	return 0
}

func (x *QueryAccountBalanceResponse) GetWorkingAccountFunds() float32 {
	if x != nil {
		return x.WorkingAccountFunds
	}
	return 0
}

func (x *QueryAccountBalanceResponse) GetUtilityAccountFunds() float32 {
	if x != nil {
		return x.UtilityAccountFunds
	}
	return 0
}

func (x *QueryAccountBalanceResponse) GetChargesPaidFunds() float32 {
	if x != nil {
		return x.ChargesPaidFunds
	}
	return 0
}

func (x *QueryAccountBalanceResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *QueryAccountBalanceResponse) GetInitiatorId() string {
	if x != nil {
		return x.InitiatorId
	}
	return ""
}

func (x *QueryAccountBalanceResponse) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

type ReverseTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiverType  int64  `protobuf:"varint,1,opt,name=receiver_type,json=receiverType,proto3" json:"receiver_type,omitempty"`
	ShortCode     int32  `protobuf:"varint,2,opt,name=short_code,json=shortCode,proto3" json:"short_code,omitempty"`
	Remarks       string `protobuf:"bytes,3,opt,name=remarks,proto3" json:"remarks,omitempty"`
	TransactionId string `protobuf:"bytes,4,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Occassion     string `protobuf:"bytes,5,opt,name=occassion,proto3" json:"occassion,omitempty"`
	RequestId     string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	InitiatorId   string `protobuf:"bytes,7,opt,name=initiator_id,json=initiatorId,proto3" json:"initiator_id,omitempty"`
	Synchronous   bool   `protobuf:"varint,8,opt,name=synchronous,proto3" json:"synchronous,omitempty"`
}

func (x *ReverseTransactionRequest) Reset() {
	*x = ReverseTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_v2_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReverseTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReverseTransactionRequest) ProtoMessage() {}

func (x *ReverseTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_v2_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReverseTransactionRequest.ProtoReflect.Descriptor instead.
func (*ReverseTransactionRequest) Descriptor() ([]byte, []int) {
	return file_b2c_v2_proto_rawDescGZIP(), []int{19}
}

func (x *ReverseTransactionRequest) GetReceiverType() int64 {
	if x != nil {
		return x.ReceiverType
	}
	return 0
}

func (x *ReverseTransactionRequest) GetShortCode() int32 {
	if x != nil {
		return x.ShortCode
	}
	return 0
}

func (x *ReverseTransactionRequest) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *ReverseTransactionRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *ReverseTransactionRequest) GetOccassion() string {
	if x != nil {
		return x.Occassion
	}
	return ""
}

func (x *ReverseTransactionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ReverseTransactionRequest) GetInitiatorId() string {
	if x != nil {
		return x.InitiatorId
	}
	return ""
}

func (x *ReverseTransactionRequest) GetSynchronous() bool {
	if x != nil {
		return x.Synchronous
	}
	return false
}

var File_b2c_v2_proto protoreflect.FileDescriptor

var file_b2c_v2_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x62, 0x32, 0x63, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x62, 0x32, 0x63,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65,
	0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfd, 0x04, 0x0a, 0x14,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x1f,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x1c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x12, 0x1b, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x21, 0x0a,
	0x09, 0x6f, 0x63, 0x63, 0x61, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x6f, 0x63, 0x63, 0x61, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70,
	0x65, 0x73, 0x61, 0x2e, 0x62, 0x32, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49,
	0x64, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x46, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x62,
	0x32, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x3b,
	0x92, 0x41, 0x38, 0x0a, 0x36, 0x2a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46,
	0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x20, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x20, 0x62, 0x32, 0x63, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x15,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x42, 0x92, 0x41, 0x3f,
	0x0a, 0x3d, 0x2a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x24, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xc9, 0x02, 0x0a, 0x0e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6d, 0x70, 0x65, 0x73, 0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x12, 0x40, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x62, 0x32, 0x63, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x64, 0x79,
	0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x62, 0x32, 0x63, 0x2e, 0x42, 0x32, 0x43,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x3a, 0x39, 0x92, 0x41, 0x36, 0x0a, 0x34, 0x2a, 0x0e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x22, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x20, 0x73, 0x74, 0x6b, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x74,
	0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x0b,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x6f,
	0x6e, 0x6c, 0x79, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x6e, 0x6c, 0x79, 0x4f, 0x6e, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e,
	0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x62, 0x32, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x3a, 0x0a, 0x0c,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbd, 0x0a, 0x0a, 0x0a, 0x42, 0x32, 0x43,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x46, 0x0a, 0x1f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x1c, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x5f, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f,
	0x72, 0x67, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x62,
	0x32, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x38, 0x0a, 0x18, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x62, 0x32,
	0x63, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x32,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x32, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x62, 0x32, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x62, 0x32, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x62, 0x32, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x32, 0x63, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x62, 0x32, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b,
	0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d,
	0x70, 0x65, 0x73, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x74, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x6e, 0x66, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6f, 0x6e, 0x66, 0x6f, 0x6e,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x62, 0x32,
	0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x62, 0x32,
	0x63, 0x2e, 0x42, 0x32, 0x43, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x62, 0x32, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x15,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x3a, 0x24, 0x92, 0x41, 0x21, 0x0a, 0x1f, 0x2a, 0x0a, 0x42, 0x32, 0x43, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x11, 0x4d, 0x70, 0x65, 0x73, 0x61, 0x20, 0x42, 0x32, 0x43,
	0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa7, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6d, 0x70, 0x65, 0x73,
	0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4d, 0x70,
	0x65, 0x73, 0x61, 0x49, 0x64, 0x3a, 0x4b, 0x92, 0x41, 0x48, 0x0a, 0x46, 0x2a, 0x14, 0x47, 0x65,
	0x74, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x21, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x61, 0x20, 0x62, 0x32, 0x63, 0x20, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0xd2, 0x01, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x22, 0x9d, 0x05, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x32, 0x43, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x1d, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x1b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x48,
	0x0a, 0x20, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x62, 0x32, 0x63,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x62,
	0x32, 0x63, 0x2e, 0x42, 0x32, 0x43, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x62, 0x32,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e,
	0x62, 0x32, 0x63, 0x2e, 0x42, 0x32, 0x43, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x40, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e,
	0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x62, 0x32, 0x63, 0x2e, 0x42, 0x32, 0x43, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x3a, 0x3d, 0x92, 0x41, 0x3a, 0x0a, 0x38, 0x2a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x32, 0x20, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x62, 0x32, 0x63, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x32, 0x43, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x69, 0x64, 0x79,
	0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x62, 0x32, 0x63, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x4f, 0x92, 0x41, 0x4c, 0x0a, 0x4a,
	0x2a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x30, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x61, 0x20,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x32,
	0x63, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xfe, 0x01, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3f,
	0x0a, 0x0c, 0x62, 0x32, 0x63, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70,
	0x65, 0x73, 0x61, 0x2e, 0x62, 0x32, 0x63, 0x2e, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0b, 0x62, 0x32, 0x63, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x4f, 0x92, 0x41, 0x4c, 0x0a,
	0x4a, 0x2a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x2f, 0x52, 0x65, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x61,
	0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x62,
	0x32, 0x63, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x18,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x3a, 0x4e, 0x92, 0x41, 0x4b, 0x0a,
	0x49, 0x2a, 0x18, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x2d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x62,
	0x32, 0x63, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x18, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e,
	0x62, 0x32, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e,
	0x62, 0x32, 0x63, 0x2e, 0x42, 0x32, 0x43, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x41, 0x92, 0x41, 0x3e, 0x0a, 0x3c, 0x2a, 0x18, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x74, 0x6f, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x20, 0x61, 0x20, 0x62, 0x32, 0x63,
	0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xed, 0x03, 0x0a, 0x09, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x17, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x3a,
	0x37, 0x92, 0x41, 0x34, 0x0a, 0x32, 0x2a, 0x09, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x32, 0x25, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x61, 0x20, 0x64, 0x61, 0x79, 0x20, 0x62, 0x32, 0x63, 0x20, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x64, 0x79,
	0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x62, 0x32, 0x63, 0x2e, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x3d, 0x92, 0x41, 0x3a, 0x0a, 0x38, 0x2a, 0x0d, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x27, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x22, 0xfe, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x18, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x78,
	0x44, 0x61, 0x74, 0x65, 0x73, 0x3a, 0x3e, 0x92, 0x41, 0x3b, 0x0a, 0x39, 0x2a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x32, 0x26, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x69,
	0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x62, 0x32, 0x63, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x37, 0x92, 0x41, 0x34, 0x0a, 0x32, 0x2a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32,
	0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22,
	0x8a, 0x05, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x6c, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x67, 0x69, 0x64,
	0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x62, 0x32, 0x63, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x79, 0x41, 0x12, 0x1d, 0x0a,
	0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x21, 0x0a, 0x09,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x2f, 0x0a, 0x13, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x2a, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x63, 0x63, 0x61, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x63, 0x63, 0x61, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f,
	0x75, 0x73, 0x22, 0x6d, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x53, 0x49, 0x53, 0x44,
	0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x49, 0x4c, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10,
	0x03, 0x3a, 0x49, 0x92, 0x41, 0x46, 0x0a, 0x44, 0x2a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x23, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x74, 0x6f, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe7, 0x01, 0x0a,
	0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38,
	0x0a, 0x18, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a,
	0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x3a, 0x2a, 0x92, 0x41, 0x27, 0x0a,
	0x25, 0x2a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x14, 0x4d, 0x70, 0x65, 0x73, 0x61, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe1, 0x03, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b,
	0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x62, 0x32,
	0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x79, 0x41, 0x12, 0x1d,
	0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x26, 0x0a,
	0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e,
	0x6f, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x22, 0x69, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x53, 0x49, 0x53, 0x44,
	0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x49, 0x4c, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10,
	0x04, 0x3a, 0x47, 0x92, 0x41, 0x44, 0x0a, 0x42, 0x2a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x32, 0x24, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f,
	0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x20, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xf7, 0x02, 0x0a, 0x1b, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x12, 0x32, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x13, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x13, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x50, 0x61, 0x69,
	0x64, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x3a, 0x4c, 0x92, 0x41, 0x49, 0x0a, 0x47, 0x2a, 0x1b, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x28, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x20,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x83, 0x03, 0x0a, 0x19, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0a,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12,
	0x2a, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f,
	0x63, 0x63, 0x61, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x63, 0x63, 0x61, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f,
	0x75, 0x73, 0x3a, 0x46, 0x92, 0x41, 0x43, 0x0a, 0x41, 0x2a, 0x19, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x32, 0x24, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f,
	0x20, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x20, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x20, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x67, 0x0a, 0x09, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x4d, 0x41,
	0x4e, 0x44, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x41, 0x4c, 0x41, 0x52, 0x59, 0x5f, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45,
	0x53, 0x53, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x03, 0x2a, 0x76, 0x0a, 0x09, 0x42, 0x32, 0x43, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x12, 0x42, 0x32, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x32, 0x43, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x42, 0x32, 0x43, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x32,
	0x43, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x42,
	0x32, 0x43, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x63, 0x0a, 0x0d, 0x42,
	0x32, 0x43, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x1b,
	0x42, 0x32, 0x43, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x42, 0x32, 0x43, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10,
	0x01, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x32, 0x43, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x02,
	0x2a, 0x60, 0x0a, 0x11, 0x42, 0x32, 0x43, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x32, 0x43, 0x5f, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x32, 0x43, 0x5f,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x42,
	0x32, 0x43, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44,
	0x10, 0x02, 0x32, 0x96, 0x0a, 0x0a, 0x05, 0x42, 0x32, 0x43, 0x56, 0x32, 0x12, 0x8d, 0x01, 0x0a,
	0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x26,
	0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x62, 0x32,
	0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e,
	0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x62, 0x32, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x62, 0x32, 0x63, 0x3a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x7e, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x2e,
	0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x62, 0x32, 0x63,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d,
	0x70, 0x65, 0x73, 0x61, 0x2e, 0x62, 0x32, 0x63, 0x2e, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x32,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x62, 0x32, 0x63, 0x2f,
	0x7b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x82, 0x01, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x28, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e,
	0x62, 0x32, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x67, 0x69, 0x64,
	0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x62, 0x32, 0x63, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f,
	0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x62, 0x32,
	0x63, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x32, 0x43,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e,
	0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x62, 0x32, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65,
	0x73, 0x74, 0x78, 0x2f, 0x62, 0x32, 0x63, 0x3a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42,
	0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x88, 0x01, 0x0a,
	0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73,
	0x61, 0x2e, 0x62, 0x32, 0x63, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x42, 0x32, 0x43,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x24,
	0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x62,
	0x32, 0x63, 0x3a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x88, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x67, 0x69, 0x64,
	0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x62, 0x32, 0x63, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65,
	0x73, 0x61, 0x2e, 0x62, 0x32, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f, 0x76,
	0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x62, 0x32, 0x63,
	0x3a, 0x6c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0xa0, 0x01, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x2e,
	0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x62, 0x32, 0x63,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x62, 0x32,
	0x63, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x62, 0x32, 0x63, 0x3a, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xa5, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x2e,
	0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x62, 0x32, 0x63,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x67, 0x69,
	0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x62, 0x32, 0x63, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x22, 0x26, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73,
	0x74, 0x78, 0x2f, 0x62, 0x32, 0x63, 0x3a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x8b, 0x01,
	0x0a, 0x12, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70,
	0x65, 0x73, 0x61, 0x2e, 0x62, 0x32, 0x63, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2a, 0x22, 0x25, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74,
	0x78, 0x2f, 0x62, 0x32, 0x63, 0x3a, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x42, 0xda, 0x03, 0x5a, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x64, 0x79, 0x6f,
	0x6e, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x32, 0x63, 0x2f, 0x76, 0x32, 0x92, 0x41,
	0xa6, 0x03, 0x12, 0x92, 0x02, 0x0a, 0x11, 0x42, 0x32, 0x43, 0x20, 0x4d, 0x70, 0x65, 0x73, 0x61,
	0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x26, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x42, 0x32, 0x43, 0x20, 0x4d, 0x70, 0x65, 0x73, 0x61, 0x20, 0x41, 0x50, 0x49,
	0x22, 0x77, 0x0a, 0x15, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x20, 0x3c, 0x47, 0x69, 0x64, 0x65,
	0x6f, 0x6e, 0x20, 0x4b, 0x61, 0x6d, 0x61, 0x75, 0x3e, 0x12, 0x47, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x69,
	0x64, 0x79, 0x6f, 0x6e, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x32, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x15, 0x67, 0x69, 0x64, 0x65, 0x6f, 0x6e, 0x68, 0x61, 0x63, 0x65, 0x72, 0x40,
	0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2a, 0x58, 0x0a, 0x1a, 0x47, 0x4e, 0x55,
	0x20, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x20,
	0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x12, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x64, 0x79,
	0x6f, 0x6e, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x4c, 0x49, 0x43, 0x45,
	0x4e, 0x53, 0x45, 0x32, 0x02, 0x76, 0x32, 0x2a, 0x02, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a,
	0x59, 0x0a, 0x57, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x4d, 0x08, 0x02, 0x12,
	0x38, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x64, 0x20,
	0x62, 0x79, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x3a, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65,
	0x72, 0x20, 0x3c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3e, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x62, 0x0c, 0x0a, 0x0a, 0x0a, 0x06,
	0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_b2c_v2_proto_rawDescOnce sync.Once
	file_b2c_v2_proto_rawDescData = file_b2c_v2_proto_rawDesc
)

func file_b2c_v2_proto_rawDescGZIP() []byte {
	file_b2c_v2_proto_rawDescOnce.Do(func() {
		file_b2c_v2_proto_rawDescData = protoimpl.X.CompressGZIP(file_b2c_v2_proto_rawDescData)
	})
	return file_b2c_v2_proto_rawDescData
}

var file_b2c_v2_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_b2c_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_b2c_v2_proto_goTypes = []interface{}{
	(CommandId)(0),         // 0: gidyon.mpesa.b2c.CommandId
	(B2CStatus)(0),         // 1: gidyon.mpesa.b2c.B2CStatus
	(B2COrderField)(0),     // 2: gidyon.mpesa.b2c.B2COrderField
	(B2CProcessedState)(0), // 3: gidyon.mpesa.b2c.B2CProcessedState
	(QueryTransactionStatusRequest_IdentifierType)(0), // 4: gidyon.mpesa.b2c.QueryTransactionStatusRequest.IdentifierType
	(QueryAccountBalanceRequest_IdentifierType)(0),    // 5: gidyon.mpesa.b2c.QueryAccountBalanceRequest.IdentifierType
	(*TransferFundsRequest)(nil),                      // 6: gidyon.mpesa.b2c.TransferFundsRequest
	(*TransferFundsResponse)(nil),                     // 7: gidyon.mpesa.b2c.TransferFundsResponse
	(*PublishMessage)(nil),                            // 8: gidyon.mpesa.b2c.PublishMessage
	(*PublishInfo)(nil),                               // 9: gidyon.mpesa.b2c.PublishInfo
	(*B2CPayment)(nil),                                // 10: gidyon.mpesa.b2c.B2CPayment
	(*GetB2CPaymentRequest)(nil),                      // 11: gidyon.mpesa.b2c.GetB2CPaymentRequest
	(*ListB2CPaymentFilter)(nil),                      // 12: gidyon.mpesa.b2c.ListB2CPaymentFilter
	(*ListB2CPaymentsRequest)(nil),                    // 13: gidyon.mpesa.b2c.ListB2CPaymentsRequest
	(*ListB2CPaymentsResponse)(nil),                   // 14: gidyon.mpesa.b2c.ListB2CPaymentsResponse
	(*ProcessB2CPaymentRequest)(nil),                  // 15: gidyon.mpesa.b2c.ProcessB2CPaymentRequest
	(*PublishB2CPaymentRequest)(nil),                  // 16: gidyon.mpesa.b2c.PublishB2CPaymentRequest
	(*DailyStat)(nil),                                 // 17: gidyon.mpesa.b2c.DailyStat
	(*StatsResponse)(nil),                             // 18: gidyon.mpesa.b2c.StatsResponse
	(*ListStatsFilter)(nil),                           // 19: gidyon.mpesa.b2c.ListStatsFilter
	(*ListDailyStatsRequest)(nil),                     // 20: gidyon.mpesa.b2c.ListDailyStatsRequest
	(*QueryTransactionStatusRequest)(nil),             // 21: gidyon.mpesa.b2c.QueryTransactionStatusRequest
	(*QueryResponse)(nil),                             // 22: gidyon.mpesa.b2c.QueryResponse
	(*QueryAccountBalanceRequest)(nil),                // 23: gidyon.mpesa.b2c.QueryAccountBalanceRequest
	(*QueryAccountBalanceResponse)(nil),               // 24: gidyon.mpesa.b2c.QueryAccountBalanceResponse
	(*ReverseTransactionRequest)(nil),                 // 25: gidyon.mpesa.b2c.ReverseTransactionRequest
	nil,                                               // 26: gidyon.mpesa.b2c.PublishInfo.PayloadEntry
	(*emptypb.Empty)(nil),                             // 27: google.protobuf.Empty
}
var file_b2c_v2_proto_depIdxs = []int32{
	0,  // 0: gidyon.mpesa.b2c.TransferFundsRequest.command_id:type_name -> gidyon.mpesa.b2c.CommandId
	9,  // 1: gidyon.mpesa.b2c.TransferFundsRequest.publish_message:type_name -> gidyon.mpesa.b2c.PublishInfo
	9,  // 2: gidyon.mpesa.b2c.PublishMessage.publish_info:type_name -> gidyon.mpesa.b2c.PublishInfo
	10, // 3: gidyon.mpesa.b2c.PublishMessage.payment:type_name -> gidyon.mpesa.b2c.B2CPayment
	26, // 4: gidyon.mpesa.b2c.PublishInfo.payload:type_name -> gidyon.mpesa.b2c.PublishInfo.PayloadEntry
	0,  // 5: gidyon.mpesa.b2c.B2CPayment.command_id:type_name -> gidyon.mpesa.b2c.CommandId
	1,  // 6: gidyon.mpesa.b2c.B2CPayment.b2c_status:type_name -> gidyon.mpesa.b2c.B2CStatus
	1,  // 7: gidyon.mpesa.b2c.ListB2CPaymentFilter.b2c_statuses:type_name -> gidyon.mpesa.b2c.B2CStatus
	3,  // 8: gidyon.mpesa.b2c.ListB2CPaymentFilter.process_state:type_name -> gidyon.mpesa.b2c.B2CProcessedState
	2,  // 9: gidyon.mpesa.b2c.ListB2CPaymentFilter.order_field:type_name -> gidyon.mpesa.b2c.B2COrderField
	12, // 10: gidyon.mpesa.b2c.ListB2CPaymentsRequest.filter:type_name -> gidyon.mpesa.b2c.ListB2CPaymentFilter
	10, // 11: gidyon.mpesa.b2c.ListB2CPaymentsResponse.b2c_payments:type_name -> gidyon.mpesa.b2c.B2CPayment
	8,  // 12: gidyon.mpesa.b2c.PublishB2CPaymentRequest.publish_message:type_name -> gidyon.mpesa.b2c.PublishMessage
	3,  // 13: gidyon.mpesa.b2c.PublishB2CPaymentRequest.processed_state:type_name -> gidyon.mpesa.b2c.B2CProcessedState
	17, // 14: gidyon.mpesa.b2c.StatsResponse.stats:type_name -> gidyon.mpesa.b2c.DailyStat
	19, // 15: gidyon.mpesa.b2c.ListDailyStatsRequest.filter:type_name -> gidyon.mpesa.b2c.ListStatsFilter
	4,  // 16: gidyon.mpesa.b2c.QueryTransactionStatusRequest.identifier_type:type_name -> gidyon.mpesa.b2c.QueryTransactionStatusRequest.IdentifierType
	5,  // 17: gidyon.mpesa.b2c.QueryAccountBalanceRequest.identifier_type:type_name -> gidyon.mpesa.b2c.QueryAccountBalanceRequest.IdentifierType
	6,  // 18: gidyon.mpesa.b2c.B2CV2.TransferFunds:input_type -> gidyon.mpesa.b2c.TransferFundsRequest
	11, // 19: gidyon.mpesa.b2c.B2CV2.GetB2CPayment:input_type -> gidyon.mpesa.b2c.GetB2CPaymentRequest
	13, // 20: gidyon.mpesa.b2c.B2CV2.ListB2CPayments:input_type -> gidyon.mpesa.b2c.ListB2CPaymentsRequest
	15, // 21: gidyon.mpesa.b2c.B2CV2.ProcessB2CPayment:input_type -> gidyon.mpesa.b2c.ProcessB2CPaymentRequest
	16, // 22: gidyon.mpesa.b2c.B2CV2.PublishB2CPayment:input_type -> gidyon.mpesa.b2c.PublishB2CPaymentRequest
	20, // 23: gidyon.mpesa.b2c.B2CV2.ListDailyStats:input_type -> gidyon.mpesa.b2c.ListDailyStatsRequest
	21, // 24: gidyon.mpesa.b2c.B2CV2.QueryTransactionStatus:input_type -> gidyon.mpesa.b2c.QueryTransactionStatusRequest
	23, // 25: gidyon.mpesa.b2c.B2CV2.QueryAccountBalance:input_type -> gidyon.mpesa.b2c.QueryAccountBalanceRequest
	25, // 26: gidyon.mpesa.b2c.B2CV2.ReverseTransaction:input_type -> gidyon.mpesa.b2c.ReverseTransactionRequest
	7,  // 27: gidyon.mpesa.b2c.B2CV2.TransferFunds:output_type -> gidyon.mpesa.b2c.TransferFundsResponse
	10, // 28: gidyon.mpesa.b2c.B2CV2.GetB2CPayment:output_type -> gidyon.mpesa.b2c.B2CPayment
	14, // 29: gidyon.mpesa.b2c.B2CV2.ListB2CPayments:output_type -> gidyon.mpesa.b2c.ListB2CPaymentsResponse
	27, // 30: gidyon.mpesa.b2c.B2CV2.ProcessB2CPayment:output_type -> google.protobuf.Empty
	27, // 31: gidyon.mpesa.b2c.B2CV2.PublishB2CPayment:output_type -> google.protobuf.Empty
	18, // 32: gidyon.mpesa.b2c.B2CV2.ListDailyStats:output_type -> gidyon.mpesa.b2c.StatsResponse
	22, // 33: gidyon.mpesa.b2c.B2CV2.QueryTransactionStatus:output_type -> gidyon.mpesa.b2c.QueryResponse
	24, // 34: gidyon.mpesa.b2c.B2CV2.QueryAccountBalance:output_type -> gidyon.mpesa.b2c.QueryAccountBalanceResponse
	27, // 35: gidyon.mpesa.b2c.B2CV2.ReverseTransaction:output_type -> google.protobuf.Empty
	27, // [27:36] is the sub-list for method output_type
	18, // [18:27] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_b2c_v2_proto_init() }
func file_b2c_v2_proto_init() {
	if File_b2c_v2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_b2c_v2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferFundsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_v2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferFundsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_v2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_v2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_v2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*B2CPayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_v2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetB2CPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_v2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListB2CPaymentFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_v2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListB2CPaymentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_v2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListB2CPaymentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_v2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessB2CPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_v2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishB2CPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_v2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_v2_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_v2_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStatsFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_v2_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDailyStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_v2_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTransactionStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_v2_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_v2_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAccountBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_v2_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAccountBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_v2_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReverseTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_b2c_v2_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_b2c_v2_proto_goTypes,
		DependencyIndexes: file_b2c_v2_proto_depIdxs,
		EnumInfos:         file_b2c_v2_proto_enumTypes,
		MessageInfos:      file_b2c_v2_proto_msgTypes,
	}.Build()
	File_b2c_v2_proto = out.File
	file_b2c_v2_proto_rawDesc = nil
	file_b2c_v2_proto_goTypes = nil
	file_b2c_v2_proto_depIdxs = nil
}
