// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: b2c.proto

package b2c

import (
	mpesapayment "github.com/gidyon/mpesapayments/pkg/api/mpesapayment"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type QueryTransactionStatusRequest_IdentifierType int32

const (
	QueryTransactionStatusRequest_QUERY_TRANSACTION_UNSPECIFIED QueryTransactionStatusRequest_IdentifierType = 0
	QueryTransactionStatusRequest_MSISDN                        QueryTransactionStatusRequest_IdentifierType = 1
	QueryTransactionStatusRequest_TILL_NUMBER                   QueryTransactionStatusRequest_IdentifierType = 2
	QueryTransactionStatusRequest_ORGANIZATION_SHORT_CODE       QueryTransactionStatusRequest_IdentifierType = 3
)

// Enum value maps for QueryTransactionStatusRequest_IdentifierType.
var (
	QueryTransactionStatusRequest_IdentifierType_name = map[int32]string{
		0: "QUERY_TRANSACTION_UNSPECIFIED",
		1: "MSISDN",
		2: "TILL_NUMBER",
		3: "ORGANIZATION_SHORT_CODE",
	}
	QueryTransactionStatusRequest_IdentifierType_value = map[string]int32{
		"QUERY_TRANSACTION_UNSPECIFIED": 0,
		"MSISDN":                        1,
		"TILL_NUMBER":                   2,
		"ORGANIZATION_SHORT_CODE":       3,
	}
)

func (x QueryTransactionStatusRequest_IdentifierType) Enum() *QueryTransactionStatusRequest_IdentifierType {
	p := new(QueryTransactionStatusRequest_IdentifierType)
	*p = x
	return p
}

func (x QueryTransactionStatusRequest_IdentifierType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryTransactionStatusRequest_IdentifierType) Descriptor() protoreflect.EnumDescriptor {
	return file_b2c_proto_enumTypes[0].Descriptor()
}

func (QueryTransactionStatusRequest_IdentifierType) Type() protoreflect.EnumType {
	return &file_b2c_proto_enumTypes[0]
}

func (x QueryTransactionStatusRequest_IdentifierType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryTransactionStatusRequest_IdentifierType.Descriptor instead.
func (QueryTransactionStatusRequest_IdentifierType) EnumDescriptor() ([]byte, []int) {
	return file_b2c_proto_rawDescGZIP(), []int{0, 0}
}

type QueryAccountBalanceRequest_IdentifierType int32

const (
	QueryAccountBalanceRequest_QUERY_ACCOUNT_UNSPECIFIED QueryAccountBalanceRequest_IdentifierType = 0
	QueryAccountBalanceRequest_MSISDN                    QueryAccountBalanceRequest_IdentifierType = 1
	QueryAccountBalanceRequest_TILL_NUMBER               QueryAccountBalanceRequest_IdentifierType = 2
	QueryAccountBalanceRequest_ORGANIZATION_SHORT_CODE   QueryAccountBalanceRequest_IdentifierType = 3
)

// Enum value maps for QueryAccountBalanceRequest_IdentifierType.
var (
	QueryAccountBalanceRequest_IdentifierType_name = map[int32]string{
		0: "QUERY_ACCOUNT_UNSPECIFIED",
		1: "MSISDN",
		2: "TILL_NUMBER",
		3: "ORGANIZATION_SHORT_CODE",
	}
	QueryAccountBalanceRequest_IdentifierType_value = map[string]int32{
		"QUERY_ACCOUNT_UNSPECIFIED": 0,
		"MSISDN":                    1,
		"TILL_NUMBER":               2,
		"ORGANIZATION_SHORT_CODE":   3,
	}
)

func (x QueryAccountBalanceRequest_IdentifierType) Enum() *QueryAccountBalanceRequest_IdentifierType {
	p := new(QueryAccountBalanceRequest_IdentifierType)
	*p = x
	return p
}

func (x QueryAccountBalanceRequest_IdentifierType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryAccountBalanceRequest_IdentifierType) Descriptor() protoreflect.EnumDescriptor {
	return file_b2c_proto_enumTypes[1].Descriptor()
}

func (QueryAccountBalanceRequest_IdentifierType) Type() protoreflect.EnumType {
	return &file_b2c_proto_enumTypes[1]
}

func (x QueryAccountBalanceRequest_IdentifierType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryAccountBalanceRequest_IdentifierType.Descriptor instead.
func (QueryAccountBalanceRequest_IdentifierType) EnumDescriptor() ([]byte, []int) {
	return file_b2c_proto_rawDescGZIP(), []int{1, 0}
}

type TransferFundsRequest_CommandId int32

const (
	TransferFundsRequest_COMMANDID_UNSPECIFIED TransferFundsRequest_CommandId = 0
	TransferFundsRequest_SALARY_PAYMENT        TransferFundsRequest_CommandId = 1
	TransferFundsRequest_BUSINESS_PAYMENT      TransferFundsRequest_CommandId = 2
	TransferFundsRequest_PROMOTION_PAYMENT     TransferFundsRequest_CommandId = 3
)

// Enum value maps for TransferFundsRequest_CommandId.
var (
	TransferFundsRequest_CommandId_name = map[int32]string{
		0: "COMMANDID_UNSPECIFIED",
		1: "SALARY_PAYMENT",
		2: "BUSINESS_PAYMENT",
		3: "PROMOTION_PAYMENT",
	}
	TransferFundsRequest_CommandId_value = map[string]int32{
		"COMMANDID_UNSPECIFIED": 0,
		"SALARY_PAYMENT":        1,
		"BUSINESS_PAYMENT":      2,
		"PROMOTION_PAYMENT":     3,
	}
)

func (x TransferFundsRequest_CommandId) Enum() *TransferFundsRequest_CommandId {
	p := new(TransferFundsRequest_CommandId)
	*p = x
	return p
}

func (x TransferFundsRequest_CommandId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferFundsRequest_CommandId) Descriptor() protoreflect.EnumDescriptor {
	return file_b2c_proto_enumTypes[2].Descriptor()
}

func (TransferFundsRequest_CommandId) Type() protoreflect.EnumType {
	return &file_b2c_proto_enumTypes[2]
}

func (x TransferFundsRequest_CommandId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferFundsRequest_CommandId.Descriptor instead.
func (TransferFundsRequest_CommandId) EnumDescriptor() ([]byte, []int) {
	return file_b2c_proto_rawDescGZIP(), []int{3, 0}
}

type QueryTransactionStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentifierType     QueryTransactionStatusRequest_IdentifierType `protobuf:"varint,1,opt,name=identifier_type,json=identifierType,proto3,enum=gidyon.mpesa.QueryTransactionStatusRequest_IdentifierType" json:"identifier_type,omitempty"`
	PartyA             int32                                        `protobuf:"varint,3,opt,name=party_a,json=partyA,proto3" json:"party_a,omitempty"`
	Remarks            string                                       `protobuf:"bytes,4,opt,name=remarks,proto3" json:"remarks,omitempty"`
	Initiator          string                                       `protobuf:"bytes,5,opt,name=initiator,proto3" json:"initiator,omitempty"`
	SecurityCredential string                                       `protobuf:"bytes,6,opt,name=security_credential,json=securityCredential,proto3" json:"security_credential,omitempty"`
	QueueTimeoutUrl    string                                       `protobuf:"bytes,7,opt,name=queue_timeout_url,json=queueTimeoutUrl,proto3" json:"queue_timeout_url,omitempty"`
	ResultUrl          string                                       `protobuf:"bytes,8,opt,name=result_url,json=resultUrl,proto3" json:"result_url,omitempty"`
	TransactionId      string                                       `protobuf:"bytes,9,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Occassion          string                                       `protobuf:"bytes,10,opt,name=occassion,proto3" json:"occassion,omitempty"`
}

func (x *QueryTransactionStatusRequest) Reset() {
	*x = QueryTransactionStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTransactionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTransactionStatusRequest) ProtoMessage() {}

func (x *QueryTransactionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTransactionStatusRequest.ProtoReflect.Descriptor instead.
func (*QueryTransactionStatusRequest) Descriptor() ([]byte, []int) {
	return file_b2c_proto_rawDescGZIP(), []int{0}
}

func (x *QueryTransactionStatusRequest) GetIdentifierType() QueryTransactionStatusRequest_IdentifierType {
	if x != nil {
		return x.IdentifierType
	}
	return QueryTransactionStatusRequest_QUERY_TRANSACTION_UNSPECIFIED
}

func (x *QueryTransactionStatusRequest) GetPartyA() int32 {
	if x != nil {
		return x.PartyA
	}
	return 0
}

func (x *QueryTransactionStatusRequest) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *QueryTransactionStatusRequest) GetInitiator() string {
	if x != nil {
		return x.Initiator
	}
	return ""
}

func (x *QueryTransactionStatusRequest) GetSecurityCredential() string {
	if x != nil {
		return x.SecurityCredential
	}
	return ""
}

func (x *QueryTransactionStatusRequest) GetQueueTimeoutUrl() string {
	if x != nil {
		return x.QueueTimeoutUrl
	}
	return ""
}

func (x *QueryTransactionStatusRequest) GetResultUrl() string {
	if x != nil {
		return x.ResultUrl
	}
	return ""
}

func (x *QueryTransactionStatusRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *QueryTransactionStatusRequest) GetOccassion() string {
	if x != nil {
		return x.Occassion
	}
	return ""
}

type QueryAccountBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentifierType QueryAccountBalanceRequest_IdentifierType `protobuf:"varint,1,opt,name=identifier_type,json=identifierType,proto3,enum=gidyon.mpesa.QueryAccountBalanceRequest_IdentifierType" json:"identifier_type,omitempty"`
	PartyA         int64                                     `protobuf:"varint,2,opt,name=party_a,json=partyA,proto3" json:"party_a,omitempty"`
	Remarks        string                                    `protobuf:"bytes,3,opt,name=remarks,proto3" json:"remarks,omitempty"`
	RequestId      string                                    `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	InitiatorId    string                                    `protobuf:"bytes,5,opt,name=initiator_id,json=initiatorId,proto3" json:"initiator_id,omitempty"`
}

func (x *QueryAccountBalanceRequest) Reset() {
	*x = QueryAccountBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAccountBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAccountBalanceRequest) ProtoMessage() {}

func (x *QueryAccountBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAccountBalanceRequest.ProtoReflect.Descriptor instead.
func (*QueryAccountBalanceRequest) Descriptor() ([]byte, []int) {
	return file_b2c_proto_rawDescGZIP(), []int{1}
}

func (x *QueryAccountBalanceRequest) GetIdentifierType() QueryAccountBalanceRequest_IdentifierType {
	if x != nil {
		return x.IdentifierType
	}
	return QueryAccountBalanceRequest_QUERY_ACCOUNT_UNSPECIFIED
}

func (x *QueryAccountBalanceRequest) GetPartyA() int64 {
	if x != nil {
		return x.PartyA
	}
	return 0
}

func (x *QueryAccountBalanceRequest) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *QueryAccountBalanceRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *QueryAccountBalanceRequest) GetInitiatorId() string {
	if x != nil {
		return x.InitiatorId
	}
	return ""
}

type QueryAccountBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Party               int64   `protobuf:"varint,1,opt,name=party,proto3" json:"party,omitempty"`
	WorkingAccountFunds float32 `protobuf:"fixed32,2,opt,name=working_account_funds,json=workingAccountFunds,proto3" json:"working_account_funds,omitempty"`
	UtilityAccountFunds float32 `protobuf:"fixed32,3,opt,name=utility_account_funds,json=utilityAccountFunds,proto3" json:"utility_account_funds,omitempty"`
	ChargesPaidFunds    float32 `protobuf:"fixed32,4,opt,name=charges_paid_funds,json=chargesPaidFunds,proto3" json:"charges_paid_funds,omitempty"`
	RequestId           string  `protobuf:"bytes,5,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	InitiatorId         string  `protobuf:"bytes,6,opt,name=initiator_id,json=initiatorId,proto3" json:"initiator_id,omitempty"`
}

func (x *QueryAccountBalanceResponse) Reset() {
	*x = QueryAccountBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAccountBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAccountBalanceResponse) ProtoMessage() {}

func (x *QueryAccountBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAccountBalanceResponse.ProtoReflect.Descriptor instead.
func (*QueryAccountBalanceResponse) Descriptor() ([]byte, []int) {
	return file_b2c_proto_rawDescGZIP(), []int{2}
}

func (x *QueryAccountBalanceResponse) GetParty() int64 {
	if x != nil {
		return x.Party
	}
	return 0
}

func (x *QueryAccountBalanceResponse) GetWorkingAccountFunds() float32 {
	if x != nil {
		return x.WorkingAccountFunds
	}
	return 0
}

func (x *QueryAccountBalanceResponse) GetUtilityAccountFunds() float32 {
	if x != nil {
		return x.UtilityAccountFunds
	}
	return 0
}

func (x *QueryAccountBalanceResponse) GetChargesPaidFunds() float32 {
	if x != nil {
		return x.ChargesPaidFunds
	}
	return 0
}

func (x *QueryAccountBalanceResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *QueryAccountBalanceResponse) GetInitiatorId() string {
	if x != nil {
		return x.InitiatorId
	}
	return ""
}

type TransferFundsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount      float32                        `protobuf:"fixed32,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Msisdn      int32                          `protobuf:"varint,2,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	ShortCode   int32                          `protobuf:"varint,3,opt,name=short_code,json=shortCode,proto3" json:"short_code,omitempty"`
	Remarks     string                         `protobuf:"bytes,4,opt,name=remarks,proto3" json:"remarks,omitempty"`
	Occassion   string                         `protobuf:"bytes,5,opt,name=occassion,proto3" json:"occassion,omitempty"`
	CommandId   TransferFundsRequest_CommandId `protobuf:"varint,6,opt,name=Command_id,json=CommandId,proto3,enum=gidyon.mpesa.TransferFundsRequest_CommandId" json:"Command_id,omitempty"`
	RequestId   string                         `protobuf:"bytes,7,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	InitiatorId string                         `protobuf:"bytes,8,opt,name=initiator_id,json=initiatorId,proto3" json:"initiator_id,omitempty"`
}

func (x *TransferFundsRequest) Reset() {
	*x = TransferFundsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferFundsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferFundsRequest) ProtoMessage() {}

func (x *TransferFundsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferFundsRequest.ProtoReflect.Descriptor instead.
func (*TransferFundsRequest) Descriptor() ([]byte, []int) {
	return file_b2c_proto_rawDescGZIP(), []int{3}
}

func (x *TransferFundsRequest) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TransferFundsRequest) GetMsisdn() int32 {
	if x != nil {
		return x.Msisdn
	}
	return 0
}

func (x *TransferFundsRequest) GetShortCode() int32 {
	if x != nil {
		return x.ShortCode
	}
	return 0
}

func (x *TransferFundsRequest) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *TransferFundsRequest) GetOccassion() string {
	if x != nil {
		return x.Occassion
	}
	return ""
}

func (x *TransferFundsRequest) GetCommandId() TransferFundsRequest_CommandId {
	if x != nil {
		return x.CommandId
	}
	return TransferFundsRequest_COMMANDID_UNSPECIFIED
}

func (x *TransferFundsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *TransferFundsRequest) GetInitiatorId() string {
	if x != nil {
		return x.InitiatorId
	}
	return ""
}

type ReverseTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiverType  int32  `protobuf:"varint,1,opt,name=receiver_type,json=receiverType,proto3" json:"receiver_type,omitempty"`
	ShortCode     int32  `protobuf:"varint,2,opt,name=short_code,json=shortCode,proto3" json:"short_code,omitempty"`
	Remarks       string `protobuf:"bytes,3,opt,name=remarks,proto3" json:"remarks,omitempty"`
	TransactionId string `protobuf:"bytes,4,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Occassion     string `protobuf:"bytes,5,opt,name=occassion,proto3" json:"occassion,omitempty"`
	RequestId     string `protobuf:"bytes,6,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	InitiatorId   string `protobuf:"bytes,7,opt,name=initiator_id,json=initiatorId,proto3" json:"initiator_id,omitempty"`
}

func (x *ReverseTransactionRequest) Reset() {
	*x = ReverseTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReverseTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReverseTransactionRequest) ProtoMessage() {}

func (x *ReverseTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReverseTransactionRequest.ProtoReflect.Descriptor instead.
func (*ReverseTransactionRequest) Descriptor() ([]byte, []int) {
	return file_b2c_proto_rawDescGZIP(), []int{4}
}

func (x *ReverseTransactionRequest) GetReceiverType() int32 {
	if x != nil {
		return x.ReceiverType
	}
	return 0
}

func (x *ReverseTransactionRequest) GetShortCode() int32 {
	if x != nil {
		return x.ShortCode
	}
	return 0
}

func (x *ReverseTransactionRequest) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *ReverseTransactionRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *ReverseTransactionRequest) GetOccassion() string {
	if x != nil {
		return x.Occassion
	}
	return ""
}

func (x *ReverseTransactionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ReverseTransactionRequest) GetInitiatorId() string {
	if x != nil {
		return x.InitiatorId
	}
	return ""
}

type QueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginatorConversionId string `protobuf:"bytes,1,opt,name=originator_conversion_id,json=originatorConversionId,proto3" json:"originator_conversion_id,omitempty"`
	ConversionId           string `protobuf:"bytes,2,opt,name=conversion_id,json=conversionId,proto3" json:"conversion_id,omitempty"`
	ResponseDescription    string `protobuf:"bytes,3,opt,name=response_description,json=responseDescription,proto3" json:"response_description,omitempty"`
	Success                bool   `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_b2c_proto_rawDescGZIP(), []int{5}
}

func (x *QueryResponse) GetOriginatorConversionId() string {
	if x != nil {
		return x.OriginatorConversionId
	}
	return ""
}

func (x *QueryResponse) GetConversionId() string {
	if x != nil {
		return x.ConversionId
	}
	return ""
}

func (x *QueryResponse) GetResponseDescription() string {
	if x != nil {
		return x.ResponseDescription
	}
	return ""
}

func (x *QueryResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type B2CPayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId                string  `protobuf:"bytes,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	InitiatorId              string  `protobuf:"bytes,2,opt,name=initiator_id,json=initiatorId,proto3" json:"initiator_id,omitempty"`
	OrgShortCode             string  `protobuf:"bytes,3,opt,name=org_short_code,json=orgShortCode,proto3" json:"org_short_code,omitempty"`
	Msisdn                   string  `protobuf:"bytes,4,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	ReceiverPartyPublicName  string  `protobuf:"bytes,5,opt,name=receiver_party_public_name,json=receiverPartyPublicName,proto3" json:"receiver_party_public_name,omitempty"`
	TransactionType          string  `protobuf:"bytes,6,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
	TransactionId            string  `protobuf:"bytes,7,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	ConversationId           string  `protobuf:"bytes,8,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	OriginatorConversationId string  `protobuf:"bytes,9,opt,name=originator_conversation_id,json=originatorConversationId,proto3" json:"originator_conversation_id,omitempty"`
	ResultCode               string  `protobuf:"bytes,10,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	ResultDescription        string  `protobuf:"bytes,11,opt,name=result_description,json=resultDescription,proto3" json:"result_description,omitempty"`
	TransactionTimestamp     int64   `protobuf:"varint,12,opt,name=transaction_timestamp,json=transactionTimestamp,proto3" json:"transaction_timestamp,omitempty"`
	CreateTimestamp          int64   `protobuf:"varint,13,opt,name=create_timestamp,json=createTimestamp,proto3" json:"create_timestamp,omitempty"`
	Amount                   float32 `protobuf:"fixed32,14,opt,name=amount,proto3" json:"amount,omitempty"`
	WorkingAccountFunds      float32 `protobuf:"fixed32,15,opt,name=working_account_funds,json=workingAccountFunds,proto3" json:"working_account_funds,omitempty"`
	UtilityAccountFunds      float32 `protobuf:"fixed32,16,opt,name=utility_account_funds,json=utilityAccountFunds,proto3" json:"utility_account_funds,omitempty"`
	ChargesPaidFunds         float32 `protobuf:"fixed32,17,opt,name=charges_paid_funds,json=chargesPaidFunds,proto3" json:"charges_paid_funds,omitempty"`
	RecipientRegistered      bool    `protobuf:"varint,18,opt,name=recipient_registered,json=recipientRegistered,proto3" json:"recipient_registered,omitempty"`
	Succeeded                bool    `protobuf:"varint,19,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Processed                bool    `protobuf:"varint,20,opt,name=processed,proto3" json:"processed,omitempty"`
}

func (x *B2CPayment) Reset() {
	*x = B2CPayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *B2CPayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*B2CPayment) ProtoMessage() {}

func (x *B2CPayment) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use B2CPayment.ProtoReflect.Descriptor instead.
func (*B2CPayment) Descriptor() ([]byte, []int) {
	return file_b2c_proto_rawDescGZIP(), []int{6}
}

func (x *B2CPayment) GetPaymentId() string {
	if x != nil {
		return x.PaymentId
	}
	return ""
}

func (x *B2CPayment) GetInitiatorId() string {
	if x != nil {
		return x.InitiatorId
	}
	return ""
}

func (x *B2CPayment) GetOrgShortCode() string {
	if x != nil {
		return x.OrgShortCode
	}
	return ""
}

func (x *B2CPayment) GetMsisdn() string {
	if x != nil {
		return x.Msisdn
	}
	return ""
}

func (x *B2CPayment) GetReceiverPartyPublicName() string {
	if x != nil {
		return x.ReceiverPartyPublicName
	}
	return ""
}

func (x *B2CPayment) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *B2CPayment) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *B2CPayment) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *B2CPayment) GetOriginatorConversationId() string {
	if x != nil {
		return x.OriginatorConversationId
	}
	return ""
}

func (x *B2CPayment) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *B2CPayment) GetResultDescription() string {
	if x != nil {
		return x.ResultDescription
	}
	return ""
}

func (x *B2CPayment) GetTransactionTimestamp() int64 {
	if x != nil {
		return x.TransactionTimestamp
	}
	return 0
}

func (x *B2CPayment) GetCreateTimestamp() int64 {
	if x != nil {
		return x.CreateTimestamp
	}
	return 0
}

func (x *B2CPayment) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *B2CPayment) GetWorkingAccountFunds() float32 {
	if x != nil {
		return x.WorkingAccountFunds
	}
	return 0
}

func (x *B2CPayment) GetUtilityAccountFunds() float32 {
	if x != nil {
		return x.UtilityAccountFunds
	}
	return 0
}

func (x *B2CPayment) GetChargesPaidFunds() float32 {
	if x != nil {
		return x.ChargesPaidFunds
	}
	return 0
}

func (x *B2CPayment) GetRecipientRegistered() bool {
	if x != nil {
		return x.RecipientRegistered
	}
	return false
}

func (x *B2CPayment) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *B2CPayment) GetProcessed() bool {
	if x != nil {
		return x.Processed
	}
	return false
}

type CreateB2CPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payment *B2CPayment `protobuf:"bytes,1,opt,name=payment,proto3" json:"payment,omitempty"`
	Publish bool        `protobuf:"varint,2,opt,name=publish,proto3" json:"publish,omitempty"`
}

func (x *CreateB2CPaymentRequest) Reset() {
	*x = CreateB2CPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateB2CPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateB2CPaymentRequest) ProtoMessage() {}

func (x *CreateB2CPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateB2CPaymentRequest.ProtoReflect.Descriptor instead.
func (*CreateB2CPaymentRequest) Descriptor() ([]byte, []int) {
	return file_b2c_proto_rawDescGZIP(), []int{7}
}

func (x *CreateB2CPaymentRequest) GetPayment() *B2CPayment {
	if x != nil {
		return x.Payment
	}
	return nil
}

func (x *CreateB2CPaymentRequest) GetPublish() bool {
	if x != nil {
		return x.Publish
	}
	return false
}

type GetB2CPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId string `protobuf:"bytes,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
}

func (x *GetB2CPaymentRequest) Reset() {
	*x = GetB2CPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetB2CPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetB2CPaymentRequest) ProtoMessage() {}

func (x *GetB2CPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetB2CPaymentRequest.ProtoReflect.Descriptor instead.
func (*GetB2CPaymentRequest) Descriptor() ([]byte, []int) {
	return file_b2c_proto_rawDescGZIP(), []int{8}
}

func (x *GetB2CPaymentRequest) GetPaymentId() string {
	if x != nil {
		return x.PaymentId
	}
	return ""
}

type ListB2CPaymentFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitiatorId    string                      `protobuf:"bytes,1,opt,name=initiator_id,json=initiatorId,proto3" json:"initiator_id,omitempty"`
	TxDate         string                      `protobuf:"bytes,2,opt,name=tx_date,json=txDate,proto3" json:"tx_date,omitempty"`
	Msisdns        []string                    `protobuf:"bytes,3,rep,name=msisdns,proto3" json:"msisdns,omitempty"`
	ProcessState   mpesapayment.ProcessedState `protobuf:"varint,4,opt,name=process_state,json=processState,proto3,enum=gidyon.mpesa.ProcessedState" json:"process_state,omitempty"`
	StartTimestamp int64                       `protobuf:"varint,5,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	EndTimestamp   int64                       `protobuf:"varint,6,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
}

func (x *ListB2CPaymentFilter) Reset() {
	*x = ListB2CPaymentFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListB2CPaymentFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListB2CPaymentFilter) ProtoMessage() {}

func (x *ListB2CPaymentFilter) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListB2CPaymentFilter.ProtoReflect.Descriptor instead.
func (*ListB2CPaymentFilter) Descriptor() ([]byte, []int) {
	return file_b2c_proto_rawDescGZIP(), []int{9}
}

func (x *ListB2CPaymentFilter) GetInitiatorId() string {
	if x != nil {
		return x.InitiatorId
	}
	return ""
}

func (x *ListB2CPaymentFilter) GetTxDate() string {
	if x != nil {
		return x.TxDate
	}
	return ""
}

func (x *ListB2CPaymentFilter) GetMsisdns() []string {
	if x != nil {
		return x.Msisdns
	}
	return nil
}

func (x *ListB2CPaymentFilter) GetProcessState() mpesapayment.ProcessedState {
	if x != nil {
		return x.ProcessState
	}
	return mpesapayment.ProcessedState_PROCESS_STATE_UNSPECIFIED
}

func (x *ListB2CPaymentFilter) GetStartTimestamp() int64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *ListB2CPaymentFilter) GetEndTimestamp() int64 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

type ListB2CPaymentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageToken string                `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	PageSize  int32                 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Filter    *ListB2CPaymentFilter `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListB2CPaymentsRequest) Reset() {
	*x = ListB2CPaymentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListB2CPaymentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListB2CPaymentsRequest) ProtoMessage() {}

func (x *ListB2CPaymentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListB2CPaymentsRequest.ProtoReflect.Descriptor instead.
func (*ListB2CPaymentsRequest) Descriptor() ([]byte, []int) {
	return file_b2c_proto_rawDescGZIP(), []int{10}
}

func (x *ListB2CPaymentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListB2CPaymentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListB2CPaymentsRequest) GetFilter() *ListB2CPaymentFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListB2CPaymentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextPageToken string        `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	B2CPayments   []*B2CPayment `protobuf:"bytes,2,rep,name=b2c_payments,json=b2cPayments,proto3" json:"b2c_payments,omitempty"`
}

func (x *ListB2CPaymentsResponse) Reset() {
	*x = ListB2CPaymentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListB2CPaymentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListB2CPaymentsResponse) ProtoMessage() {}

func (x *ListB2CPaymentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListB2CPaymentsResponse.ProtoReflect.Descriptor instead.
func (*ListB2CPaymentsResponse) Descriptor() ([]byte, []int) {
	return file_b2c_proto_rawDescGZIP(), []int{11}
}

func (x *ListB2CPaymentsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListB2CPaymentsResponse) GetB2CPayments() []*B2CPayment {
	if x != nil {
		return x.B2CPayments
	}
	return nil
}

type ProcessB2CPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId string `protobuf:"bytes,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	Processed bool   `protobuf:"varint,2,opt,name=processed,proto3" json:"processed,omitempty"`
}

func (x *ProcessB2CPaymentRequest) Reset() {
	*x = ProcessB2CPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessB2CPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessB2CPaymentRequest) ProtoMessage() {}

func (x *ProcessB2CPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessB2CPaymentRequest.ProtoReflect.Descriptor instead.
func (*ProcessB2CPaymentRequest) Descriptor() ([]byte, []int) {
	return file_b2c_proto_rawDescGZIP(), []int{12}
}

func (x *ProcessB2CPaymentRequest) GetPaymentId() string {
	if x != nil {
		return x.PaymentId
	}
	return ""
}

func (x *ProcessB2CPaymentRequest) GetProcessed() bool {
	if x != nil {
		return x.Processed
	}
	return false
}

type PublishB2CPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId      string                      `protobuf:"bytes,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	Payload        map[string]string           `protobuf:"bytes,2,rep,name=payload,proto3" json:"payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ProcessedState mpesapayment.ProcessedState `protobuf:"varint,3,opt,name=processed_state,json=processedState,proto3,enum=gidyon.mpesa.ProcessedState" json:"processed_state,omitempty"`
	FromCache      bool                        `protobuf:"varint,4,opt,name=from_cache,json=fromCache,proto3" json:"from_cache,omitempty"`
}

func (x *PublishB2CPaymentRequest) Reset() {
	*x = PublishB2CPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishB2CPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishB2CPaymentRequest) ProtoMessage() {}

func (x *PublishB2CPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishB2CPaymentRequest.ProtoReflect.Descriptor instead.
func (*PublishB2CPaymentRequest) Descriptor() ([]byte, []int) {
	return file_b2c_proto_rawDescGZIP(), []int{13}
}

func (x *PublishB2CPaymentRequest) GetPaymentId() string {
	if x != nil {
		return x.PaymentId
	}
	return ""
}

func (x *PublishB2CPaymentRequest) GetPayload() map[string]string {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *PublishB2CPaymentRequest) GetProcessedState() mpesapayment.ProcessedState {
	if x != nil {
		return x.ProcessedState
	}
	return mpesapayment.ProcessedState_PROCESS_STATE_UNSPECIFIED
}

func (x *PublishB2CPaymentRequest) GetFromCache() bool {
	if x != nil {
		return x.FromCache
	}
	return false
}

type PublishAllB2CPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessedState mpesapayment.ProcessedState `protobuf:"varint,1,opt,name=processed_state,json=processedState,proto3,enum=gidyon.mpesa.ProcessedState" json:"processed_state,omitempty"`
	FromCache      bool                        `protobuf:"varint,2,opt,name=from_cache,json=fromCache,proto3" json:"from_cache,omitempty"`
	StartTimestamp int64                       `protobuf:"varint,3,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	EndTimestamp   int64                       `protobuf:"varint,4,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
}

func (x *PublishAllB2CPaymentRequest) Reset() {
	*x = PublishAllB2CPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_b2c_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishAllB2CPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishAllB2CPaymentRequest) ProtoMessage() {}

func (x *PublishAllB2CPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_b2c_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishAllB2CPaymentRequest.ProtoReflect.Descriptor instead.
func (*PublishAllB2CPaymentRequest) Descriptor() ([]byte, []int) {
	return file_b2c_proto_rawDescGZIP(), []int{14}
}

func (x *PublishAllB2CPaymentRequest) GetProcessedState() mpesapayment.ProcessedState {
	if x != nil {
		return x.ProcessedState
	}
	return mpesapayment.ProcessedState_PROCESS_STATE_UNSPECIFIED
}

func (x *PublishAllB2CPaymentRequest) GetFromCache() bool {
	if x != nil {
		return x.FromCache
	}
	return false
}

func (x *PublishAllB2CPaymentRequest) GetStartTimestamp() int64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *PublishAllB2CPaymentRequest) GetEndTimestamp() int64 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

var File_b2c_proto protoreflect.FileDescriptor

var file_b2c_proto_rawDesc = []byte{
	0x0a, 0x09, 0x62, 0x32, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x67, 0x69, 0x64,
	0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x5f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x04, 0x0a, 0x1d, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x0f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70,
	0x65, 0x73, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x79, 0x41, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x63, 0x63, 0x61, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x63, 0x63, 0x61, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x53, 0x49, 0x53, 0x44,
	0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x49, 0x4c, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10,
	0x03, 0x22, 0xde, 0x02, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x60, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x69, 0x64, 0x79,
	0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x79, 0x41, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x0e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x53, 0x49, 0x53,
	0x44, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x49, 0x4c, 0x4c, 0x5f, 0x4e, 0x55, 0x4d,
	0x42, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x10, 0x03, 0x22, 0x8b, 0x02, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x75, 0x74, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x64,
	0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x73, 0x50, 0x61, 0x69, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x22, 0x95, 0x03, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x75, 0x6e,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x63, 0x63, 0x61, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x63, 0x63, 0x61, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4b, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70,
	0x65, 0x73, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x49, 0x64, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22,
	0x67, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x15,
	0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x41, 0x4c, 0x41, 0x52,
	0x59, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x42,
	0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x22, 0x80, 0x02, 0x0a, 0x19, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f,
	0x63, 0x63, 0x61, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x63, 0x63, 0x61, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0xbb, 0x01, 0x0a, 0x0d,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x18, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x14,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xcf, 0x06, 0x0a, 0x0a, 0x42, 0x32,
	0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x72,
	0x67, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x3c, 0x0a, 0x1a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x74,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x75,
	0x6e, 0x64, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x75, 0x74, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x66,
	0x75, 0x6e, 0x64, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x73, 0x50, 0x61, 0x69, 0x64, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x14,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f,
	0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x3a, 0x47, 0x92, 0x41, 0x44, 0x0a, 0x42, 0x2a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74,
	0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x62, 0x32, 0x63, 0x20, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0xd2, 0x01, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x80,
	0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x49, 0x92, 0x41, 0x46, 0x0a, 0x44, 0x2a, 0x14, 0x47,
	0x65, 0x74, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x1f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20,
	0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x62, 0x74, 0x63, 0x20, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0xd2, 0x01, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x22, 0xc4, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x78, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x73,
	0x12, 0x41, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e,
	0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x3a, 0x45, 0x92, 0x41, 0x42, 0x0a, 0x40, 0x2a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x32,
	0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x32, 0x28,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x74, 0x6b, 0x20,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x3a, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x4f, 0x92, 0x41, 0x4c,
	0x0a, 0x4a, 0x2a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x30, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20,
	0x61, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20,
	0x62, 0x32, 0x63, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xcf, 0x01, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x3b, 0x0a, 0x0c, 0x62, 0x32, 0x63, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e,
	0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x62, 0x32, 0x63, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x4f, 0x92,
	0x41, 0x4c, 0x0a, 0x4a, 0x2a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x2f, 0x52,
	0x65, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	0x66, 0x20, 0x62, 0x32, 0x63, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa7,
	0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x3a, 0x4e, 0x92, 0x41, 0x4b, 0x0a, 0x49, 0x2a,
	0x18, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x2d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x62, 0x32, 0x63,
	0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xf7, 0x02, 0x0a, 0x18, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x69, 0x64,
	0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x45, 0x0a,
	0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e,
	0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a,
	0x41, 0x92, 0x41, 0x3e, 0x0a, 0x3c, 0x2a, 0x18, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x42,
	0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x32, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x20, 0x61, 0x20, 0x62, 0x32, 0x63, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x9a, 0x02, 0x0a, 0x1b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x6c,
	0x6c, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x67, 0x69,
	0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66,
	0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x3a, 0x47, 0x92, 0x41, 0x44, 0x0a, 0x42, 0x2a, 0x1b, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x6c, 0x6c, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x23, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x20, 0x61,
	0x6c, 0x6c, 0x20, 0x62, 0x32, 0x63, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x32,
	0xe1, 0x06, 0x0a, 0x06, 0x42, 0x32, 0x43, 0x41, 0x50, 0x49, 0x12, 0x64, 0x0a, 0x16, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70,
	0x65, 0x73, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6c, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e,
	0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d,
	0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x12,
	0x22, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a,
	0x12, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65,
	0x73, 0x61, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x6f, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x32,
	0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f,
	0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x32,
	0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x42,
	0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x22, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x62,
	0x32, 0x63, 0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x32, 0x43, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e,
	0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x69, 0x64,
	0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x62, 0x32, 0x63, 0x2f, 0x7b, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x77, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x2e,
	0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65,
	0x73, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x11, 0x12, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f,
	0x62, 0x32, 0x63, 0x12, 0x7e, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42, 0x32,
	0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f,
	0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x42,
	0x32, 0x43, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23,
	0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x62, 0x32,
	0x63, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x3a, 0x01, 0x2a, 0x42, 0xd8, 0x03, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x62, 0x32, 0x63, 0x92, 0x41, 0xa7, 0x03, 0x12, 0x93, 0x02, 0x0a, 0x11, 0x42, 0x32, 0x43, 0x20,
	0x4d, 0x70, 0x65, 0x73, 0x61, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x26, 0x41,
	0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x42, 0x32, 0x43, 0x20, 0x4d, 0x70, 0x65, 0x73,
	0x61, 0x20, 0x41, 0x50, 0x49, 0x22, 0x77, 0x0a, 0x15, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x20,
	0x3c, 0x47, 0x69, 0x64, 0x65, 0x6f, 0x6e, 0x20, 0x4b, 0x61, 0x6d, 0x61, 0x75, 0x3e, 0x12, 0x47,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x32,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x69, 0x64, 0x65, 0x6f, 0x6e, 0x68,
	0x61, 0x63, 0x65, 0x72, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2a, 0x58,
	0x0a, 0x1a, 0x47, 0x4e, 0x55, 0x20, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x20, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x43, 0x20, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x12, 0x3a, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x32, 0x03, 0x30, 0x2e, 0x31, 0x2a, 0x02, 0x01,
	0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x59, 0x0a, 0x57, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65,
	0x72, 0x12, 0x4d, 0x08, 0x02, 0x12, 0x38, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x3a,
	0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x20, 0x3c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3e, 0x1a,
	0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02,
	0x62, 0x0c, 0x0a, 0x0a, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x00, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_b2c_proto_rawDescOnce sync.Once
	file_b2c_proto_rawDescData = file_b2c_proto_rawDesc
)

func file_b2c_proto_rawDescGZIP() []byte {
	file_b2c_proto_rawDescOnce.Do(func() {
		file_b2c_proto_rawDescData = protoimpl.X.CompressGZIP(file_b2c_proto_rawDescData)
	})
	return file_b2c_proto_rawDescData
}

var file_b2c_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_b2c_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_b2c_proto_goTypes = []interface{}{
	(QueryTransactionStatusRequest_IdentifierType)(0), // 0: gidyon.mpesa.QueryTransactionStatusRequest.IdentifierType
	(QueryAccountBalanceRequest_IdentifierType)(0),    // 1: gidyon.mpesa.QueryAccountBalanceRequest.IdentifierType
	(TransferFundsRequest_CommandId)(0),               // 2: gidyon.mpesa.TransferFundsRequest.CommandId
	(*QueryTransactionStatusRequest)(nil),             // 3: gidyon.mpesa.QueryTransactionStatusRequest
	(*QueryAccountBalanceRequest)(nil),                // 4: gidyon.mpesa.QueryAccountBalanceRequest
	(*QueryAccountBalanceResponse)(nil),               // 5: gidyon.mpesa.QueryAccountBalanceResponse
	(*TransferFundsRequest)(nil),                      // 6: gidyon.mpesa.TransferFundsRequest
	(*ReverseTransactionRequest)(nil),                 // 7: gidyon.mpesa.ReverseTransactionRequest
	(*QueryResponse)(nil),                             // 8: gidyon.mpesa.QueryResponse
	(*B2CPayment)(nil),                                // 9: gidyon.mpesa.B2CPayment
	(*CreateB2CPaymentRequest)(nil),                   // 10: gidyon.mpesa.CreateB2CPaymentRequest
	(*GetB2CPaymentRequest)(nil),                      // 11: gidyon.mpesa.GetB2CPaymentRequest
	(*ListB2CPaymentFilter)(nil),                      // 12: gidyon.mpesa.ListB2CPaymentFilter
	(*ListB2CPaymentsRequest)(nil),                    // 13: gidyon.mpesa.ListB2CPaymentsRequest
	(*ListB2CPaymentsResponse)(nil),                   // 14: gidyon.mpesa.ListB2CPaymentsResponse
	(*ProcessB2CPaymentRequest)(nil),                  // 15: gidyon.mpesa.ProcessB2CPaymentRequest
	(*PublishB2CPaymentRequest)(nil),                  // 16: gidyon.mpesa.PublishB2CPaymentRequest
	(*PublishAllB2CPaymentRequest)(nil),               // 17: gidyon.mpesa.PublishAllB2CPaymentRequest
	nil,                                               // 18: gidyon.mpesa.PublishB2CPaymentRequest.PayloadEntry
	(mpesapayment.ProcessedState)(0),                  // 19: gidyon.mpesa.ProcessedState
	(*emptypb.Empty)(nil),                             // 20: google.protobuf.Empty
}
var file_b2c_proto_depIdxs = []int32{
	0,  // 0: gidyon.mpesa.QueryTransactionStatusRequest.identifier_type:type_name -> gidyon.mpesa.QueryTransactionStatusRequest.IdentifierType
	1,  // 1: gidyon.mpesa.QueryAccountBalanceRequest.identifier_type:type_name -> gidyon.mpesa.QueryAccountBalanceRequest.IdentifierType
	2,  // 2: gidyon.mpesa.TransferFundsRequest.Command_id:type_name -> gidyon.mpesa.TransferFundsRequest.CommandId
	9,  // 3: gidyon.mpesa.CreateB2CPaymentRequest.payment:type_name -> gidyon.mpesa.B2CPayment
	19, // 4: gidyon.mpesa.ListB2CPaymentFilter.process_state:type_name -> gidyon.mpesa.ProcessedState
	12, // 5: gidyon.mpesa.ListB2CPaymentsRequest.filter:type_name -> gidyon.mpesa.ListB2CPaymentFilter
	9,  // 6: gidyon.mpesa.ListB2CPaymentsResponse.b2c_payments:type_name -> gidyon.mpesa.B2CPayment
	18, // 7: gidyon.mpesa.PublishB2CPaymentRequest.payload:type_name -> gidyon.mpesa.PublishB2CPaymentRequest.PayloadEntry
	19, // 8: gidyon.mpesa.PublishB2CPaymentRequest.processed_state:type_name -> gidyon.mpesa.ProcessedState
	19, // 9: gidyon.mpesa.PublishAllB2CPaymentRequest.processed_state:type_name -> gidyon.mpesa.ProcessedState
	3,  // 10: gidyon.mpesa.B2CAPI.QueryTransactionStatus:input_type -> gidyon.mpesa.QueryTransactionStatusRequest
	4,  // 11: gidyon.mpesa.B2CAPI.QueryAccountBalance:input_type -> gidyon.mpesa.QueryAccountBalanceRequest
	6,  // 12: gidyon.mpesa.B2CAPI.TransferFunds:input_type -> gidyon.mpesa.TransferFundsRequest
	7,  // 13: gidyon.mpesa.B2CAPI.ReverseTransaction:input_type -> gidyon.mpesa.ReverseTransactionRequest
	10, // 14: gidyon.mpesa.B2CAPI.CreateB2CPayment:input_type -> gidyon.mpesa.CreateB2CPaymentRequest
	11, // 15: gidyon.mpesa.B2CAPI.GetB2CPayment:input_type -> gidyon.mpesa.GetB2CPaymentRequest
	13, // 16: gidyon.mpesa.B2CAPI.ListB2CPayments:input_type -> gidyon.mpesa.ListB2CPaymentsRequest
	15, // 17: gidyon.mpesa.B2CAPI.ProcessB2CPayment:input_type -> gidyon.mpesa.ProcessB2CPaymentRequest
	8,  // 18: gidyon.mpesa.B2CAPI.QueryTransactionStatus:output_type -> gidyon.mpesa.QueryResponse
	5,  // 19: gidyon.mpesa.B2CAPI.QueryAccountBalance:output_type -> gidyon.mpesa.QueryAccountBalanceResponse
	20, // 20: gidyon.mpesa.B2CAPI.TransferFunds:output_type -> google.protobuf.Empty
	20, // 21: gidyon.mpesa.B2CAPI.ReverseTransaction:output_type -> google.protobuf.Empty
	9,  // 22: gidyon.mpesa.B2CAPI.CreateB2CPayment:output_type -> gidyon.mpesa.B2CPayment
	9,  // 23: gidyon.mpesa.B2CAPI.GetB2CPayment:output_type -> gidyon.mpesa.B2CPayment
	14, // 24: gidyon.mpesa.B2CAPI.ListB2CPayments:output_type -> gidyon.mpesa.ListB2CPaymentsResponse
	20, // 25: gidyon.mpesa.B2CAPI.ProcessB2CPayment:output_type -> google.protobuf.Empty
	18, // [18:26] is the sub-list for method output_type
	10, // [10:18] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_b2c_proto_init() }
func file_b2c_proto_init() {
	if File_b2c_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_b2c_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryTransactionStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAccountBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAccountBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferFundsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReverseTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*B2CPayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateB2CPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetB2CPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListB2CPaymentFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListB2CPaymentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListB2CPaymentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessB2CPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishB2CPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_b2c_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishAllB2CPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_b2c_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_b2c_proto_goTypes,
		DependencyIndexes: file_b2c_proto_depIdxs,
		EnumInfos:         file_b2c_proto_enumTypes,
		MessageInfos:      file_b2c_proto_msgTypes,
	}.Build()
	File_b2c_proto = out.File
	file_b2c_proto_rawDesc = nil
	file_b2c_proto_goTypes = nil
	file_b2c_proto_depIdxs = nil
}
