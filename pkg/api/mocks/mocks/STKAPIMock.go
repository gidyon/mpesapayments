// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"

	stk "github.com/gidyon/mpesapayments/pkg/api/stk"
)

// STKAPIMock is an autogenerated mock type for the STKAPIMock type
type STKAPIMock struct {
	mock.Mock
}

// CreateStkPayload provides a mock function with given fields: ctx, in, opts
func (_m *STKAPIMock) CreateStkPayload(ctx context.Context, in *stk.CreateStkPayloadRequest, opts ...grpc.CallOption) (*stk.StkPayload, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stk.StkPayload
	if rf, ok := ret.Get(0).(func(context.Context, *stk.CreateStkPayloadRequest, ...grpc.CallOption) *stk.StkPayload); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stk.StkPayload)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stk.CreateStkPayloadRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStkPayload provides a mock function with given fields: ctx, in, opts
func (_m *STKAPIMock) GetStkPayload(ctx context.Context, in *stk.GetStkPayloadRequest, opts ...grpc.CallOption) (*stk.StkPayload, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stk.StkPayload
	if rf, ok := ret.Get(0).(func(context.Context, *stk.GetStkPayloadRequest, ...grpc.CallOption) *stk.StkPayload); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stk.StkPayload)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stk.GetStkPayloadRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitiateSTKPush provides a mock function with given fields: ctx, in, opts
func (_m *STKAPIMock) InitiateSTKPush(ctx context.Context, in *stk.InitiateSTKPushRequest, opts ...grpc.CallOption) (*stk.InitiateSTKPushResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stk.InitiateSTKPushResponse
	if rf, ok := ret.Get(0).(func(context.Context, *stk.InitiateSTKPushRequest, ...grpc.CallOption) *stk.InitiateSTKPushResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stk.InitiateSTKPushResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stk.InitiateSTKPushRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStkPayloads provides a mock function with given fields: ctx, in, opts
func (_m *STKAPIMock) ListStkPayloads(ctx context.Context, in *stk.ListStkPayloadsRequest, opts ...grpc.CallOption) (*stk.ListStkPayloadsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *stk.ListStkPayloadsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *stk.ListStkPayloadsRequest, ...grpc.CallOption) *stk.ListStkPayloadsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stk.ListStkPayloadsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stk.ListStkPayloadsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessStkPayload provides a mock function with given fields: ctx, in, opts
func (_m *STKAPIMock) ProcessStkPayload(ctx context.Context, in *stk.ProcessStkPayloadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *stk.ProcessStkPayloadRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stk.ProcessStkPayloadRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishAllStkPayload provides a mock function with given fields: ctx, in, opts
func (_m *STKAPIMock) PublishAllStkPayload(ctx context.Context, in *stk.PublishAllStkPayloadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *stk.PublishAllStkPayloadRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stk.PublishAllStkPayloadRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishStkPayload provides a mock function with given fields: ctx, in, opts
func (_m *STKAPIMock) PublishStkPayload(ctx context.Context, in *stk.PublishStkPayloadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *stk.PublishStkPayloadRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *stk.PublishStkPayloadRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
