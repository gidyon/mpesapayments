// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: stk.v2.proto

package v2

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StkStatus int32

const (
	StkStatus_STK_STATUS_UNKNOWN   StkStatus = 0
	StkStatus_STK_REQUEST_FAILED   StkStatus = 1
	StkStatus_STK_REQUEST_SUBMITED StkStatus = 3
	StkStatus_STK_RESULT_SUCCESS   StkStatus = 4
	StkStatus_STK_RESULT_FAILED    StkStatus = 5
	StkStatus_STK_SUCCESS          StkStatus = 6
	StkStatus_STK_FAILED           StkStatus = 7
)

// Enum value maps for StkStatus.
var (
	StkStatus_name = map[int32]string{
		0: "STK_STATUS_UNKNOWN",
		1: "STK_REQUEST_FAILED",
		3: "STK_REQUEST_SUBMITED",
		4: "STK_RESULT_SUCCESS",
		5: "STK_RESULT_FAILED",
		6: "STK_SUCCESS",
		7: "STK_FAILED",
	}
	StkStatus_value = map[string]int32{
		"STK_STATUS_UNKNOWN":   0,
		"STK_REQUEST_FAILED":   1,
		"STK_REQUEST_SUBMITED": 3,
		"STK_RESULT_SUCCESS":   4,
		"STK_RESULT_FAILED":    5,
		"STK_SUCCESS":          6,
		"STK_FAILED":           7,
	}
)

func (x StkStatus) Enum() *StkStatus {
	p := new(StkStatus)
	*p = x
	return p
}

func (x StkStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StkStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_stk_v2_proto_enumTypes[0].Descriptor()
}

func (StkStatus) Type() protoreflect.EnumType {
	return &file_stk_v2_proto_enumTypes[0]
}

func (x StkStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StkStatus.Descriptor instead.
func (StkStatus) EnumDescriptor() ([]byte, []int) {
	return file_stk_v2_proto_rawDescGZIP(), []int{0}
}

type StkOrderField int32

const (
	StkOrderField_STK_ORDER_FIELD_UNSPECIFIED StkOrderField = 0
	StkOrderField_CREATE_TIMESTAMP            StkOrderField = 1
	StkOrderField_TRANSACTION_TIMESTAMP       StkOrderField = 2
)

// Enum value maps for StkOrderField.
var (
	StkOrderField_name = map[int32]string{
		0: "STK_ORDER_FIELD_UNSPECIFIED",
		1: "CREATE_TIMESTAMP",
		2: "TRANSACTION_TIMESTAMP",
	}
	StkOrderField_value = map[string]int32{
		"STK_ORDER_FIELD_UNSPECIFIED": 0,
		"CREATE_TIMESTAMP":            1,
		"TRANSACTION_TIMESTAMP":       2,
	}
)

func (x StkOrderField) Enum() *StkOrderField {
	p := new(StkOrderField)
	*p = x
	return p
}

func (x StkOrderField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StkOrderField) Descriptor() protoreflect.EnumDescriptor {
	return file_stk_v2_proto_enumTypes[1].Descriptor()
}

func (StkOrderField) Type() protoreflect.EnumType {
	return &file_stk_v2_proto_enumTypes[1]
}

func (x StkOrderField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StkOrderField.Descriptor instead.
func (StkOrderField) EnumDescriptor() ([]byte, []int) {
	return file_stk_v2_proto_rawDescGZIP(), []int{1}
}

type StkProcessedState int32

const (
	StkProcessedState_STK_PROCESS_STATE_UNSPECIFIED StkProcessedState = 0
	StkProcessedState_STK_PROCESSED                 StkProcessedState = 1
	StkProcessedState_STK_NOT_PROCESSED             StkProcessedState = 2
)

// Enum value maps for StkProcessedState.
var (
	StkProcessedState_name = map[int32]string{
		0: "STK_PROCESS_STATE_UNSPECIFIED",
		1: "STK_PROCESSED",
		2: "STK_NOT_PROCESSED",
	}
	StkProcessedState_value = map[string]int32{
		"STK_PROCESS_STATE_UNSPECIFIED": 0,
		"STK_PROCESSED":                 1,
		"STK_NOT_PROCESSED":             2,
	}
)

func (x StkProcessedState) Enum() *StkProcessedState {
	p := new(StkProcessedState)
	*p = x
	return p
}

func (x StkProcessedState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StkProcessedState) Descriptor() protoreflect.EnumDescriptor {
	return file_stk_v2_proto_enumTypes[2].Descriptor()
}

func (StkProcessedState) Type() protoreflect.EnumType {
	return &file_stk_v2_proto_enumTypes[2]
}

func (x StkProcessedState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StkProcessedState.Descriptor instead.
func (StkProcessedState) EnumDescriptor() ([]byte, []int) {
	return file_stk_v2_proto_rawDescGZIP(), []int{2}
}

type StkTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitiatorId                   string    `protobuf:"bytes,1,opt,name=initiator_id,json=initiatorId,proto3" json:"initiator_id,omitempty"`
	TransactionId                 string    `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	InitiatorTransactionReference string    `protobuf:"bytes,3,opt,name=initiator_transaction_reference,json=initiatorTransactionReference,proto3" json:"initiator_transaction_reference,omitempty"`
	InitiatorCustomerReference    string    `protobuf:"bytes,4,opt,name=initiator_customer_reference,json=initiatorCustomerReference,proto3" json:"initiator_customer_reference,omitempty"`
	InitiatorCustomerNames        string    `protobuf:"bytes,5,opt,name=initiator_customer_names,json=initiatorCustomerNames,proto3" json:"initiator_customer_names,omitempty"`
	ShortCode                     string    `protobuf:"bytes,6,opt,name=short_code,json=shortCode,proto3" json:"short_code,omitempty"`
	AccountReference              string    `protobuf:"bytes,7,opt,name=account_reference,json=accountReference,proto3" json:"account_reference,omitempty"`
	Amount                        string    `protobuf:"bytes,8,opt,name=amount,proto3" json:"amount,omitempty"`
	PhoneNumber                   string    `protobuf:"bytes,9,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	TransactionDesc               string    `protobuf:"bytes,10,opt,name=transaction_desc,json=transactionDesc,proto3" json:"transaction_desc,omitempty"`
	MerchantRequestId             string    `protobuf:"bytes,11,opt,name=merchant_request_id,json=merchantRequestId,proto3" json:"merchant_request_id,omitempty"`
	CheckoutRequestId             string    `protobuf:"bytes,12,opt,name=checkout_request_id,json=checkoutRequestId,proto3" json:"checkout_request_id,omitempty"`
	StkResponseDescription        string    `protobuf:"bytes,13,opt,name=stk_response_description,json=stkResponseDescription,proto3" json:"stk_response_description,omitempty"`
	StkResponseCode               string    `protobuf:"bytes,14,opt,name=stk_response_code,json=stkResponseCode,proto3" json:"stk_response_code,omitempty"`
	StkResultCode                 string    `protobuf:"bytes,15,opt,name=stk_result_code,json=stkResultCode,proto3" json:"stk_result_code,omitempty"`
	StkResultDesc                 string    `protobuf:"bytes,16,opt,name=stk_result_desc,json=stkResultDesc,proto3" json:"stk_result_desc,omitempty"`
	MpesaReceiptId                string    `protobuf:"bytes,17,opt,name=mpesa_receipt_id,json=mpesaReceiptId,proto3" json:"mpesa_receipt_id,omitempty"`
	Balance                       string    `protobuf:"bytes,18,opt,name=balance,proto3" json:"balance,omitempty"`
	Status                        StkStatus `protobuf:"varint,19,opt,name=status,proto3,enum=gidyon.mpesa.StkStatus" json:"status,omitempty"`
	Source                        string    `protobuf:"bytes,20,opt,name=source,proto3" json:"source,omitempty"`
	Tag                           string    `protobuf:"bytes,21,opt,name=tag,proto3" json:"tag,omitempty"`
	Succeeded                     bool      `protobuf:"varint,22,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Processed                     bool      `protobuf:"varint,23,opt,name=processed,proto3" json:"processed,omitempty"`
	TransactionTimestamp          int64     `protobuf:"varint,24,opt,name=transaction_timestamp,json=transactionTimestamp,proto3" json:"transaction_timestamp,omitempty"`
	CreateTimestamp               int64     `protobuf:"varint,25,opt,name=create_timestamp,json=createTimestamp,proto3" json:"create_timestamp,omitempty"`
}

func (x *StkTransaction) Reset() {
	*x = StkTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stk_v2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StkTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StkTransaction) ProtoMessage() {}

func (x *StkTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_stk_v2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StkTransaction.ProtoReflect.Descriptor instead.
func (*StkTransaction) Descriptor() ([]byte, []int) {
	return file_stk_v2_proto_rawDescGZIP(), []int{0}
}

func (x *StkTransaction) GetInitiatorId() string {
	if x != nil {
		return x.InitiatorId
	}
	return ""
}

func (x *StkTransaction) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *StkTransaction) GetInitiatorTransactionReference() string {
	if x != nil {
		return x.InitiatorTransactionReference
	}
	return ""
}

func (x *StkTransaction) GetInitiatorCustomerReference() string {
	if x != nil {
		return x.InitiatorCustomerReference
	}
	return ""
}

func (x *StkTransaction) GetInitiatorCustomerNames() string {
	if x != nil {
		return x.InitiatorCustomerNames
	}
	return ""
}

func (x *StkTransaction) GetShortCode() string {
	if x != nil {
		return x.ShortCode
	}
	return ""
}

func (x *StkTransaction) GetAccountReference() string {
	if x != nil {
		return x.AccountReference
	}
	return ""
}

func (x *StkTransaction) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *StkTransaction) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *StkTransaction) GetTransactionDesc() string {
	if x != nil {
		return x.TransactionDesc
	}
	return ""
}

func (x *StkTransaction) GetMerchantRequestId() string {
	if x != nil {
		return x.MerchantRequestId
	}
	return ""
}

func (x *StkTransaction) GetCheckoutRequestId() string {
	if x != nil {
		return x.CheckoutRequestId
	}
	return ""
}

func (x *StkTransaction) GetStkResponseDescription() string {
	if x != nil {
		return x.StkResponseDescription
	}
	return ""
}

func (x *StkTransaction) GetStkResponseCode() string {
	if x != nil {
		return x.StkResponseCode
	}
	return ""
}

func (x *StkTransaction) GetStkResultCode() string {
	if x != nil {
		return x.StkResultCode
	}
	return ""
}

func (x *StkTransaction) GetStkResultDesc() string {
	if x != nil {
		return x.StkResultDesc
	}
	return ""
}

func (x *StkTransaction) GetMpesaReceiptId() string {
	if x != nil {
		return x.MpesaReceiptId
	}
	return ""
}

func (x *StkTransaction) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *StkTransaction) GetStatus() StkStatus {
	if x != nil {
		return x.Status
	}
	return StkStatus_STK_STATUS_UNKNOWN
}

func (x *StkTransaction) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *StkTransaction) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *StkTransaction) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *StkTransaction) GetProcessed() bool {
	if x != nil {
		return x.Processed
	}
	return false
}

func (x *StkTransaction) GetTransactionTimestamp() int64 {
	if x != nil {
		return x.TransactionTimestamp
	}
	return 0
}

func (x *StkTransaction) GetCreateTimestamp() int64 {
	if x != nil {
		return x.CreateTimestamp
	}
	return 0
}

type PublishInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlyOnSuccess bool              `protobuf:"varint,1,opt,name=only_on_success,json=onlyOnSuccess,proto3" json:"only_on_success,omitempty"`
	ChannelName   string            `protobuf:"bytes,2,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
	Payload       map[string]string `protobuf:"bytes,3,rep,name=payload,proto3" json:"payload,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PublishInfo) Reset() {
	*x = PublishInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stk_v2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishInfo) ProtoMessage() {}

func (x *PublishInfo) ProtoReflect() protoreflect.Message {
	mi := &file_stk_v2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishInfo.ProtoReflect.Descriptor instead.
func (*PublishInfo) Descriptor() ([]byte, []int) {
	return file_stk_v2_proto_rawDescGZIP(), []int{1}
}

func (x *PublishInfo) GetOnlyOnSuccess() bool {
	if x != nil {
		return x.OnlyOnSuccess
	}
	return false
}

func (x *PublishInfo) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *PublishInfo) GetPayload() map[string]string {
	if x != nil {
		return x.Payload
	}
	return nil
}

type InitiateSTKPushRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitiatorId                   string       `protobuf:"bytes,1,opt,name=initiator_id,json=initiatorId,proto3" json:"initiator_id,omitempty"`
	InitiatorTransactionReference string       `protobuf:"bytes,2,opt,name=initiator_transaction_reference,json=initiatorTransactionReference,proto3" json:"initiator_transaction_reference,omitempty"`
	InitiatorCustomerReference    string       `protobuf:"bytes,3,opt,name=initiator_customer_reference,json=initiatorCustomerReference,proto3" json:"initiator_customer_reference,omitempty"`
	InitiatorCustomerNames        string       `protobuf:"bytes,4,opt,name=initiator_customer_names,json=initiatorCustomerNames,proto3" json:"initiator_customer_names,omitempty"`
	Phone                         string       `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	Amount                        float64      `protobuf:"fixed64,6,opt,name=amount,proto3" json:"amount,omitempty"`
	ShortCode                     string       `protobuf:"bytes,7,opt,name=short_code,json=shortCode,proto3" json:"short_code,omitempty"`
	AccountReference              string       `protobuf:"bytes,8,opt,name=account_reference,json=accountReference,proto3" json:"account_reference,omitempty"`
	TransactionDesc               string       `protobuf:"bytes,9,opt,name=transaction_desc,json=transactionDesc,proto3" json:"transaction_desc,omitempty"`
	Publish                       bool         `protobuf:"varint,10,opt,name=publish,proto3" json:"publish,omitempty"`
	PublishMessage                *PublishInfo `protobuf:"bytes,11,opt,name=publish_message,json=publishMessage,proto3" json:"publish_message,omitempty"`
}

func (x *InitiateSTKPushRequest) Reset() {
	*x = InitiateSTKPushRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stk_v2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitiateSTKPushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateSTKPushRequest) ProtoMessage() {}

func (x *InitiateSTKPushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stk_v2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateSTKPushRequest.ProtoReflect.Descriptor instead.
func (*InitiateSTKPushRequest) Descriptor() ([]byte, []int) {
	return file_stk_v2_proto_rawDescGZIP(), []int{2}
}

func (x *InitiateSTKPushRequest) GetInitiatorId() string {
	if x != nil {
		return x.InitiatorId
	}
	return ""
}

func (x *InitiateSTKPushRequest) GetInitiatorTransactionReference() string {
	if x != nil {
		return x.InitiatorTransactionReference
	}
	return ""
}

func (x *InitiateSTKPushRequest) GetInitiatorCustomerReference() string {
	if x != nil {
		return x.InitiatorCustomerReference
	}
	return ""
}

func (x *InitiateSTKPushRequest) GetInitiatorCustomerNames() string {
	if x != nil {
		return x.InitiatorCustomerNames
	}
	return ""
}

func (x *InitiateSTKPushRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *InitiateSTKPushRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *InitiateSTKPushRequest) GetShortCode() string {
	if x != nil {
		return x.ShortCode
	}
	return ""
}

func (x *InitiateSTKPushRequest) GetAccountReference() string {
	if x != nil {
		return x.AccountReference
	}
	return ""
}

func (x *InitiateSTKPushRequest) GetTransactionDesc() string {
	if x != nil {
		return x.TransactionDesc
	}
	return ""
}

func (x *InitiateSTKPushRequest) GetPublish() bool {
	if x != nil {
		return x.Publish
	}
	return false
}

func (x *InitiateSTKPushRequest) GetPublishMessage() *PublishInfo {
	if x != nil {
		return x.PublishMessage
	}
	return nil
}

type InitiateSTKPushResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Progress bool   `protobuf:"varint,1,opt,name=progress,proto3" json:"progress,omitempty"`
	Message  string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *InitiateSTKPushResponse) Reset() {
	*x = InitiateSTKPushResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stk_v2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitiateSTKPushResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateSTKPushResponse) ProtoMessage() {}

func (x *InitiateSTKPushResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stk_v2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateSTKPushResponse.ProtoReflect.Descriptor instead.
func (*InitiateSTKPushResponse) Descriptor() ([]byte, []int) {
	return file_stk_v2_proto_rawDescGZIP(), []int{3}
}

func (x *InitiateSTKPushResponse) GetProgress() bool {
	if x != nil {
		return x.Progress
	}
	return false
}

func (x *InitiateSTKPushResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetStkTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId  string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	MpesaReceiptId string `protobuf:"bytes,2,opt,name=mpesa_receipt_id,json=mpesaReceiptId,proto3" json:"mpesa_receipt_id,omitempty"`
}

func (x *GetStkTransactionRequest) Reset() {
	*x = GetStkTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stk_v2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStkTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStkTransactionRequest) ProtoMessage() {}

func (x *GetStkTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stk_v2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStkTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetStkTransactionRequest) Descriptor() ([]byte, []int) {
	return file_stk_v2_proto_rawDescGZIP(), []int{4}
}

func (x *GetStkTransactionRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *GetStkTransactionRequest) GetMpesaReceiptId() string {
	if x != nil {
		return x.MpesaReceiptId
	}
	return ""
}

type CreateStkTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload *StkTransaction `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Publish bool            `protobuf:"varint,2,opt,name=publish,proto3" json:"publish,omitempty"`
}

func (x *CreateStkTransactionRequest) Reset() {
	*x = CreateStkTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stk_v2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStkTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStkTransactionRequest) ProtoMessage() {}

func (x *CreateStkTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stk_v2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStkTransactionRequest.ProtoReflect.Descriptor instead.
func (*CreateStkTransactionRequest) Descriptor() ([]byte, []int) {
	return file_stk_v2_proto_rawDescGZIP(), []int{5}
}

func (x *CreateStkTransactionRequest) GetPayload() *StkTransaction {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *CreateStkTransactionRequest) GetPublish() bool {
	if x != nil {
		return x.Publish
	}
	return false
}

type ListStkTransactionFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxDate                         string            `protobuf:"bytes,1,opt,name=tx_date,json=txDate,proto3" json:"tx_date,omitempty"`
	Msisdns                        []string          `protobuf:"bytes,2,rep,name=msisdns,proto3" json:"msisdns,omitempty"`
	MpesaReceipts                  []string          `protobuf:"bytes,3,rep,name=mpesa_receipts,json=mpesaReceipts,proto3" json:"mpesa_receipts,omitempty"`
	InitiatorCustomerReferences    []string          `protobuf:"bytes,4,rep,name=initiator_customer_references,json=initiatorCustomerReferences,proto3" json:"initiator_customer_references,omitempty"`
	InitiatorTransactionReferences []string          `protobuf:"bytes,5,rep,name=initiator_transaction_references,json=initiatorTransactionReferences,proto3" json:"initiator_transaction_references,omitempty"`
	ShortCodes                     []string          `protobuf:"bytes,6,rep,name=short_codes,json=shortCodes,proto3" json:"short_codes,omitempty"`
	StkStatuses                    []StkStatus       `protobuf:"varint,7,rep,packed,name=stk_statuses,json=stkStatuses,proto3,enum=gidyon.mpesa.StkStatus" json:"stk_statuses,omitempty"`
	ProcessState                   StkProcessedState `protobuf:"varint,8,opt,name=process_state,json=processState,proto3,enum=gidyon.mpesa.StkProcessedState" json:"process_state,omitempty"`
	StartTimestamp                 int64             `protobuf:"varint,9,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	EndTimestamp                   int64             `protobuf:"varint,10,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	OrderField                     StkOrderField     `protobuf:"varint,11,opt,name=order_field,json=orderField,proto3,enum=gidyon.mpesa.StkOrderField" json:"order_field,omitempty"`
}

func (x *ListStkTransactionFilter) Reset() {
	*x = ListStkTransactionFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stk_v2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStkTransactionFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStkTransactionFilter) ProtoMessage() {}

func (x *ListStkTransactionFilter) ProtoReflect() protoreflect.Message {
	mi := &file_stk_v2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStkTransactionFilter.ProtoReflect.Descriptor instead.
func (*ListStkTransactionFilter) Descriptor() ([]byte, []int) {
	return file_stk_v2_proto_rawDescGZIP(), []int{6}
}

func (x *ListStkTransactionFilter) GetTxDate() string {
	if x != nil {
		return x.TxDate
	}
	return ""
}

func (x *ListStkTransactionFilter) GetMsisdns() []string {
	if x != nil {
		return x.Msisdns
	}
	return nil
}

func (x *ListStkTransactionFilter) GetMpesaReceipts() []string {
	if x != nil {
		return x.MpesaReceipts
	}
	return nil
}

func (x *ListStkTransactionFilter) GetInitiatorCustomerReferences() []string {
	if x != nil {
		return x.InitiatorCustomerReferences
	}
	return nil
}

func (x *ListStkTransactionFilter) GetInitiatorTransactionReferences() []string {
	if x != nil {
		return x.InitiatorTransactionReferences
	}
	return nil
}

func (x *ListStkTransactionFilter) GetShortCodes() []string {
	if x != nil {
		return x.ShortCodes
	}
	return nil
}

func (x *ListStkTransactionFilter) GetStkStatuses() []StkStatus {
	if x != nil {
		return x.StkStatuses
	}
	return nil
}

func (x *ListStkTransactionFilter) GetProcessState() StkProcessedState {
	if x != nil {
		return x.ProcessState
	}
	return StkProcessedState_STK_PROCESS_STATE_UNSPECIFIED
}

func (x *ListStkTransactionFilter) GetStartTimestamp() int64 {
	if x != nil {
		return x.StartTimestamp
	}
	return 0
}

func (x *ListStkTransactionFilter) GetEndTimestamp() int64 {
	if x != nil {
		return x.EndTimestamp
	}
	return 0
}

func (x *ListStkTransactionFilter) GetOrderField() StkOrderField {
	if x != nil {
		return x.OrderField
	}
	return StkOrderField_STK_ORDER_FIELD_UNSPECIFIED
}

type ListStkTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageToken string                    `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	PageSize  int32                     `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Filter    *ListStkTransactionFilter `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListStkTransactionsRequest) Reset() {
	*x = ListStkTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stk_v2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStkTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStkTransactionsRequest) ProtoMessage() {}

func (x *ListStkTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stk_v2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStkTransactionsRequest.ProtoReflect.Descriptor instead.
func (*ListStkTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_stk_v2_proto_rawDescGZIP(), []int{7}
}

func (x *ListStkTransactionsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListStkTransactionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListStkTransactionsRequest) GetFilter() *ListStkTransactionFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListStkTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextPageToken   string            `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	StkTransactions []*StkTransaction `protobuf:"bytes,2,rep,name=stk_transactions,json=stkTransactions,proto3" json:"stk_transactions,omitempty"`
	CollectionCount int64             `protobuf:"varint,3,opt,name=collection_count,json=collectionCount,proto3" json:"collection_count,omitempty"`
}

func (x *ListStkTransactionsResponse) Reset() {
	*x = ListStkTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stk_v2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStkTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStkTransactionsResponse) ProtoMessage() {}

func (x *ListStkTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stk_v2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStkTransactionsResponse.ProtoReflect.Descriptor instead.
func (*ListStkTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_stk_v2_proto_rawDescGZIP(), []int{8}
}

func (x *ListStkTransactionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListStkTransactionsResponse) GetStkTransactions() []*StkTransaction {
	if x != nil {
		return x.StkTransactions
	}
	return nil
}

func (x *ListStkTransactionsResponse) GetCollectionCount() int64 {
	if x != nil {
		return x.CollectionCount
	}
	return 0
}

type ProcessStkTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId  string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	MpesaReceiptId string `protobuf:"bytes,2,opt,name=mpesa_receipt_id,json=mpesaReceiptId,proto3" json:"mpesa_receipt_id,omitempty"`
	Processed      bool   `protobuf:"varint,3,opt,name=processed,proto3" json:"processed,omitempty"`
}

func (x *ProcessStkTransactionRequest) Reset() {
	*x = ProcessStkTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stk_v2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStkTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStkTransactionRequest) ProtoMessage() {}

func (x *ProcessStkTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stk_v2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStkTransactionRequest.ProtoReflect.Descriptor instead.
func (*ProcessStkTransactionRequest) Descriptor() ([]byte, []int) {
	return file_stk_v2_proto_rawDescGZIP(), []int{9}
}

func (x *ProcessStkTransactionRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *ProcessStkTransactionRequest) GetMpesaReceiptId() string {
	if x != nil {
		return x.MpesaReceiptId
	}
	return ""
}

func (x *ProcessStkTransactionRequest) GetProcessed() bool {
	if x != nil {
		return x.Processed
	}
	return false
}

type PublishStkTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishMessage *PublishMessage   `protobuf:"bytes,1,opt,name=publish_message,json=publishMessage,proto3" json:"publish_message,omitempty"`
	ProcessedState StkProcessedState `protobuf:"varint,2,opt,name=processed_state,json=processedState,proto3,enum=gidyon.mpesa.StkProcessedState" json:"processed_state,omitempty"`
}

func (x *PublishStkTransactionRequest) Reset() {
	*x = PublishStkTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stk_v2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishStkTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishStkTransactionRequest) ProtoMessage() {}

func (x *PublishStkTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stk_v2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishStkTransactionRequest.ProtoReflect.Descriptor instead.
func (*PublishStkTransactionRequest) Descriptor() ([]byte, []int) {
	return file_stk_v2_proto_rawDescGZIP(), []int{10}
}

func (x *PublishStkTransactionRequest) GetPublishMessage() *PublishMessage {
	if x != nil {
		return x.PublishMessage
	}
	return nil
}

func (x *PublishStkTransactionRequest) GetProcessedState() StkProcessedState {
	if x != nil {
		return x.ProcessedState
	}
	return StkProcessedState_STK_PROCESS_STATE_UNSPECIFIED
}

type PublishMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitiatorId     string          `protobuf:"bytes,1,opt,name=initiator_id,json=initiatorId,proto3" json:"initiator_id,omitempty"`
	TransactionId   string          `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	MpesaReceiptId  string          `protobuf:"bytes,3,opt,name=mpesa_receipt_id,json=mpesaReceiptId,proto3" json:"mpesa_receipt_id,omitempty"`
	PhoneNumber     string          `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	PublishInfo     *PublishInfo    `protobuf:"bytes,5,opt,name=publish_info,json=publishInfo,proto3" json:"publish_info,omitempty"`
	TransactionInfo *StkTransaction `protobuf:"bytes,6,opt,name=transaction_info,json=transactionInfo,proto3" json:"transaction_info,omitempty"`
}

func (x *PublishMessage) Reset() {
	*x = PublishMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stk_v2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishMessage) ProtoMessage() {}

func (x *PublishMessage) ProtoReflect() protoreflect.Message {
	mi := &file_stk_v2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishMessage.ProtoReflect.Descriptor instead.
func (*PublishMessage) Descriptor() ([]byte, []int) {
	return file_stk_v2_proto_rawDescGZIP(), []int{11}
}

func (x *PublishMessage) GetInitiatorId() string {
	if x != nil {
		return x.InitiatorId
	}
	return ""
}

func (x *PublishMessage) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *PublishMessage) GetMpesaReceiptId() string {
	if x != nil {
		return x.MpesaReceiptId
	}
	return ""
}

func (x *PublishMessage) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *PublishMessage) GetPublishInfo() *PublishInfo {
	if x != nil {
		return x.PublishInfo
	}
	return nil
}

func (x *PublishMessage) GetTransactionInfo() *StkTransaction {
	if x != nil {
		return x.TransactionInfo
	}
	return nil
}

var File_stk_v2_proto protoreflect.FileDescriptor

var file_stk_v2_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x74, 0x6b, 0x2e, 0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x75, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd3, 0x08, 0x0a, 0x0e, 0x53, 0x74, 0x6b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x1f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x1c,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38,
	0x0a, 0x18, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x74,
	0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x74,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x74, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x6b, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x6b, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x74, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x28, 0x0a, 0x10, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x70, 0x65, 0x73,
	0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70,
	0x65, 0x73, 0x61, 0x2e, 0x53, 0x74, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x3a, 0x30, 0x92, 0x41, 0x2d,
	0x0a, 0x2b, 0x2a, 0x0e, 0x53, 0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x32, 0x19, 0x53, 0x74, 0x6b, 0x20, 0x50, 0x75, 0x73, 0x68, 0x20, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x22, 0xd6, 0x01,
	0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a,
	0x0f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x6e, 0x6c, 0x79, 0x4f, 0x6e, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x69, 0x64, 0x79,
	0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x3a, 0x0a, 0x0c, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x96, 0x05, 0x0a, 0x16, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x53, 0x54, 0x4b, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x1f, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x40, 0x0a, 0x1c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x6f, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x19, 0x0a,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x11, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x12, 0x42, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x69, 0x64, 0x79,
	0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x3a, 0x79, 0x92, 0x41, 0x76, 0x0a, 0x74, 0x2a, 0x16, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x54, 0x4b, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x3a, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61,
	0x20, 0x53, 0x54, 0x4b, 0x20, 0x70, 0x75, 0x73, 0x68, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0xd2,
	0x01, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0xd2, 0x01, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x93, 0x01, 0x0a, 0x17, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x54, 0x4b, 0x50,
	0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x3a, 0x42, 0x92, 0x41, 0x3f, 0x0a, 0x3d, 0x2a, 0x17, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x53, 0x54, 0x4b, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x22, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x20, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x53, 0x54, 0x4b,
	0x20, 0x70, 0x75, 0x73, 0x68, 0x22, 0xc3, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x70, 0x65,
	0x73, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x49, 0x64, 0x3a, 0x56, 0x92, 0x41, 0x53, 0x0a, 0x51, 0x2a, 0x18, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x32, 0x24, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f,
	0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x73, 0x74, 0x6b, 0x20, 0x70, 0x75,
	0x73, 0x68, 0x20, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0xd2, 0x01, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x1b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x53, 0x74, 0x6b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x3a, 0x50, 0x92,
	0x41, 0x4d, 0x0a, 0x4b, 0x2a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0x22, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x20, 0x73, 0x74, 0x6b, 0x20, 0x70, 0x75, 0x73, 0x68, 0x20, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0xd2, 0x01, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0xfc, 0x04, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x78, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x1d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1b, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x20, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x1e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x74, 0x6b, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x69,
	0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x53, 0x74, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x73, 0x74, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f,
	0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x53, 0x74, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3c, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x67, 0x69, 0x64,
	0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x53, 0x74, 0x6b, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x3a, 0x49, 0x92, 0x41, 0x46, 0x0a, 0x44, 0x2a, 0x18, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x32, 0x28, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x69, 0x6e,
	0x67, 0x20, 0x73, 0x74, 0x6b, 0x20, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0xf2,
	0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x69, 0x64, 0x79,
	0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x58, 0x92, 0x41, 0x55, 0x0a, 0x53,
	0x2a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x35, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	0x66, 0x20, 0x73, 0x74, 0x6b, 0x20, 0x70, 0x75, 0x73, 0x68, 0x20, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x22, 0x93, 0x02, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x47, 0x0a, 0x10, 0x73,
	0x74, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d,
	0x70, 0x65, 0x73, 0x61, 0x2e, 0x53, 0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3a,
	0x58, 0x92, 0x41, 0x55, 0x0a, 0x53, 0x2a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0x34, 0x52, 0x65, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x74, 0x6b, 0x20, 0x70, 0x75, 0x73, 0x68,
	0x20, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x1c, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x70, 0x65,
	0x73, 0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x3a, 0x4f, 0x92, 0x41, 0x4c, 0x0a, 0x4a,
	0x2a, 0x1c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x2a,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x20, 0x73, 0x74, 0x6b, 0x20, 0x70, 0x75, 0x73, 0x68, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x1c, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70,
	0x65, 0x73, 0x61, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e,
	0x53, 0x74, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x3a, 0x4a, 0x92, 0x41, 0x47, 0x0a, 0x45, 0x2a, 0x1c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x53, 0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x25, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
	0x74, 0x6f, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x20, 0x61, 0x20, 0x73, 0x74, 0x6b,
	0x20, 0x70, 0x75, 0x73, 0x68, 0x20, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xe9, 0x02,
	0x0a, 0x0e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x70,
	0x65, 0x73, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x53,
	0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x39,
	0x92, 0x41, 0x36, 0x0a, 0x34, 0x2a, 0x0e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x22, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x20, 0x73, 0x74, 0x6b, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x74, 0x6f, 0x20,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x2a, 0xa5, 0x01, 0x0a, 0x09, 0x53, 0x74,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x4b, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x4b,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x4b, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x07, 0x2a, 0x61, 0x0a, 0x0d, 0x53, 0x74, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x4b, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41,
	0x4d, 0x50, 0x10, 0x02, 0x2a, 0x60, 0x0a, 0x11, 0x53, 0x74, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x4b,
	0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x54, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x54, 0x4b, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x45, 0x44, 0x10, 0x02, 0x32, 0xd3, 0x05, 0x0a, 0x09, 0x53, 0x74, 0x6b, 0x50, 0x75,
	0x73, 0x68, 0x56, 0x32, 0x12, 0x8d, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x53, 0x54, 0x4b, 0x50, 0x75, 0x73, 0x68, 0x12, 0x24, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f,
	0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x53, 0x54, 0x4b, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x54, 0x4b, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f,
	0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x73, 0x74,
	0x6b, 0x3a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x54, 0x4b, 0x50, 0x75, 0x73,
	0x68, 0x3a, 0x01, 0x2a, 0x12, 0x86, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x67, 0x69, 0x64,
	0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73,
	0x61, 0x2e, 0x53, 0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x73, 0x74, 0x6b, 0x2f, 0x7b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x86, 0x01,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d,
	0x70, 0x65, 0x73, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73,
	0x74, 0x78, 0x2f, 0x73, 0x74, 0x6b, 0x12, 0x90, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x28, 0x2f, 0x76,
	0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x73, 0x74, 0x6b,
	0x3a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x90, 0x01, 0x0a, 0x15, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65,
	0x73, 0x61, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x6b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22,
	0x28, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f,
	0x73, 0x74, 0x6b, 0x3a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x6b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x42, 0xe6, 0x03, 0x5a,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x64, 0x79,
	0x6f, 0x6e, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x6b, 0x2f, 0x76, 0x32, 0x92,
	0x41, 0xb2, 0x03, 0x12, 0x9e, 0x02, 0x0a, 0x11, 0x53, 0x54, 0x4b, 0x20, 0x4d, 0x70, 0x65, 0x73,
	0x61, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x41, 0x50, 0x49, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x53, 0x54,
	0x4b, 0x20, 0x70, 0x75, 0x73, 0x68, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x77, 0x0a,
	0x15, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x20, 0x3c, 0x47, 0x69, 0x64, 0x65, 0x6f, 0x6e, 0x20,
	0x4b, 0x61, 0x6d, 0x61, 0x75, 0x3e, 0x12, 0x47, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x64, 0x79, 0x6f,
	0x6e, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x15, 0x67, 0x69, 0x64, 0x65, 0x6f, 0x6e, 0x68, 0x61, 0x63, 0x65, 0x72, 0x40, 0x67, 0x6d, 0x61,
	0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2a, 0x58, 0x0a, 0x1a, 0x47, 0x4e, 0x55, 0x20, 0x47, 0x45,
	0x4e, 0x45, 0x52, 0x41, 0x4c, 0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x20, 0x4c, 0x49, 0x43,
	0x45, 0x4e, 0x53, 0x45, 0x12, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2f,
	0x6d, 0x70, 0x65, 0x73, 0x61, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x72,
	0x63, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45,
	0x32, 0x02, 0x76, 0x32, 0x2a, 0x02, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x59, 0x0a, 0x57,
	0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x4d, 0x08, 0x02, 0x12, 0x38, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20,
	0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x3a, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x20, 0x3c,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3e, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x62, 0x0c, 0x0a, 0x0a, 0x0a, 0x06, 0x62, 0x65, 0x61,
	0x72, 0x65, 0x72, 0x12, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stk_v2_proto_rawDescOnce sync.Once
	file_stk_v2_proto_rawDescData = file_stk_v2_proto_rawDesc
)

func file_stk_v2_proto_rawDescGZIP() []byte {
	file_stk_v2_proto_rawDescOnce.Do(func() {
		file_stk_v2_proto_rawDescData = protoimpl.X.CompressGZIP(file_stk_v2_proto_rawDescData)
	})
	return file_stk_v2_proto_rawDescData
}

var file_stk_v2_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_stk_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_stk_v2_proto_goTypes = []interface{}{
	(StkStatus)(0),                       // 0: gidyon.mpesa.StkStatus
	(StkOrderField)(0),                   // 1: gidyon.mpesa.StkOrderField
	(StkProcessedState)(0),               // 2: gidyon.mpesa.StkProcessedState
	(*StkTransaction)(nil),               // 3: gidyon.mpesa.StkTransaction
	(*PublishInfo)(nil),                  // 4: gidyon.mpesa.PublishInfo
	(*InitiateSTKPushRequest)(nil),       // 5: gidyon.mpesa.InitiateSTKPushRequest
	(*InitiateSTKPushResponse)(nil),      // 6: gidyon.mpesa.InitiateSTKPushResponse
	(*GetStkTransactionRequest)(nil),     // 7: gidyon.mpesa.GetStkTransactionRequest
	(*CreateStkTransactionRequest)(nil),  // 8: gidyon.mpesa.CreateStkTransactionRequest
	(*ListStkTransactionFilter)(nil),     // 9: gidyon.mpesa.ListStkTransactionFilter
	(*ListStkTransactionsRequest)(nil),   // 10: gidyon.mpesa.ListStkTransactionsRequest
	(*ListStkTransactionsResponse)(nil),  // 11: gidyon.mpesa.ListStkTransactionsResponse
	(*ProcessStkTransactionRequest)(nil), // 12: gidyon.mpesa.ProcessStkTransactionRequest
	(*PublishStkTransactionRequest)(nil), // 13: gidyon.mpesa.PublishStkTransactionRequest
	(*PublishMessage)(nil),               // 14: gidyon.mpesa.PublishMessage
	nil,                                  // 15: gidyon.mpesa.PublishInfo.PayloadEntry
	(*emptypb.Empty)(nil),                // 16: google.protobuf.Empty
}
var file_stk_v2_proto_depIdxs = []int32{
	0,  // 0: gidyon.mpesa.StkTransaction.status:type_name -> gidyon.mpesa.StkStatus
	15, // 1: gidyon.mpesa.PublishInfo.payload:type_name -> gidyon.mpesa.PublishInfo.PayloadEntry
	4,  // 2: gidyon.mpesa.InitiateSTKPushRequest.publish_message:type_name -> gidyon.mpesa.PublishInfo
	3,  // 3: gidyon.mpesa.CreateStkTransactionRequest.payload:type_name -> gidyon.mpesa.StkTransaction
	0,  // 4: gidyon.mpesa.ListStkTransactionFilter.stk_statuses:type_name -> gidyon.mpesa.StkStatus
	2,  // 5: gidyon.mpesa.ListStkTransactionFilter.process_state:type_name -> gidyon.mpesa.StkProcessedState
	1,  // 6: gidyon.mpesa.ListStkTransactionFilter.order_field:type_name -> gidyon.mpesa.StkOrderField
	9,  // 7: gidyon.mpesa.ListStkTransactionsRequest.filter:type_name -> gidyon.mpesa.ListStkTransactionFilter
	3,  // 8: gidyon.mpesa.ListStkTransactionsResponse.stk_transactions:type_name -> gidyon.mpesa.StkTransaction
	14, // 9: gidyon.mpesa.PublishStkTransactionRequest.publish_message:type_name -> gidyon.mpesa.PublishMessage
	2,  // 10: gidyon.mpesa.PublishStkTransactionRequest.processed_state:type_name -> gidyon.mpesa.StkProcessedState
	4,  // 11: gidyon.mpesa.PublishMessage.publish_info:type_name -> gidyon.mpesa.PublishInfo
	3,  // 12: gidyon.mpesa.PublishMessage.transaction_info:type_name -> gidyon.mpesa.StkTransaction
	5,  // 13: gidyon.mpesa.StkPushV2.InitiateSTKPush:input_type -> gidyon.mpesa.InitiateSTKPushRequest
	7,  // 14: gidyon.mpesa.StkPushV2.GetStkTransaction:input_type -> gidyon.mpesa.GetStkTransactionRequest
	10, // 15: gidyon.mpesa.StkPushV2.ListStkTransactions:input_type -> gidyon.mpesa.ListStkTransactionsRequest
	12, // 16: gidyon.mpesa.StkPushV2.ProcessStkTransaction:input_type -> gidyon.mpesa.ProcessStkTransactionRequest
	13, // 17: gidyon.mpesa.StkPushV2.PublishStkTransaction:input_type -> gidyon.mpesa.PublishStkTransactionRequest
	6,  // 18: gidyon.mpesa.StkPushV2.InitiateSTKPush:output_type -> gidyon.mpesa.InitiateSTKPushResponse
	3,  // 19: gidyon.mpesa.StkPushV2.GetStkTransaction:output_type -> gidyon.mpesa.StkTransaction
	11, // 20: gidyon.mpesa.StkPushV2.ListStkTransactions:output_type -> gidyon.mpesa.ListStkTransactionsResponse
	16, // 21: gidyon.mpesa.StkPushV2.ProcessStkTransaction:output_type -> google.protobuf.Empty
	16, // 22: gidyon.mpesa.StkPushV2.PublishStkTransaction:output_type -> google.protobuf.Empty
	18, // [18:23] is the sub-list for method output_type
	13, // [13:18] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_stk_v2_proto_init() }
func file_stk_v2_proto_init() {
	if File_stk_v2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stk_v2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StkTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stk_v2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stk_v2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitiateSTKPushRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stk_v2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitiateSTKPushResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stk_v2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStkTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stk_v2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStkTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stk_v2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStkTransactionFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stk_v2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStkTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stk_v2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStkTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stk_v2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessStkTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stk_v2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishStkTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stk_v2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stk_v2_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stk_v2_proto_goTypes,
		DependencyIndexes: file_stk_v2_proto_depIdxs,
		EnumInfos:         file_stk_v2_proto_enumTypes,
		MessageInfos:      file_stk_v2_proto_msgTypes,
	}.Build()
	File_stk_v2_proto = out.File
	file_stk_v2_proto_rawDesc = nil
	file_stk_v2_proto_goTypes = nil
	file_stk_v2_proto_depIdxs = nil
}
