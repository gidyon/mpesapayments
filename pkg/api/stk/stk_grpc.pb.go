// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package stk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StkPushAPIClient is the client API for StkPushAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StkPushAPIClient interface {
	// Initiates mpesa payment.
	InitiateSTKPush(ctx context.Context, in *InitiateSTKPushRequest, opts ...grpc.CallOption) (*InitiateSTKPushResponse, error)
	// Retrieves a single stk payload
	GetStkPayload(ctx context.Context, in *GetStkPayloadRequest, opts ...grpc.CallOption) (*StkPayload, error)
	// Creates a record of stk push response sent to callback
	CreateStkPayload(ctx context.Context, in *CreateStkPayloadRequest, opts ...grpc.CallOption) (*StkPayload, error)
	// Retrieves a collection of stk push payloads
	ListStkPayloads(ctx context.Context, in *ListStkPayloadsRequest, opts ...grpc.CallOption) (*ListStkPayloadsResponse, error)
	// Processes stk push payload updating its status
	ProcessStkPayload(ctx context.Context, in *ProcessStkPayloadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Publishes stk push payload for consumers
	PublishStkPayload(ctx context.Context, in *PublishStkPayloadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Publihses all stk push payloads to consumers
	PublishAllStkPayload(ctx context.Context, in *PublishAllStkPayloadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type stkPushAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewStkPushAPIClient(cc grpc.ClientConnInterface) StkPushAPIClient {
	return &stkPushAPIClient{cc}
}

func (c *stkPushAPIClient) InitiateSTKPush(ctx context.Context, in *InitiateSTKPushRequest, opts ...grpc.CallOption) (*InitiateSTKPushResponse, error) {
	out := new(InitiateSTKPushResponse)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.StkPushAPI/InitiateSTKPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stkPushAPIClient) GetStkPayload(ctx context.Context, in *GetStkPayloadRequest, opts ...grpc.CallOption) (*StkPayload, error) {
	out := new(StkPayload)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.StkPushAPI/GetStkPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stkPushAPIClient) CreateStkPayload(ctx context.Context, in *CreateStkPayloadRequest, opts ...grpc.CallOption) (*StkPayload, error) {
	out := new(StkPayload)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.StkPushAPI/CreateStkPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stkPushAPIClient) ListStkPayloads(ctx context.Context, in *ListStkPayloadsRequest, opts ...grpc.CallOption) (*ListStkPayloadsResponse, error) {
	out := new(ListStkPayloadsResponse)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.StkPushAPI/ListStkPayloads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stkPushAPIClient) ProcessStkPayload(ctx context.Context, in *ProcessStkPayloadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.StkPushAPI/ProcessStkPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stkPushAPIClient) PublishStkPayload(ctx context.Context, in *PublishStkPayloadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.StkPushAPI/PublishStkPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stkPushAPIClient) PublishAllStkPayload(ctx context.Context, in *PublishAllStkPayloadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.StkPushAPI/PublishAllStkPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StkPushAPIServer is the server API for StkPushAPI service.
// All implementations must embed UnimplementedStkPushAPIServer
// for forward compatibility
type StkPushAPIServer interface {
	// Initiates mpesa payment.
	InitiateSTKPush(context.Context, *InitiateSTKPushRequest) (*InitiateSTKPushResponse, error)
	// Retrieves a single stk payload
	GetStkPayload(context.Context, *GetStkPayloadRequest) (*StkPayload, error)
	// Creates a record of stk push response sent to callback
	CreateStkPayload(context.Context, *CreateStkPayloadRequest) (*StkPayload, error)
	// Retrieves a collection of stk push payloads
	ListStkPayloads(context.Context, *ListStkPayloadsRequest) (*ListStkPayloadsResponse, error)
	// Processes stk push payload updating its status
	ProcessStkPayload(context.Context, *ProcessStkPayloadRequest) (*emptypb.Empty, error)
	// Publishes stk push payload for consumers
	PublishStkPayload(context.Context, *PublishStkPayloadRequest) (*emptypb.Empty, error)
	// Publihses all stk push payloads to consumers
	PublishAllStkPayload(context.Context, *PublishAllStkPayloadRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedStkPushAPIServer()
}

// UnimplementedStkPushAPIServer must be embedded to have forward compatible implementations.
type UnimplementedStkPushAPIServer struct {
}

func (UnimplementedStkPushAPIServer) InitiateSTKPush(context.Context, *InitiateSTKPushRequest) (*InitiateSTKPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateSTKPush not implemented")
}
func (UnimplementedStkPushAPIServer) GetStkPayload(context.Context, *GetStkPayloadRequest) (*StkPayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStkPayload not implemented")
}
func (UnimplementedStkPushAPIServer) CreateStkPayload(context.Context, *CreateStkPayloadRequest) (*StkPayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStkPayload not implemented")
}
func (UnimplementedStkPushAPIServer) ListStkPayloads(context.Context, *ListStkPayloadsRequest) (*ListStkPayloadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStkPayloads not implemented")
}
func (UnimplementedStkPushAPIServer) ProcessStkPayload(context.Context, *ProcessStkPayloadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessStkPayload not implemented")
}
func (UnimplementedStkPushAPIServer) PublishStkPayload(context.Context, *PublishStkPayloadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishStkPayload not implemented")
}
func (UnimplementedStkPushAPIServer) PublishAllStkPayload(context.Context, *PublishAllStkPayloadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishAllStkPayload not implemented")
}
func (UnimplementedStkPushAPIServer) mustEmbedUnimplementedStkPushAPIServer() {}

// UnsafeStkPushAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StkPushAPIServer will
// result in compilation errors.
type UnsafeStkPushAPIServer interface {
	mustEmbedUnimplementedStkPushAPIServer()
}

func RegisterStkPushAPIServer(s grpc.ServiceRegistrar, srv StkPushAPIServer) {
	s.RegisterService(&_StkPushAPI_serviceDesc, srv)
}

func _StkPushAPI_InitiateSTKPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateSTKPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StkPushAPIServer).InitiateSTKPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.StkPushAPI/InitiateSTKPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StkPushAPIServer).InitiateSTKPush(ctx, req.(*InitiateSTKPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StkPushAPI_GetStkPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStkPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StkPushAPIServer).GetStkPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.StkPushAPI/GetStkPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StkPushAPIServer).GetStkPayload(ctx, req.(*GetStkPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StkPushAPI_CreateStkPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStkPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StkPushAPIServer).CreateStkPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.StkPushAPI/CreateStkPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StkPushAPIServer).CreateStkPayload(ctx, req.(*CreateStkPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StkPushAPI_ListStkPayloads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStkPayloadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StkPushAPIServer).ListStkPayloads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.StkPushAPI/ListStkPayloads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StkPushAPIServer).ListStkPayloads(ctx, req.(*ListStkPayloadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StkPushAPI_ProcessStkPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessStkPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StkPushAPIServer).ProcessStkPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.StkPushAPI/ProcessStkPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StkPushAPIServer).ProcessStkPayload(ctx, req.(*ProcessStkPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StkPushAPI_PublishStkPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishStkPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StkPushAPIServer).PublishStkPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.StkPushAPI/PublishStkPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StkPushAPIServer).PublishStkPayload(ctx, req.(*PublishStkPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StkPushAPI_PublishAllStkPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishAllStkPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StkPushAPIServer).PublishAllStkPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.StkPushAPI/PublishAllStkPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StkPushAPIServer).PublishAllStkPayload(ctx, req.(*PublishAllStkPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StkPushAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gidyon.mpesa.StkPushAPI",
	HandlerType: (*StkPushAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitiateSTKPush",
			Handler:    _StkPushAPI_InitiateSTKPush_Handler,
		},
		{
			MethodName: "GetStkPayload",
			Handler:    _StkPushAPI_GetStkPayload_Handler,
		},
		{
			MethodName: "CreateStkPayload",
			Handler:    _StkPushAPI_CreateStkPayload_Handler,
		},
		{
			MethodName: "ListStkPayloads",
			Handler:    _StkPushAPI_ListStkPayloads_Handler,
		},
		{
			MethodName: "ProcessStkPayload",
			Handler:    _StkPushAPI_ProcessStkPayload_Handler,
		},
		{
			MethodName: "PublishStkPayload",
			Handler:    _StkPushAPI_PublishStkPayload_Handler,
		},
		{
			MethodName: "PublishAllStkPayload",
			Handler:    _StkPushAPI_PublishAllStkPayload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stk.proto",
}
