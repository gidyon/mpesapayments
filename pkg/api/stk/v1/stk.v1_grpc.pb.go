// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StkPushAPIClient is the client API for StkPushAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StkPushAPIClient interface {
	// Initiates mpesa payment.
	InitiateSTKPush(ctx context.Context, in *InitiateSTKPushRequest, opts ...grpc.CallOption) (*InitiateSTKPushResponse, error)
	// Retrieves a single stk payload
	GetStkTransaction(ctx context.Context, in *GetStkTransactionRequest, opts ...grpc.CallOption) (*StkTransaction, error)
	// Creates a record of stk push response sent to callback
	CreateStkTransaction(ctx context.Context, in *CreateStkTransactionRequest, opts ...grpc.CallOption) (*StkTransaction, error)
	// Retrieves a collection of stk push payloads
	ListStkTransactions(ctx context.Context, in *ListStkTransactionsRequest, opts ...grpc.CallOption) (*ListStkTransactionsResponse, error)
	// Processes stk push payload updating its status
	ProcessStkTransaction(ctx context.Context, in *ProcessStkTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Publishes stk push payload for consumers
	PublishStkTransaction(ctx context.Context, in *PublishStkTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type stkPushAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewStkPushAPIClient(cc grpc.ClientConnInterface) StkPushAPIClient {
	return &stkPushAPIClient{cc}
}

func (c *stkPushAPIClient) InitiateSTKPush(ctx context.Context, in *InitiateSTKPushRequest, opts ...grpc.CallOption) (*InitiateSTKPushResponse, error) {
	out := new(InitiateSTKPushResponse)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.StkPushAPI/InitiateSTKPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stkPushAPIClient) GetStkTransaction(ctx context.Context, in *GetStkTransactionRequest, opts ...grpc.CallOption) (*StkTransaction, error) {
	out := new(StkTransaction)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.StkPushAPI/GetStkTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stkPushAPIClient) CreateStkTransaction(ctx context.Context, in *CreateStkTransactionRequest, opts ...grpc.CallOption) (*StkTransaction, error) {
	out := new(StkTransaction)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.StkPushAPI/CreateStkTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stkPushAPIClient) ListStkTransactions(ctx context.Context, in *ListStkTransactionsRequest, opts ...grpc.CallOption) (*ListStkTransactionsResponse, error) {
	out := new(ListStkTransactionsResponse)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.StkPushAPI/ListStkTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stkPushAPIClient) ProcessStkTransaction(ctx context.Context, in *ProcessStkTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.StkPushAPI/ProcessStkTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stkPushAPIClient) PublishStkTransaction(ctx context.Context, in *PublishStkTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.StkPushAPI/PublishStkTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StkPushAPIServer is the server API for StkPushAPI service.
// All implementations must embed UnimplementedStkPushAPIServer
// for forward compatibility
type StkPushAPIServer interface {
	// Initiates mpesa payment.
	InitiateSTKPush(context.Context, *InitiateSTKPushRequest) (*InitiateSTKPushResponse, error)
	// Retrieves a single stk payload
	GetStkTransaction(context.Context, *GetStkTransactionRequest) (*StkTransaction, error)
	// Creates a record of stk push response sent to callback
	CreateStkTransaction(context.Context, *CreateStkTransactionRequest) (*StkTransaction, error)
	// Retrieves a collection of stk push payloads
	ListStkTransactions(context.Context, *ListStkTransactionsRequest) (*ListStkTransactionsResponse, error)
	// Processes stk push payload updating its status
	ProcessStkTransaction(context.Context, *ProcessStkTransactionRequest) (*emptypb.Empty, error)
	// Publishes stk push payload for consumers
	PublishStkTransaction(context.Context, *PublishStkTransactionRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedStkPushAPIServer()
}

// UnimplementedStkPushAPIServer must be embedded to have forward compatible implementations.
type UnimplementedStkPushAPIServer struct {
}

func (UnimplementedStkPushAPIServer) InitiateSTKPush(context.Context, *InitiateSTKPushRequest) (*InitiateSTKPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateSTKPush not implemented")
}
func (UnimplementedStkPushAPIServer) GetStkTransaction(context.Context, *GetStkTransactionRequest) (*StkTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStkTransaction not implemented")
}
func (UnimplementedStkPushAPIServer) CreateStkTransaction(context.Context, *CreateStkTransactionRequest) (*StkTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStkTransaction not implemented")
}
func (UnimplementedStkPushAPIServer) ListStkTransactions(context.Context, *ListStkTransactionsRequest) (*ListStkTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStkTransactions not implemented")
}
func (UnimplementedStkPushAPIServer) ProcessStkTransaction(context.Context, *ProcessStkTransactionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessStkTransaction not implemented")
}
func (UnimplementedStkPushAPIServer) PublishStkTransaction(context.Context, *PublishStkTransactionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishStkTransaction not implemented")
}
func (UnimplementedStkPushAPIServer) mustEmbedUnimplementedStkPushAPIServer() {}

// UnsafeStkPushAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StkPushAPIServer will
// result in compilation errors.
type UnsafeStkPushAPIServer interface {
	mustEmbedUnimplementedStkPushAPIServer()
}

func RegisterStkPushAPIServer(s grpc.ServiceRegistrar, srv StkPushAPIServer) {
	s.RegisterService(&_StkPushAPI_serviceDesc, srv)
}

func _StkPushAPI_InitiateSTKPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateSTKPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StkPushAPIServer).InitiateSTKPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.StkPushAPI/InitiateSTKPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StkPushAPIServer).InitiateSTKPush(ctx, req.(*InitiateSTKPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StkPushAPI_GetStkTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStkTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StkPushAPIServer).GetStkTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.StkPushAPI/GetStkTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StkPushAPIServer).GetStkTransaction(ctx, req.(*GetStkTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StkPushAPI_CreateStkTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStkTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StkPushAPIServer).CreateStkTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.StkPushAPI/CreateStkTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StkPushAPIServer).CreateStkTransaction(ctx, req.(*CreateStkTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StkPushAPI_ListStkTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStkTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StkPushAPIServer).ListStkTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.StkPushAPI/ListStkTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StkPushAPIServer).ListStkTransactions(ctx, req.(*ListStkTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StkPushAPI_ProcessStkTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessStkTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StkPushAPIServer).ProcessStkTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.StkPushAPI/ProcessStkTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StkPushAPIServer).ProcessStkTransaction(ctx, req.(*ProcessStkTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StkPushAPI_PublishStkTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishStkTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StkPushAPIServer).PublishStkTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.StkPushAPI/PublishStkTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StkPushAPIServer).PublishStkTransaction(ctx, req.(*PublishStkTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StkPushAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gidyon.mpesa.StkPushAPI",
	HandlerType: (*StkPushAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitiateSTKPush",
			Handler:    _StkPushAPI_InitiateSTKPush_Handler,
		},
		{
			MethodName: "GetStkTransaction",
			Handler:    _StkPushAPI_GetStkTransaction_Handler,
		},
		{
			MethodName: "CreateStkTransaction",
			Handler:    _StkPushAPI_CreateStkTransaction_Handler,
		},
		{
			MethodName: "ListStkTransactions",
			Handler:    _StkPushAPI_ListStkTransactions_Handler,
		},
		{
			MethodName: "ProcessStkTransaction",
			Handler:    _StkPushAPI_ProcessStkTransaction_Handler,
		},
		{
			MethodName: "PublishStkTransaction",
			Handler:    _StkPushAPI_PublishStkTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stk.v1.proto",
}
