// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.4
// source: stk.proto

package stk

import (
	context "context"
	mpesapayment "github.com/gidyon/mpesapayments/pkg/api/mpesapayment"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StkPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayloadId          string `protobuf:"bytes,1,opt,name=payload_id,json=payloadId,proto3" json:"payload_id,omitempty"`
	MerchantRequestId  string `protobuf:"bytes,2,opt,name=merchant_request_id,json=merchantRequestId,proto3" json:"merchant_request_id,omitempty"`
	CheckoutRequestId  string `protobuf:"bytes,3,opt,name=checkout_request_id,json=checkoutRequestId,proto3" json:"checkout_request_id,omitempty"`
	ResultCode         string `protobuf:"bytes,4,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`
	ResultDesc         string `protobuf:"bytes,5,opt,name=result_desc,json=resultDesc,proto3" json:"result_desc,omitempty"`
	Amount             string `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
	MpesaReceiptNumber string `protobuf:"bytes,7,opt,name=mpesa_receipt_number,json=mpesaReceiptNumber,proto3" json:"mpesa_receipt_number,omitempty"`
	Balance            string `protobuf:"bytes,8,opt,name=balance,proto3" json:"balance,omitempty"`
	TransactionDate    string `protobuf:"bytes,9,opt,name=transaction_date,json=transactionDate,proto3" json:"transaction_date,omitempty"`
	PhoneNumber        string `protobuf:"bytes,10,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Succeeded          bool   `protobuf:"varint,11,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
	Processed          bool   `protobuf:"varint,12,opt,name=processed,proto3" json:"processed,omitempty"`
}

func (x *StkPayload) Reset() {
	*x = StkPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stk_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StkPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StkPayload) ProtoMessage() {}

func (x *StkPayload) ProtoReflect() protoreflect.Message {
	mi := &file_stk_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StkPayload.ProtoReflect.Descriptor instead.
func (*StkPayload) Descriptor() ([]byte, []int) {
	return file_stk_proto_rawDescGZIP(), []int{0}
}

func (x *StkPayload) GetPayloadId() string {
	if x != nil {
		return x.PayloadId
	}
	return ""
}

func (x *StkPayload) GetMerchantRequestId() string {
	if x != nil {
		return x.MerchantRequestId
	}
	return ""
}

func (x *StkPayload) GetCheckoutRequestId() string {
	if x != nil {
		return x.CheckoutRequestId
	}
	return ""
}

func (x *StkPayload) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *StkPayload) GetResultDesc() string {
	if x != nil {
		return x.ResultDesc
	}
	return ""
}

func (x *StkPayload) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *StkPayload) GetMpesaReceiptNumber() string {
	if x != nil {
		return x.MpesaReceiptNumber
	}
	return ""
}

func (x *StkPayload) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *StkPayload) GetTransactionDate() string {
	if x != nil {
		return x.TransactionDate
	}
	return ""
}

func (x *StkPayload) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *StkPayload) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

func (x *StkPayload) GetProcessed() bool {
	if x != nil {
		return x.Processed
	}
	return false
}

type InitiateSTKPushRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaidService string  `protobuf:"bytes,1,opt,name=paid_service,json=paidService,proto3" json:"paid_service,omitempty"`
	InitiatorId string  `protobuf:"bytes,2,opt,name=initiator_id,json=initiatorId,proto3" json:"initiator_id,omitempty"`
	Phone       string  `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Amount      float64 `protobuf:"fixed64,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *InitiateSTKPushRequest) Reset() {
	*x = InitiateSTKPushRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stk_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitiateSTKPushRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateSTKPushRequest) ProtoMessage() {}

func (x *InitiateSTKPushRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stk_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateSTKPushRequest.ProtoReflect.Descriptor instead.
func (*InitiateSTKPushRequest) Descriptor() ([]byte, []int) {
	return file_stk_proto_rawDescGZIP(), []int{1}
}

func (x *InitiateSTKPushRequest) GetPaidService() string {
	if x != nil {
		return x.PaidService
	}
	return ""
}

func (x *InitiateSTKPushRequest) GetInitiatorId() string {
	if x != nil {
		return x.InitiatorId
	}
	return ""
}

func (x *InitiateSTKPushRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *InitiateSTKPushRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type InitiateSTKPushResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Progress bool   `protobuf:"varint,1,opt,name=progress,proto3" json:"progress,omitempty"`
	Message  string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *InitiateSTKPushResponse) Reset() {
	*x = InitiateSTKPushResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stk_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitiateSTKPushResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiateSTKPushResponse) ProtoMessage() {}

func (x *InitiateSTKPushResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stk_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiateSTKPushResponse.ProtoReflect.Descriptor instead.
func (*InitiateSTKPushResponse) Descriptor() ([]byte, []int) {
	return file_stk_proto_rawDescGZIP(), []int{2}
}

func (x *InitiateSTKPushResponse) GetProgress() bool {
	if x != nil {
		return x.Progress
	}
	return false
}

func (x *InitiateSTKPushResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetStkPayloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayloadId string `protobuf:"bytes,1,opt,name=payload_id,json=payloadId,proto3" json:"payload_id,omitempty"`
}

func (x *GetStkPayloadRequest) Reset() {
	*x = GetStkPayloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stk_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStkPayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStkPayloadRequest) ProtoMessage() {}

func (x *GetStkPayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stk_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStkPayloadRequest.ProtoReflect.Descriptor instead.
func (*GetStkPayloadRequest) Descriptor() ([]byte, []int) {
	return file_stk_proto_rawDescGZIP(), []int{3}
}

func (x *GetStkPayloadRequest) GetPayloadId() string {
	if x != nil {
		return x.PayloadId
	}
	return ""
}

type CreateStkPayloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload *StkPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CreateStkPayloadRequest) Reset() {
	*x = CreateStkPayloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stk_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStkPayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStkPayloadRequest) ProtoMessage() {}

func (x *CreateStkPayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stk_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStkPayloadRequest.ProtoReflect.Descriptor instead.
func (*CreateStkPayloadRequest) Descriptor() ([]byte, []int) {
	return file_stk_proto_rawDescGZIP(), []int{4}
}

func (x *CreateStkPayloadRequest) GetPayload() *StkPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

type ListStkPayloadFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxDate       string                      `protobuf:"bytes,1,opt,name=tx_date,json=txDate,proto3" json:"tx_date,omitempty"`
	Msisdns      []string                    `protobuf:"bytes,2,rep,name=msisdns,proto3" json:"msisdns,omitempty"`
	ProcessState mpesapayment.ProcessedState `protobuf:"varint,3,opt,name=process_state,json=processState,proto3,enum=gidyon.mpesa.ProcessedState" json:"process_state,omitempty"`
}

func (x *ListStkPayloadFilter) Reset() {
	*x = ListStkPayloadFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stk_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStkPayloadFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStkPayloadFilter) ProtoMessage() {}

func (x *ListStkPayloadFilter) ProtoReflect() protoreflect.Message {
	mi := &file_stk_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStkPayloadFilter.ProtoReflect.Descriptor instead.
func (*ListStkPayloadFilter) Descriptor() ([]byte, []int) {
	return file_stk_proto_rawDescGZIP(), []int{5}
}

func (x *ListStkPayloadFilter) GetTxDate() string {
	if x != nil {
		return x.TxDate
	}
	return ""
}

func (x *ListStkPayloadFilter) GetMsisdns() []string {
	if x != nil {
		return x.Msisdns
	}
	return nil
}

func (x *ListStkPayloadFilter) GetProcessState() mpesapayment.ProcessedState {
	if x != nil {
		return x.ProcessState
	}
	return mpesapayment.ProcessedState_PROCESS_STATE_UNSPECIFIED
}

type ListStkPayloadsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageToken string                `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	PageSize  int32                 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Filter    *ListStkPayloadFilter `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListStkPayloadsRequest) Reset() {
	*x = ListStkPayloadsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stk_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStkPayloadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStkPayloadsRequest) ProtoMessage() {}

func (x *ListStkPayloadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stk_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStkPayloadsRequest.ProtoReflect.Descriptor instead.
func (*ListStkPayloadsRequest) Descriptor() ([]byte, []int) {
	return file_stk_proto_rawDescGZIP(), []int{6}
}

func (x *ListStkPayloadsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListStkPayloadsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListStkPayloadsRequest) GetFilter() *ListStkPayloadFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListStkPayloadsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextPageToken string        `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	StkPayloads   []*StkPayload `protobuf:"bytes,2,rep,name=stk_payloads,json=stkPayloads,proto3" json:"stk_payloads,omitempty"`
}

func (x *ListStkPayloadsResponse) Reset() {
	*x = ListStkPayloadsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stk_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStkPayloadsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStkPayloadsResponse) ProtoMessage() {}

func (x *ListStkPayloadsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stk_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStkPayloadsResponse.ProtoReflect.Descriptor instead.
func (*ListStkPayloadsResponse) Descriptor() ([]byte, []int) {
	return file_stk_proto_rawDescGZIP(), []int{7}
}

func (x *ListStkPayloadsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListStkPayloadsResponse) GetStkPayloads() []*StkPayload {
	if x != nil {
		return x.StkPayloads
	}
	return nil
}

type ProcessStkPayloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayloadId string `protobuf:"bytes,1,opt,name=payload_id,json=payloadId,proto3" json:"payload_id,omitempty"`
	Processed bool   `protobuf:"varint,2,opt,name=processed,proto3" json:"processed,omitempty"`
}

func (x *ProcessStkPayloadRequest) Reset() {
	*x = ProcessStkPayloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stk_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessStkPayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessStkPayloadRequest) ProtoMessage() {}

func (x *ProcessStkPayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stk_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessStkPayloadRequest.ProtoReflect.Descriptor instead.
func (*ProcessStkPayloadRequest) Descriptor() ([]byte, []int) {
	return file_stk_proto_rawDescGZIP(), []int{8}
}

func (x *ProcessStkPayloadRequest) GetPayloadId() string {
	if x != nil {
		return x.PayloadId
	}
	return ""
}

func (x *ProcessStkPayloadRequest) GetProcessed() bool {
	if x != nil {
		return x.Processed
	}
	return false
}

type PublishStkPayloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayloadId      string                      `protobuf:"bytes,1,opt,name=payload_id,json=payloadId,proto3" json:"payload_id,omitempty"`
	InitiatorId    string                      `protobuf:"bytes,2,opt,name=initiator_id,json=initiatorId,proto3" json:"initiator_id,omitempty"`
	ProcessedState mpesapayment.ProcessedState `protobuf:"varint,3,opt,name=processed_state,json=processedState,proto3,enum=gidyon.mpesa.ProcessedState" json:"processed_state,omitempty"`
}

func (x *PublishStkPayloadRequest) Reset() {
	*x = PublishStkPayloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stk_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishStkPayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishStkPayloadRequest) ProtoMessage() {}

func (x *PublishStkPayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stk_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishStkPayloadRequest.ProtoReflect.Descriptor instead.
func (*PublishStkPayloadRequest) Descriptor() ([]byte, []int) {
	return file_stk_proto_rawDescGZIP(), []int{9}
}

func (x *PublishStkPayloadRequest) GetPayloadId() string {
	if x != nil {
		return x.PayloadId
	}
	return ""
}

func (x *PublishStkPayloadRequest) GetInitiatorId() string {
	if x != nil {
		return x.InitiatorId
	}
	return ""
}

func (x *PublishStkPayloadRequest) GetProcessedState() mpesapayment.ProcessedState {
	if x != nil {
		return x.ProcessedState
	}
	return mpesapayment.ProcessedState_PROCESS_STATE_UNSPECIFIED
}

type PublishAllStkPayloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SinceTimeSeconds int64                       `protobuf:"varint,1,opt,name=since_time_seconds,json=sinceTimeSeconds,proto3" json:"since_time_seconds,omitempty"`
	ProcessedState   mpesapayment.ProcessedState `protobuf:"varint,2,opt,name=processed_state,json=processedState,proto3,enum=gidyon.mpesa.ProcessedState" json:"processed_state,omitempty"`
}

func (x *PublishAllStkPayloadRequest) Reset() {
	*x = PublishAllStkPayloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stk_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishAllStkPayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishAllStkPayloadRequest) ProtoMessage() {}

func (x *PublishAllStkPayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stk_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishAllStkPayloadRequest.ProtoReflect.Descriptor instead.
func (*PublishAllStkPayloadRequest) Descriptor() ([]byte, []int) {
	return file_stk_proto_rawDescGZIP(), []int{10}
}

func (x *PublishAllStkPayloadRequest) GetSinceTimeSeconds() int64 {
	if x != nil {
		return x.SinceTimeSeconds
	}
	return 0
}

func (x *PublishAllStkPayloadRequest) GetProcessedState() mpesapayment.ProcessedState {
	if x != nil {
		return x.ProcessedState
	}
	return mpesapayment.ProcessedState_PROCESS_STATE_UNSPECIFIED
}

var File_stk_proto protoreflect.FileDescriptor

var file_stk_proto_rawDesc = []byte{
	0x0a, 0x09, 0x73, 0x74, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x67, 0x69, 0x64,
	0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x5f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x03, 0x0a, 0x0a, 0x53, 0x74,
	0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x3a, 0x2c, 0x92, 0x41, 0x29, 0x0a, 0x27, 0x2a, 0x0a,
	0x53, 0x74, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x32, 0x19, 0x53, 0x74, 0x6b, 0x20,
	0x50, 0x75, 0x73, 0x68, 0x20, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x63, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x9b, 0x02, 0x0a, 0x16, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x74, 0x65, 0x53, 0x54, 0x4b, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x0c, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x70, 0x61, 0x69,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x79, 0x92, 0x41, 0x76, 0x0a, 0x74, 0x2a,
	0x16, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x54, 0x4b, 0x50, 0x75, 0x73, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x3a, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x73, 0x20, 0x61, 0x20, 0x53, 0x54, 0x4b, 0x20, 0x70, 0x75, 0x73, 0x68, 0x20, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x20, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0xd2, 0x01, 0x0c, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0xd2, 0x01, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0xd2, 0x01, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x17, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x53, 0x54, 0x4b, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x42, 0x92, 0x41, 0x3f, 0x0a, 0x3d, 0x2a, 0x17, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x54, 0x4b, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x22, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x20, 0x53, 0x54, 0x4b, 0x20, 0x70, 0x75, 0x73, 0x68, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x64, 0x3a, 0x4e, 0x92, 0x41, 0x4b, 0x0a, 0x49, 0x2a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6b,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x24,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x20, 0x73, 0x74, 0x6b, 0x20, 0x70, 0x75, 0x73, 0x68, 0x20, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0xd2, 0x01, 0x0a, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69,
	0x64, 0x22, 0x9b, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6b, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x53, 0x74,
	0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x3a, 0x4c, 0x92, 0x41, 0x49, 0x0a, 0x47, 0x2a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0x22, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x20, 0x73, 0x74, 0x6b, 0x20, 0x70, 0x75, 0x73, 0x68, 0x20, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0xd2, 0x01, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0xd3, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73,
	0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x45,
	0x92, 0x41, 0x42, 0x0a, 0x40, 0x2a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6b, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x32, 0x28, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x20, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x74, 0x6b, 0x20, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3a, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x54, 0x92, 0x41, 0x51, 0x0a, 0x4f, 0x2a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x35, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x61, 0x20, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x74, 0x6b,
	0x20, 0x70, 0x75, 0x73, 0x68, 0x20, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0xd4,
	0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x6b, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f,
	0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x53, 0x74, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x0b, 0x73, 0x74, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x3a,
	0x54, 0x92, 0x41, 0x51, 0x0a, 0x4f, 0x2a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6b, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x34, 0x52, 0x65, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6f, 0x66, 0x20, 0x73, 0x74, 0x6b, 0x20, 0x70, 0x75, 0x73, 0x68, 0x20, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x3a,
	0x4b, 0x92, 0x41, 0x48, 0x0a, 0x46, 0x2a, 0x18, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53,
	0x74, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x32, 0x2a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x20, 0x73, 0x74, 0x6b, 0x20, 0x70, 0x75, 0x73, 0x68, 0x20, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xeb, 0x01, 0x0a,
	0x18, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70,
	0x65, 0x73, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x3a, 0x46, 0x92, 0x41, 0x43, 0x0a, 0x41, 0x2a, 0x18, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x53, 0x74, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x25, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x20, 0x61, 0x20, 0x73, 0x74, 0x6b, 0x20, 0x70, 0x75,
	0x73, 0x68, 0x20, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xe0, 0x01, 0x0a, 0x1b, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x6b, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a,
	0x4c, 0x92, 0x41, 0x49, 0x0a, 0x47, 0x2a, 0x1b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41,
	0x6c, 0x6c, 0x53, 0x74, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x28, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x73, 0x74, 0x6b, 0x20,
	0x70, 0x75, 0x73, 0x68, 0x20, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x32, 0xf9, 0x06,
	0x0a, 0x0a, 0x53, 0x74, 0x6b, 0x50, 0x75, 0x73, 0x68, 0x41, 0x50, 0x49, 0x12, 0x87, 0x01, 0x0a,
	0x0f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x54, 0x4b, 0x50, 0x75, 0x73, 0x68,
	0x12, 0x24, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x54, 0x4b, 0x50, 0x75, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e,
	0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x53, 0x54,
	0x4b, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73,
	0x74, 0x78, 0x2f, 0x73, 0x74, 0x6b, 0x70, 0x75, 0x73, 0x68, 0x3a, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x77, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6b,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x22, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e,
	0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6b, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x69,
	0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x53, 0x74, 0x6b, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x73, 0x74, 0x6b, 0x70, 0x75,
	0x73, 0x68, 0x2f, 0x7b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x12,
	0x73, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6b, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x25, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65,
	0x73, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6b, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x69, 0x64,
	0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x53, 0x74, 0x6b, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x73, 0x74, 0x6b, 0x70, 0x75, 0x73,
	0x68, 0x3a, 0x01, 0x2a, 0x12, 0x7b, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6b, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x24, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e,
	0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6b, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x73, 0x74, 0x6b, 0x70, 0x75, 0x73,
	0x68, 0x12, 0x78, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x6b, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x26, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e,
	0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x6b,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x73, 0x74, 0x6b, 0x70,
	0x75, 0x73, 0x68, 0x3a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x78, 0x0a, 0x11, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x26, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x73, 0x74, 0x6b, 0x70, 0x75, 0x73, 0x68, 0x3a, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x29,
	0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x73, 0x74, 0x6b, 0x70, 0x75, 0x73, 0x68, 0x3a, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2f, 0x6d,
	0x70, 0x65, 0x73, 0x61, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stk_proto_rawDescOnce sync.Once
	file_stk_proto_rawDescData = file_stk_proto_rawDesc
)

func file_stk_proto_rawDescGZIP() []byte {
	file_stk_proto_rawDescOnce.Do(func() {
		file_stk_proto_rawDescData = protoimpl.X.CompressGZIP(file_stk_proto_rawDescData)
	})
	return file_stk_proto_rawDescData
}

var file_stk_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_stk_proto_goTypes = []interface{}{
	(*StkPayload)(nil),                  // 0: gidyon.mpesa.StkPayload
	(*InitiateSTKPushRequest)(nil),      // 1: gidyon.mpesa.InitiateSTKPushRequest
	(*InitiateSTKPushResponse)(nil),     // 2: gidyon.mpesa.InitiateSTKPushResponse
	(*GetStkPayloadRequest)(nil),        // 3: gidyon.mpesa.GetStkPayloadRequest
	(*CreateStkPayloadRequest)(nil),     // 4: gidyon.mpesa.CreateStkPayloadRequest
	(*ListStkPayloadFilter)(nil),        // 5: gidyon.mpesa.ListStkPayloadFilter
	(*ListStkPayloadsRequest)(nil),      // 6: gidyon.mpesa.ListStkPayloadsRequest
	(*ListStkPayloadsResponse)(nil),     // 7: gidyon.mpesa.ListStkPayloadsResponse
	(*ProcessStkPayloadRequest)(nil),    // 8: gidyon.mpesa.ProcessStkPayloadRequest
	(*PublishStkPayloadRequest)(nil),    // 9: gidyon.mpesa.PublishStkPayloadRequest
	(*PublishAllStkPayloadRequest)(nil), // 10: gidyon.mpesa.PublishAllStkPayloadRequest
	(mpesapayment.ProcessedState)(0),    // 11: gidyon.mpesa.ProcessedState
	(*empty.Empty)(nil),                 // 12: google.protobuf.Empty
}
var file_stk_proto_depIdxs = []int32{
	0,  // 0: gidyon.mpesa.CreateStkPayloadRequest.payload:type_name -> gidyon.mpesa.StkPayload
	11, // 1: gidyon.mpesa.ListStkPayloadFilter.process_state:type_name -> gidyon.mpesa.ProcessedState
	5,  // 2: gidyon.mpesa.ListStkPayloadsRequest.filter:type_name -> gidyon.mpesa.ListStkPayloadFilter
	0,  // 3: gidyon.mpesa.ListStkPayloadsResponse.stk_payloads:type_name -> gidyon.mpesa.StkPayload
	11, // 4: gidyon.mpesa.PublishStkPayloadRequest.processed_state:type_name -> gidyon.mpesa.ProcessedState
	11, // 5: gidyon.mpesa.PublishAllStkPayloadRequest.processed_state:type_name -> gidyon.mpesa.ProcessedState
	1,  // 6: gidyon.mpesa.StkPushAPI.InitiateSTKPush:input_type -> gidyon.mpesa.InitiateSTKPushRequest
	3,  // 7: gidyon.mpesa.StkPushAPI.GetStkPayload:input_type -> gidyon.mpesa.GetStkPayloadRequest
	4,  // 8: gidyon.mpesa.StkPushAPI.CreateStkPayload:input_type -> gidyon.mpesa.CreateStkPayloadRequest
	6,  // 9: gidyon.mpesa.StkPushAPI.ListStkPayloads:input_type -> gidyon.mpesa.ListStkPayloadsRequest
	8,  // 10: gidyon.mpesa.StkPushAPI.ProcessStkPayload:input_type -> gidyon.mpesa.ProcessStkPayloadRequest
	9,  // 11: gidyon.mpesa.StkPushAPI.PublishStkPayload:input_type -> gidyon.mpesa.PublishStkPayloadRequest
	10, // 12: gidyon.mpesa.StkPushAPI.PublishAllStkPayload:input_type -> gidyon.mpesa.PublishAllStkPayloadRequest
	2,  // 13: gidyon.mpesa.StkPushAPI.InitiateSTKPush:output_type -> gidyon.mpesa.InitiateSTKPushResponse
	0,  // 14: gidyon.mpesa.StkPushAPI.GetStkPayload:output_type -> gidyon.mpesa.StkPayload
	0,  // 15: gidyon.mpesa.StkPushAPI.CreateStkPayload:output_type -> gidyon.mpesa.StkPayload
	7,  // 16: gidyon.mpesa.StkPushAPI.ListStkPayloads:output_type -> gidyon.mpesa.ListStkPayloadsResponse
	12, // 17: gidyon.mpesa.StkPushAPI.ProcessStkPayload:output_type -> google.protobuf.Empty
	12, // 18: gidyon.mpesa.StkPushAPI.PublishStkPayload:output_type -> google.protobuf.Empty
	12, // 19: gidyon.mpesa.StkPushAPI.PublishAllStkPayload:output_type -> google.protobuf.Empty
	13, // [13:20] is the sub-list for method output_type
	6,  // [6:13] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_stk_proto_init() }
func file_stk_proto_init() {
	if File_stk_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stk_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StkPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stk_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitiateSTKPushRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stk_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitiateSTKPushResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stk_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStkPayloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stk_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStkPayloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stk_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStkPayloadFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stk_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStkPayloadsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stk_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStkPayloadsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stk_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessStkPayloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stk_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishStkPayloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stk_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishAllStkPayloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stk_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stk_proto_goTypes,
		DependencyIndexes: file_stk_proto_depIdxs,
		MessageInfos:      file_stk_proto_msgTypes,
	}.Build()
	File_stk_proto = out.File
	file_stk_proto_rawDesc = nil
	file_stk_proto_goTypes = nil
	file_stk_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StkPushAPIClient is the client API for StkPushAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StkPushAPIClient interface {
	// Initiates mpesa payment.
	InitiateSTKPush(ctx context.Context, in *InitiateSTKPushRequest, opts ...grpc.CallOption) (*InitiateSTKPushResponse, error)
	// Retrieves a single stk payload
	GetStkPayload(ctx context.Context, in *GetStkPayloadRequest, opts ...grpc.CallOption) (*StkPayload, error)
	// Creates a record of stk push response sent to callback
	CreateStkPayload(ctx context.Context, in *CreateStkPayloadRequest, opts ...grpc.CallOption) (*StkPayload, error)
	// Retrieves a collection of stk push payloads
	ListStkPayloads(ctx context.Context, in *ListStkPayloadsRequest, opts ...grpc.CallOption) (*ListStkPayloadsResponse, error)
	// Processes stk push payload updating its status
	ProcessStkPayload(ctx context.Context, in *ProcessStkPayloadRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Publishes stk push payload for consumers
	PublishStkPayload(ctx context.Context, in *PublishStkPayloadRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Publihses all stk push payloads to consumers
	PublishAllStkPayload(ctx context.Context, in *PublishAllStkPayloadRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type stkPushAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewStkPushAPIClient(cc grpc.ClientConnInterface) StkPushAPIClient {
	return &stkPushAPIClient{cc}
}

func (c *stkPushAPIClient) InitiateSTKPush(ctx context.Context, in *InitiateSTKPushRequest, opts ...grpc.CallOption) (*InitiateSTKPushResponse, error) {
	out := new(InitiateSTKPushResponse)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.StkPushAPI/InitiateSTKPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stkPushAPIClient) GetStkPayload(ctx context.Context, in *GetStkPayloadRequest, opts ...grpc.CallOption) (*StkPayload, error) {
	out := new(StkPayload)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.StkPushAPI/GetStkPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stkPushAPIClient) CreateStkPayload(ctx context.Context, in *CreateStkPayloadRequest, opts ...grpc.CallOption) (*StkPayload, error) {
	out := new(StkPayload)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.StkPushAPI/CreateStkPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stkPushAPIClient) ListStkPayloads(ctx context.Context, in *ListStkPayloadsRequest, opts ...grpc.CallOption) (*ListStkPayloadsResponse, error) {
	out := new(ListStkPayloadsResponse)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.StkPushAPI/ListStkPayloads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stkPushAPIClient) ProcessStkPayload(ctx context.Context, in *ProcessStkPayloadRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.StkPushAPI/ProcessStkPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stkPushAPIClient) PublishStkPayload(ctx context.Context, in *PublishStkPayloadRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.StkPushAPI/PublishStkPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stkPushAPIClient) PublishAllStkPayload(ctx context.Context, in *PublishAllStkPayloadRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.StkPushAPI/PublishAllStkPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StkPushAPIServer is the server API for StkPushAPI service.
type StkPushAPIServer interface {
	// Initiates mpesa payment.
	InitiateSTKPush(context.Context, *InitiateSTKPushRequest) (*InitiateSTKPushResponse, error)
	// Retrieves a single stk payload
	GetStkPayload(context.Context, *GetStkPayloadRequest) (*StkPayload, error)
	// Creates a record of stk push response sent to callback
	CreateStkPayload(context.Context, *CreateStkPayloadRequest) (*StkPayload, error)
	// Retrieves a collection of stk push payloads
	ListStkPayloads(context.Context, *ListStkPayloadsRequest) (*ListStkPayloadsResponse, error)
	// Processes stk push payload updating its status
	ProcessStkPayload(context.Context, *ProcessStkPayloadRequest) (*empty.Empty, error)
	// Publishes stk push payload for consumers
	PublishStkPayload(context.Context, *PublishStkPayloadRequest) (*empty.Empty, error)
	// Publihses all stk push payloads to consumers
	PublishAllStkPayload(context.Context, *PublishAllStkPayloadRequest) (*empty.Empty, error)
}

// UnimplementedStkPushAPIServer can be embedded to have forward compatible implementations.
type UnimplementedStkPushAPIServer struct {
}

func (*UnimplementedStkPushAPIServer) InitiateSTKPush(context.Context, *InitiateSTKPushRequest) (*InitiateSTKPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateSTKPush not implemented")
}
func (*UnimplementedStkPushAPIServer) GetStkPayload(context.Context, *GetStkPayloadRequest) (*StkPayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStkPayload not implemented")
}
func (*UnimplementedStkPushAPIServer) CreateStkPayload(context.Context, *CreateStkPayloadRequest) (*StkPayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStkPayload not implemented")
}
func (*UnimplementedStkPushAPIServer) ListStkPayloads(context.Context, *ListStkPayloadsRequest) (*ListStkPayloadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStkPayloads not implemented")
}
func (*UnimplementedStkPushAPIServer) ProcessStkPayload(context.Context, *ProcessStkPayloadRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessStkPayload not implemented")
}
func (*UnimplementedStkPushAPIServer) PublishStkPayload(context.Context, *PublishStkPayloadRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishStkPayload not implemented")
}
func (*UnimplementedStkPushAPIServer) PublishAllStkPayload(context.Context, *PublishAllStkPayloadRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishAllStkPayload not implemented")
}

func RegisterStkPushAPIServer(s *grpc.Server, srv StkPushAPIServer) {
	s.RegisterService(&_StkPushAPI_serviceDesc, srv)
}

func _StkPushAPI_InitiateSTKPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateSTKPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StkPushAPIServer).InitiateSTKPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.StkPushAPI/InitiateSTKPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StkPushAPIServer).InitiateSTKPush(ctx, req.(*InitiateSTKPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StkPushAPI_GetStkPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStkPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StkPushAPIServer).GetStkPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.StkPushAPI/GetStkPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StkPushAPIServer).GetStkPayload(ctx, req.(*GetStkPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StkPushAPI_CreateStkPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStkPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StkPushAPIServer).CreateStkPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.StkPushAPI/CreateStkPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StkPushAPIServer).CreateStkPayload(ctx, req.(*CreateStkPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StkPushAPI_ListStkPayloads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStkPayloadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StkPushAPIServer).ListStkPayloads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.StkPushAPI/ListStkPayloads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StkPushAPIServer).ListStkPayloads(ctx, req.(*ListStkPayloadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StkPushAPI_ProcessStkPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessStkPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StkPushAPIServer).ProcessStkPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.StkPushAPI/ProcessStkPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StkPushAPIServer).ProcessStkPayload(ctx, req.(*ProcessStkPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StkPushAPI_PublishStkPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishStkPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StkPushAPIServer).PublishStkPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.StkPushAPI/PublishStkPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StkPushAPIServer).PublishStkPayload(ctx, req.(*PublishStkPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StkPushAPI_PublishAllStkPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishAllStkPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StkPushAPIServer).PublishAllStkPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.StkPushAPI/PublishAllStkPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StkPushAPIServer).PublishAllStkPayload(ctx, req.(*PublishAllStkPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StkPushAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gidyon.mpesa.StkPushAPI",
	HandlerType: (*StkPushAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitiateSTKPush",
			Handler:    _StkPushAPI_InitiateSTKPush_Handler,
		},
		{
			MethodName: "GetStkPayload",
			Handler:    _StkPushAPI_GetStkPayload_Handler,
		},
		{
			MethodName: "CreateStkPayload",
			Handler:    _StkPushAPI_CreateStkPayload_Handler,
		},
		{
			MethodName: "ListStkPayloads",
			Handler:    _StkPushAPI_ListStkPayloads_Handler,
		},
		{
			MethodName: "ProcessStkPayload",
			Handler:    _StkPushAPI_ProcessStkPayload_Handler,
		},
		{
			MethodName: "PublishStkPayload",
			Handler:    _StkPushAPI_PublishStkPayload_Handler,
		},
		{
			MethodName: "PublishAllStkPayload",
			Handler:    _StkPushAPI_PublishAllStkPayload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stk.proto",
}
