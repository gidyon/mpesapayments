// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package c2b

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LipaNaMPESAClient is the client API for LipaNaMPESA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LipaNaMPESAClient interface {
	// Creates a record of mpesa payment.
	CreateC2BPayment(ctx context.Context, in *CreateC2BPaymentRequest, opts ...grpc.CallOption) (*CreateC2BPaymentResponse, error)
	// Retrieves MPESA payment.
	GetC2BPayment(ctx context.Context, in *GetC2BPaymentRequest, opts ...grpc.CallOption) (*C2BPayment, error)
	// Retrieves a collection of MPESA payments.
	ListC2BPayments(ctx context.Context, in *ListC2BPaymentsRequest, opts ...grpc.CallOption) (*ListC2BPaymentsResponse, error)
	// Saves scopes for a user.
	SaveScopes(ctx context.Context, in *SaveScopesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Retrieves scopes for a user.
	GetScopes(ctx context.Context, in *GetScopesRequest, opts ...grpc.CallOption) (*GetScopesResponse, error)
	// Updates Mpesa transaction processed state to either true or false.
	ProcessC2BPayment(ctx context.Context, in *ProcessC2BPaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Publishes Mpesa statement for listeners to process. Safe to be called many times.
	PublishC2BPayment(ctx context.Context, in *PublishC2BPaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Publish all failed Mpesa transaction for listeners to process.
	PublishAllC2BPayments(ctx context.Context, in *PublishAllC2BPaymentsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get transactions count summary
	GetTransactionsCount(ctx context.Context, in *GetTransactionsCountRequest, opts ...grpc.CallOption) (*TransactionsSummary, error)
	// Retrives a random transaction using RM=NG algorithm
	GetRandomTransaction(ctx context.Context, in *GetRandomTransactionRequest, opts ...grpc.CallOption) (*C2BPayment, error)
	// Archives transactions in a separate table`
	ArchiveTransactions(ctx context.Context, in *ArchiveTransactionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get statistics for transactions
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*StatsResponse, error)
	// Retrieves a collection of statistics
	ListStats(ctx context.Context, in *ListStatsRequest, opts ...grpc.CallOption) (*StatsResponse, error)
}

type lipaNaMPESAClient struct {
	cc grpc.ClientConnInterface
}

func NewLipaNaMPESAClient(cc grpc.ClientConnInterface) LipaNaMPESAClient {
	return &lipaNaMPESAClient{cc}
}

func (c *lipaNaMPESAClient) CreateC2BPayment(ctx context.Context, in *CreateC2BPaymentRequest, opts ...grpc.CallOption) (*CreateC2BPaymentResponse, error) {
	out := new(CreateC2BPaymentResponse)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.LipaNaMPESA/CreateC2BPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lipaNaMPESAClient) GetC2BPayment(ctx context.Context, in *GetC2BPaymentRequest, opts ...grpc.CallOption) (*C2BPayment, error) {
	out := new(C2BPayment)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.LipaNaMPESA/GetC2BPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lipaNaMPESAClient) ListC2BPayments(ctx context.Context, in *ListC2BPaymentsRequest, opts ...grpc.CallOption) (*ListC2BPaymentsResponse, error) {
	out := new(ListC2BPaymentsResponse)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.LipaNaMPESA/ListC2BPayments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lipaNaMPESAClient) SaveScopes(ctx context.Context, in *SaveScopesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.LipaNaMPESA/SaveScopes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lipaNaMPESAClient) GetScopes(ctx context.Context, in *GetScopesRequest, opts ...grpc.CallOption) (*GetScopesResponse, error) {
	out := new(GetScopesResponse)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.LipaNaMPESA/GetScopes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lipaNaMPESAClient) ProcessC2BPayment(ctx context.Context, in *ProcessC2BPaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.LipaNaMPESA/ProcessC2BPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lipaNaMPESAClient) PublishC2BPayment(ctx context.Context, in *PublishC2BPaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.LipaNaMPESA/PublishC2BPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lipaNaMPESAClient) PublishAllC2BPayments(ctx context.Context, in *PublishAllC2BPaymentsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.LipaNaMPESA/PublishAllC2BPayments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lipaNaMPESAClient) GetTransactionsCount(ctx context.Context, in *GetTransactionsCountRequest, opts ...grpc.CallOption) (*TransactionsSummary, error) {
	out := new(TransactionsSummary)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.LipaNaMPESA/GetTransactionsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lipaNaMPESAClient) GetRandomTransaction(ctx context.Context, in *GetRandomTransactionRequest, opts ...grpc.CallOption) (*C2BPayment, error) {
	out := new(C2BPayment)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.LipaNaMPESA/GetRandomTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lipaNaMPESAClient) ArchiveTransactions(ctx context.Context, in *ArchiveTransactionsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.LipaNaMPESA/ArchiveTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lipaNaMPESAClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.LipaNaMPESA/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lipaNaMPESAClient) ListStats(ctx context.Context, in *ListStatsRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.LipaNaMPESA/ListStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LipaNaMPESAServer is the server API for LipaNaMPESA service.
// All implementations must embed UnimplementedLipaNaMPESAServer
// for forward compatibility
type LipaNaMPESAServer interface {
	// Creates a record of mpesa payment.
	CreateC2BPayment(context.Context, *CreateC2BPaymentRequest) (*CreateC2BPaymentResponse, error)
	// Retrieves MPESA payment.
	GetC2BPayment(context.Context, *GetC2BPaymentRequest) (*C2BPayment, error)
	// Retrieves a collection of MPESA payments.
	ListC2BPayments(context.Context, *ListC2BPaymentsRequest) (*ListC2BPaymentsResponse, error)
	// Saves scopes for a user.
	SaveScopes(context.Context, *SaveScopesRequest) (*emptypb.Empty, error)
	// Retrieves scopes for a user.
	GetScopes(context.Context, *GetScopesRequest) (*GetScopesResponse, error)
	// Updates Mpesa transaction processed state to either true or false.
	ProcessC2BPayment(context.Context, *ProcessC2BPaymentRequest) (*emptypb.Empty, error)
	// Publishes Mpesa statement for listeners to process. Safe to be called many times.
	PublishC2BPayment(context.Context, *PublishC2BPaymentRequest) (*emptypb.Empty, error)
	// Publish all failed Mpesa transaction for listeners to process.
	PublishAllC2BPayments(context.Context, *PublishAllC2BPaymentsRequest) (*emptypb.Empty, error)
	// Get transactions count summary
	GetTransactionsCount(context.Context, *GetTransactionsCountRequest) (*TransactionsSummary, error)
	// Retrives a random transaction using RM=NG algorithm
	GetRandomTransaction(context.Context, *GetRandomTransactionRequest) (*C2BPayment, error)
	// Archives transactions in a separate table`
	ArchiveTransactions(context.Context, *ArchiveTransactionsRequest) (*emptypb.Empty, error)
	// Get statistics for transactions
	GetStats(context.Context, *GetStatsRequest) (*StatsResponse, error)
	// Retrieves a collection of statistics
	ListStats(context.Context, *ListStatsRequest) (*StatsResponse, error)
	mustEmbedUnimplementedLipaNaMPESAServer()
}

// UnimplementedLipaNaMPESAServer must be embedded to have forward compatible implementations.
type UnimplementedLipaNaMPESAServer struct {
}

func (UnimplementedLipaNaMPESAServer) CreateC2BPayment(context.Context, *CreateC2BPaymentRequest) (*CreateC2BPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateC2BPayment not implemented")
}
func (UnimplementedLipaNaMPESAServer) GetC2BPayment(context.Context, *GetC2BPaymentRequest) (*C2BPayment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetC2BPayment not implemented")
}
func (UnimplementedLipaNaMPESAServer) ListC2BPayments(context.Context, *ListC2BPaymentsRequest) (*ListC2BPaymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListC2BPayments not implemented")
}
func (UnimplementedLipaNaMPESAServer) SaveScopes(context.Context, *SaveScopesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveScopes not implemented")
}
func (UnimplementedLipaNaMPESAServer) GetScopes(context.Context, *GetScopesRequest) (*GetScopesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScopes not implemented")
}
func (UnimplementedLipaNaMPESAServer) ProcessC2BPayment(context.Context, *ProcessC2BPaymentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessC2BPayment not implemented")
}
func (UnimplementedLipaNaMPESAServer) PublishC2BPayment(context.Context, *PublishC2BPaymentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishC2BPayment not implemented")
}
func (UnimplementedLipaNaMPESAServer) PublishAllC2BPayments(context.Context, *PublishAllC2BPaymentsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishAllC2BPayments not implemented")
}
func (UnimplementedLipaNaMPESAServer) GetTransactionsCount(context.Context, *GetTransactionsCountRequest) (*TransactionsSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsCount not implemented")
}
func (UnimplementedLipaNaMPESAServer) GetRandomTransaction(context.Context, *GetRandomTransactionRequest) (*C2BPayment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomTransaction not implemented")
}
func (UnimplementedLipaNaMPESAServer) ArchiveTransactions(context.Context, *ArchiveTransactionsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveTransactions not implemented")
}
func (UnimplementedLipaNaMPESAServer) GetStats(context.Context, *GetStatsRequest) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedLipaNaMPESAServer) ListStats(context.Context, *ListStatsRequest) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStats not implemented")
}
func (UnimplementedLipaNaMPESAServer) mustEmbedUnimplementedLipaNaMPESAServer() {}

// UnsafeLipaNaMPESAServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LipaNaMPESAServer will
// result in compilation errors.
type UnsafeLipaNaMPESAServer interface {
	mustEmbedUnimplementedLipaNaMPESAServer()
}

func RegisterLipaNaMPESAServer(s grpc.ServiceRegistrar, srv LipaNaMPESAServer) {
	s.RegisterService(&_LipaNaMPESA_serviceDesc, srv)
}

func _LipaNaMPESA_CreateC2BPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateC2BPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LipaNaMPESAServer).CreateC2BPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.LipaNaMPESA/CreateC2BPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LipaNaMPESAServer).CreateC2BPayment(ctx, req.(*CreateC2BPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LipaNaMPESA_GetC2BPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetC2BPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LipaNaMPESAServer).GetC2BPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.LipaNaMPESA/GetC2BPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LipaNaMPESAServer).GetC2BPayment(ctx, req.(*GetC2BPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LipaNaMPESA_ListC2BPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListC2BPaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LipaNaMPESAServer).ListC2BPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.LipaNaMPESA/ListC2BPayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LipaNaMPESAServer).ListC2BPayments(ctx, req.(*ListC2BPaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LipaNaMPESA_SaveScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveScopesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LipaNaMPESAServer).SaveScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.LipaNaMPESA/SaveScopes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LipaNaMPESAServer).SaveScopes(ctx, req.(*SaveScopesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LipaNaMPESA_GetScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScopesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LipaNaMPESAServer).GetScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.LipaNaMPESA/GetScopes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LipaNaMPESAServer).GetScopes(ctx, req.(*GetScopesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LipaNaMPESA_ProcessC2BPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessC2BPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LipaNaMPESAServer).ProcessC2BPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.LipaNaMPESA/ProcessC2BPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LipaNaMPESAServer).ProcessC2BPayment(ctx, req.(*ProcessC2BPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LipaNaMPESA_PublishC2BPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishC2BPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LipaNaMPESAServer).PublishC2BPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.LipaNaMPESA/PublishC2BPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LipaNaMPESAServer).PublishC2BPayment(ctx, req.(*PublishC2BPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LipaNaMPESA_PublishAllC2BPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishAllC2BPaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LipaNaMPESAServer).PublishAllC2BPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.LipaNaMPESA/PublishAllC2BPayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LipaNaMPESAServer).PublishAllC2BPayments(ctx, req.(*PublishAllC2BPaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LipaNaMPESA_GetTransactionsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LipaNaMPESAServer).GetTransactionsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.LipaNaMPESA/GetTransactionsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LipaNaMPESAServer).GetTransactionsCount(ctx, req.(*GetTransactionsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LipaNaMPESA_GetRandomTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LipaNaMPESAServer).GetRandomTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.LipaNaMPESA/GetRandomTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LipaNaMPESAServer).GetRandomTransaction(ctx, req.(*GetRandomTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LipaNaMPESA_ArchiveTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LipaNaMPESAServer).ArchiveTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.LipaNaMPESA/ArchiveTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LipaNaMPESAServer).ArchiveTransactions(ctx, req.(*ArchiveTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LipaNaMPESA_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LipaNaMPESAServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.LipaNaMPESA/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LipaNaMPESAServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LipaNaMPESA_ListStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LipaNaMPESAServer).ListStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.LipaNaMPESA/ListStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LipaNaMPESAServer).ListStats(ctx, req.(*ListStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LipaNaMPESA_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gidyon.mpesa.LipaNaMPESA",
	HandlerType: (*LipaNaMPESAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateC2BPayment",
			Handler:    _LipaNaMPESA_CreateC2BPayment_Handler,
		},
		{
			MethodName: "GetC2BPayment",
			Handler:    _LipaNaMPESA_GetC2BPayment_Handler,
		},
		{
			MethodName: "ListC2BPayments",
			Handler:    _LipaNaMPESA_ListC2BPayments_Handler,
		},
		{
			MethodName: "SaveScopes",
			Handler:    _LipaNaMPESA_SaveScopes_Handler,
		},
		{
			MethodName: "GetScopes",
			Handler:    _LipaNaMPESA_GetScopes_Handler,
		},
		{
			MethodName: "ProcessC2BPayment",
			Handler:    _LipaNaMPESA_ProcessC2BPayment_Handler,
		},
		{
			MethodName: "PublishC2BPayment",
			Handler:    _LipaNaMPESA_PublishC2BPayment_Handler,
		},
		{
			MethodName: "PublishAllC2BPayments",
			Handler:    _LipaNaMPESA_PublishAllC2BPayments_Handler,
		},
		{
			MethodName: "GetTransactionsCount",
			Handler:    _LipaNaMPESA_GetTransactionsCount_Handler,
		},
		{
			MethodName: "GetRandomTransaction",
			Handler:    _LipaNaMPESA_GetRandomTransaction_Handler,
		},
		{
			MethodName: "ArchiveTransactions",
			Handler:    _LipaNaMPESA_ArchiveTransactions_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _LipaNaMPESA_GetStats_Handler,
		},
		{
			MethodName: "ListStats",
			Handler:    _LipaNaMPESA_ListStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "c2b.proto",
}
