// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: c2b.proto

package c2b

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProcessedState int32

const (
	ProcessedState_PROCESS_STATE_UNSPECIFIED ProcessedState = 0
	ProcessedState_PROCESSED                 ProcessedState = 1
	ProcessedState_NOT_PROCESSED             ProcessedState = 2
)

// Enum value maps for ProcessedState.
var (
	ProcessedState_name = map[int32]string{
		0: "PROCESS_STATE_UNSPECIFIED",
		1: "PROCESSED",
		2: "NOT_PROCESSED",
	}
	ProcessedState_value = map[string]int32{
		"PROCESS_STATE_UNSPECIFIED": 0,
		"PROCESSED":                 1,
		"NOT_PROCESSED":             2,
	}
)

func (x ProcessedState) Enum() *ProcessedState {
	p := new(ProcessedState)
	*p = x
	return p
}

func (x ProcessedState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessedState) Descriptor() protoreflect.EnumDescriptor {
	return file_c2b_proto_enumTypes[0].Descriptor()
}

func (ProcessedState) Type() protoreflect.EnumType {
	return &file_c2b_proto_enumTypes[0]
}

func (x ProcessedState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessedState.Descriptor instead.
func (ProcessedState) EnumDescriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{0}
}

type C2BPayment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId              string  `protobuf:"bytes,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	TransactionType        string  `protobuf:"bytes,2,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
	TransactionId          string  `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Msisdn                 string  `protobuf:"bytes,4,opt,name=msisdn,proto3" json:"msisdn,omitempty"`
	Names                  string  `protobuf:"bytes,5,opt,name=names,proto3" json:"names,omitempty"`
	RefNumber              string  `protobuf:"bytes,6,opt,name=ref_number,json=refNumber,proto3" json:"ref_number,omitempty"`
	TransactionTimeSeconds int64   `protobuf:"varint,7,opt,name=transaction_time_seconds,json=transactionTimeSeconds,proto3" json:"transaction_time_seconds,omitempty"`
	CreateTimeSeconds      int64   `protobuf:"varint,8,opt,name=create_time_seconds,json=createTimeSeconds,proto3" json:"create_time_seconds,omitempty"`
	Amount                 float32 `protobuf:"fixed32,9,opt,name=amount,proto3" json:"amount,omitempty"`
	OrgBalance             float32 `protobuf:"fixed32,10,opt,name=org_balance,json=orgBalance,proto3" json:"org_balance,omitempty"`
	BusinessShortCode      int32   `protobuf:"varint,11,opt,name=business_short_code,json=businessShortCode,proto3" json:"business_short_code,omitempty"`
	Processed              bool    `protobuf:"varint,12,opt,name=processed,proto3" json:"processed,omitempty"`
}

func (x *C2BPayment) Reset() {
	*x = C2BPayment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_c2b_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *C2BPayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2BPayment) ProtoMessage() {}

func (x *C2BPayment) ProtoReflect() protoreflect.Message {
	mi := &file_c2b_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2BPayment.ProtoReflect.Descriptor instead.
func (*C2BPayment) Descriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{0}
}

func (x *C2BPayment) GetPaymentId() string {
	if x != nil {
		return x.PaymentId
	}
	return ""
}

func (x *C2BPayment) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *C2BPayment) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *C2BPayment) GetMsisdn() string {
	if x != nil {
		return x.Msisdn
	}
	return ""
}

func (x *C2BPayment) GetNames() string {
	if x != nil {
		return x.Names
	}
	return ""
}

func (x *C2BPayment) GetRefNumber() string {
	if x != nil {
		return x.RefNumber
	}
	return ""
}

func (x *C2BPayment) GetTransactionTimeSeconds() int64 {
	if x != nil {
		return x.TransactionTimeSeconds
	}
	return 0
}

func (x *C2BPayment) GetCreateTimeSeconds() int64 {
	if x != nil {
		return x.CreateTimeSeconds
	}
	return 0
}

func (x *C2BPayment) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *C2BPayment) GetOrgBalance() float32 {
	if x != nil {
		return x.OrgBalance
	}
	return 0
}

func (x *C2BPayment) GetBusinessShortCode() int32 {
	if x != nil {
		return x.BusinessShortCode
	}
	return 0
}

func (x *C2BPayment) GetProcessed() bool {
	if x != nil {
		return x.Processed
	}
	return false
}

type CreateC2BPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MpesaPayment *C2BPayment `protobuf:"bytes,1,opt,name=mpesa_payment,json=mpesaPayment,proto3" json:"mpesa_payment,omitempty"`
	Publish      bool        `protobuf:"varint,2,opt,name=publish,proto3" json:"publish,omitempty"`
}

func (x *CreateC2BPaymentRequest) Reset() {
	*x = CreateC2BPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_c2b_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateC2BPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateC2BPaymentRequest) ProtoMessage() {}

func (x *CreateC2BPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c2b_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateC2BPaymentRequest.ProtoReflect.Descriptor instead.
func (*CreateC2BPaymentRequest) Descriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{1}
}

func (x *CreateC2BPaymentRequest) GetMpesaPayment() *C2BPayment {
	if x != nil {
		return x.MpesaPayment
	}
	return nil
}

func (x *CreateC2BPaymentRequest) GetPublish() bool {
	if x != nil {
		return x.Publish
	}
	return false
}

type CreateC2BPaymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId string `protobuf:"bytes,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
}

func (x *CreateC2BPaymentResponse) Reset() {
	*x = CreateC2BPaymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_c2b_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateC2BPaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateC2BPaymentResponse) ProtoMessage() {}

func (x *CreateC2BPaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_c2b_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateC2BPaymentResponse.ProtoReflect.Descriptor instead.
func (*CreateC2BPaymentResponse) Descriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{2}
}

func (x *CreateC2BPaymentResponse) GetPaymentId() string {
	if x != nil {
		return x.PaymentId
	}
	return ""
}

type GetC2BPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId string `protobuf:"bytes,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
}

func (x *GetC2BPaymentRequest) Reset() {
	*x = GetC2BPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_c2b_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetC2BPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetC2BPaymentRequest) ProtoMessage() {}

func (x *GetC2BPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c2b_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetC2BPaymentRequest.ProtoReflect.Descriptor instead.
func (*GetC2BPaymentRequest) Descriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{3}
}

func (x *GetC2BPaymentRequest) GetPaymentId() string {
	if x != nil {
		return x.PaymentId
	}
	return ""
}

type ExistC2BPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId string `protobuf:"bytes,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
}

func (x *ExistC2BPaymentRequest) Reset() {
	*x = ExistC2BPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_c2b_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistC2BPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistC2BPaymentRequest) ProtoMessage() {}

func (x *ExistC2BPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c2b_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistC2BPaymentRequest.ProtoReflect.Descriptor instead.
func (*ExistC2BPaymentRequest) Descriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{4}
}

func (x *ExistC2BPaymentRequest) GetPaymentId() string {
	if x != nil {
		return x.PaymentId
	}
	return ""
}

type ExistC2BPaymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool    `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
	Amount float32 `protobuf:"fixed32,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *ExistC2BPaymentResponse) Reset() {
	*x = ExistC2BPaymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_c2b_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistC2BPaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistC2BPaymentResponse) ProtoMessage() {}

func (x *ExistC2BPaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_c2b_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistC2BPaymentResponse.ProtoReflect.Descriptor instead.
func (*ExistC2BPaymentResponse) Descriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{5}
}

func (x *ExistC2BPaymentResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

func (x *ExistC2BPaymentResponse) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type ListC2BPaymentsFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxDate           string         `protobuf:"bytes,1,opt,name=tx_date,json=txDate,proto3" json:"tx_date,omitempty"`
	Msisdns          []string       `protobuf:"bytes,2,rep,name=msisdns,proto3" json:"msisdns,omitempty"`
	AccountsNumber   []string       `protobuf:"bytes,3,rep,name=accounts_number,json=accountsNumber,proto3" json:"accounts_number,omitempty"`
	Amounts          []float32      `protobuf:"fixed32,4,rep,packed,name=amounts,proto3" json:"amounts,omitempty"`
	ProcessState     ProcessedState `protobuf:"varint,5,opt,name=process_state,json=processState,proto3,enum=gidyon.mpesa.ProcessedState" json:"process_state,omitempty"`
	StartTimeSeconds int64          `protobuf:"varint,6,opt,name=start_time_seconds,json=startTimeSeconds,proto3" json:"start_time_seconds,omitempty"`
	EndTimeSeconds   int64          `protobuf:"varint,7,opt,name=end_time_seconds,json=endTimeSeconds,proto3" json:"end_time_seconds,omitempty"`
	OnlyUnique       bool           `protobuf:"varint,8,opt,name=only_unique,json=onlyUnique,proto3" json:"only_unique,omitempty"`
}

func (x *ListC2BPaymentsFilter) Reset() {
	*x = ListC2BPaymentsFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_c2b_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListC2BPaymentsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListC2BPaymentsFilter) ProtoMessage() {}

func (x *ListC2BPaymentsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_c2b_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListC2BPaymentsFilter.ProtoReflect.Descriptor instead.
func (*ListC2BPaymentsFilter) Descriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{6}
}

func (x *ListC2BPaymentsFilter) GetTxDate() string {
	if x != nil {
		return x.TxDate
	}
	return ""
}

func (x *ListC2BPaymentsFilter) GetMsisdns() []string {
	if x != nil {
		return x.Msisdns
	}
	return nil
}

func (x *ListC2BPaymentsFilter) GetAccountsNumber() []string {
	if x != nil {
		return x.AccountsNumber
	}
	return nil
}

func (x *ListC2BPaymentsFilter) GetAmounts() []float32 {
	if x != nil {
		return x.Amounts
	}
	return nil
}

func (x *ListC2BPaymentsFilter) GetProcessState() ProcessedState {
	if x != nil {
		return x.ProcessState
	}
	return ProcessedState_PROCESS_STATE_UNSPECIFIED
}

func (x *ListC2BPaymentsFilter) GetStartTimeSeconds() int64 {
	if x != nil {
		return x.StartTimeSeconds
	}
	return 0
}

func (x *ListC2BPaymentsFilter) GetEndTimeSeconds() int64 {
	if x != nil {
		return x.EndTimeSeconds
	}
	return 0
}

func (x *ListC2BPaymentsFilter) GetOnlyUnique() bool {
	if x != nil {
		return x.OnlyUnique
	}
	return false
}

type ListC2BPaymentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageToken string                 `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	PageSize  int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Filter    *ListC2BPaymentsFilter `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListC2BPaymentsRequest) Reset() {
	*x = ListC2BPaymentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_c2b_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListC2BPaymentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListC2BPaymentsRequest) ProtoMessage() {}

func (x *ListC2BPaymentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c2b_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListC2BPaymentsRequest.ProtoReflect.Descriptor instead.
func (*ListC2BPaymentsRequest) Descriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{7}
}

func (x *ListC2BPaymentsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListC2BPaymentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListC2BPaymentsRequest) GetFilter() *ListC2BPaymentsFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListC2BPaymentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextPageToken string        `protobuf:"bytes,1,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	MpesaPayments []*C2BPayment `protobuf:"bytes,2,rep,name=mpesa_payments,json=mpesaPayments,proto3" json:"mpesa_payments,omitempty"`
}

func (x *ListC2BPaymentsResponse) Reset() {
	*x = ListC2BPaymentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_c2b_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListC2BPaymentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListC2BPaymentsResponse) ProtoMessage() {}

func (x *ListC2BPaymentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_c2b_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListC2BPaymentsResponse.ProtoReflect.Descriptor instead.
func (*ListC2BPaymentsResponse) Descriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{8}
}

func (x *ListC2BPaymentsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListC2BPaymentsResponse) GetMpesaPayments() []*C2BPayment {
	if x != nil {
		return x.MpesaPayments
	}
	return nil
}

type Scopes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowedShortCodes []string  `protobuf:"bytes,1,rep,name=allowed_short_codes,json=allowedShortCodes,proto3" json:"allowed_short_codes,omitempty"`
	AllowedPhones     []string  `protobuf:"bytes,2,rep,name=allowed_phones,json=allowedPhones,proto3" json:"allowed_phones,omitempty"`
	AllowedAccNumber  []string  `protobuf:"bytes,3,rep,name=allowed_acc_number,json=allowedAccNumber,proto3" json:"allowed_acc_number,omitempty"`
	AllowedAmounts    []float32 `protobuf:"fixed32,4,rep,packed,name=allowed_amounts,json=allowedAmounts,proto3" json:"allowed_amounts,omitempty"`
	Percentage        float32   `protobuf:"fixed32,5,opt,name=percentage,proto3" json:"percentage,omitempty"`
}

func (x *Scopes) Reset() {
	*x = Scopes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_c2b_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scopes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scopes) ProtoMessage() {}

func (x *Scopes) ProtoReflect() protoreflect.Message {
	mi := &file_c2b_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scopes.ProtoReflect.Descriptor instead.
func (*Scopes) Descriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{9}
}

func (x *Scopes) GetAllowedShortCodes() []string {
	if x != nil {
		return x.AllowedShortCodes
	}
	return nil
}

func (x *Scopes) GetAllowedPhones() []string {
	if x != nil {
		return x.AllowedPhones
	}
	return nil
}

func (x *Scopes) GetAllowedAccNumber() []string {
	if x != nil {
		return x.AllowedAccNumber
	}
	return nil
}

func (x *Scopes) GetAllowedAmounts() []float32 {
	if x != nil {
		return x.AllowedAmounts
	}
	return nil
}

func (x *Scopes) GetPercentage() float32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

type SaveScopesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string  `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Scopes *Scopes `protobuf:"bytes,2,opt,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *SaveScopesRequest) Reset() {
	*x = SaveScopesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_c2b_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveScopesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveScopesRequest) ProtoMessage() {}

func (x *SaveScopesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c2b_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveScopesRequest.ProtoReflect.Descriptor instead.
func (*SaveScopesRequest) Descriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{10}
}

func (x *SaveScopesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SaveScopesRequest) GetScopes() *Scopes {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type SaveScopesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scopes *Scopes `protobuf:"bytes,1,opt,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *SaveScopesResponse) Reset() {
	*x = SaveScopesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_c2b_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveScopesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveScopesResponse) ProtoMessage() {}

func (x *SaveScopesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_c2b_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveScopesResponse.ProtoReflect.Descriptor instead.
func (*SaveScopesResponse) Descriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{11}
}

func (x *SaveScopesResponse) GetScopes() *Scopes {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type GetScopesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetScopesRequest) Reset() {
	*x = GetScopesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_c2b_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScopesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScopesRequest) ProtoMessage() {}

func (x *GetScopesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c2b_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScopesRequest.ProtoReflect.Descriptor instead.
func (*GetScopesRequest) Descriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{12}
}

func (x *GetScopesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetScopesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scopes *Scopes `protobuf:"bytes,1,opt,name=scopes,proto3" json:"scopes,omitempty"`
}

func (x *GetScopesResponse) Reset() {
	*x = GetScopesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_c2b_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScopesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScopesResponse) ProtoMessage() {}

func (x *GetScopesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_c2b_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScopesResponse.ProtoReflect.Descriptor instead.
func (*GetScopesResponse) Descriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{13}
}

func (x *GetScopesResponse) GetScopes() *Scopes {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type ProcessC2BPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId string `protobuf:"bytes,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	State     bool   `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Retry     bool   `protobuf:"varint,3,opt,name=retry,proto3" json:"retry,omitempty"`
}

func (x *ProcessC2BPaymentRequest) Reset() {
	*x = ProcessC2BPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_c2b_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessC2BPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessC2BPaymentRequest) ProtoMessage() {}

func (x *ProcessC2BPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c2b_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessC2BPaymentRequest.ProtoReflect.Descriptor instead.
func (*ProcessC2BPaymentRequest) Descriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{14}
}

func (x *ProcessC2BPaymentRequest) GetPaymentId() string {
	if x != nil {
		return x.PaymentId
	}
	return ""
}

func (x *ProcessC2BPaymentRequest) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

func (x *ProcessC2BPaymentRequest) GetRetry() bool {
	if x != nil {
		return x.Retry
	}
	return false
}

type PublishC2BPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentId      string         `protobuf:"bytes,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	InitiatorId    string         `protobuf:"bytes,2,opt,name=initiator_id,json=initiatorId,proto3" json:"initiator_id,omitempty"`
	ProcessedState ProcessedState `protobuf:"varint,3,opt,name=processed_state,json=processedState,proto3,enum=gidyon.mpesa.ProcessedState" json:"processed_state,omitempty"`
}

func (x *PublishC2BPaymentRequest) Reset() {
	*x = PublishC2BPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_c2b_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishC2BPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishC2BPaymentRequest) ProtoMessage() {}

func (x *PublishC2BPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c2b_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishC2BPaymentRequest.ProtoReflect.Descriptor instead.
func (*PublishC2BPaymentRequest) Descriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{15}
}

func (x *PublishC2BPaymentRequest) GetPaymentId() string {
	if x != nil {
		return x.PaymentId
	}
	return ""
}

func (x *PublishC2BPaymentRequest) GetInitiatorId() string {
	if x != nil {
		return x.InitiatorId
	}
	return ""
}

func (x *PublishC2BPaymentRequest) GetProcessedState() ProcessedState {
	if x != nil {
		return x.ProcessedState
	}
	return ProcessedState_PROCESS_STATE_UNSPECIFIED
}

type PublishAllC2BPaymentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessedState   ProcessedState `protobuf:"varint,1,opt,name=processed_state,json=processedState,proto3,enum=gidyon.mpesa.ProcessedState" json:"processed_state,omitempty"`
	StartTimeSeconds int64          `protobuf:"varint,2,opt,name=start_time_seconds,json=startTimeSeconds,proto3" json:"start_time_seconds,omitempty"`
	EndTimeSeconds   int64          `protobuf:"varint,3,opt,name=end_time_seconds,json=endTimeSeconds,proto3" json:"end_time_seconds,omitempty"`
}

func (x *PublishAllC2BPaymentsRequest) Reset() {
	*x = PublishAllC2BPaymentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_c2b_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishAllC2BPaymentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishAllC2BPaymentsRequest) ProtoMessage() {}

func (x *PublishAllC2BPaymentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c2b_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishAllC2BPaymentsRequest.ProtoReflect.Descriptor instead.
func (*PublishAllC2BPaymentsRequest) Descriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{16}
}

func (x *PublishAllC2BPaymentsRequest) GetProcessedState() ProcessedState {
	if x != nil {
		return x.ProcessedState
	}
	return ProcessedState_PROCESS_STATE_UNSPECIFIED
}

func (x *PublishAllC2BPaymentsRequest) GetStartTimeSeconds() int64 {
	if x != nil {
		return x.StartTimeSeconds
	}
	return 0
}

func (x *PublishAllC2BPaymentsRequest) GetEndTimeSeconds() int64 {
	if x != nil {
		return x.EndTimeSeconds
	}
	return 0
}

type GetTransactionsCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountsNumber   []string  `protobuf:"bytes,1,rep,name=accounts_number,json=accountsNumber,proto3" json:"accounts_number,omitempty"`
	Msisdns          []string  `protobuf:"bytes,2,rep,name=msisdns,proto3" json:"msisdns,omitempty"`
	Amounts          []float32 `protobuf:"fixed32,3,rep,packed,name=amounts,proto3" json:"amounts,omitempty"`
	StartTimeSeconds int64     `protobuf:"varint,4,opt,name=start_time_seconds,json=startTimeSeconds,proto3" json:"start_time_seconds,omitempty"`
	EndTimeSeconds   int64     `protobuf:"varint,5,opt,name=end_time_seconds,json=endTimeSeconds,proto3" json:"end_time_seconds,omitempty"`
}

func (x *GetTransactionsCountRequest) Reset() {
	*x = GetTransactionsCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_c2b_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionsCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionsCountRequest) ProtoMessage() {}

func (x *GetTransactionsCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c2b_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionsCountRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionsCountRequest) Descriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{17}
}

func (x *GetTransactionsCountRequest) GetAccountsNumber() []string {
	if x != nil {
		return x.AccountsNumber
	}
	return nil
}

func (x *GetTransactionsCountRequest) GetMsisdns() []string {
	if x != nil {
		return x.Msisdns
	}
	return nil
}

func (x *GetTransactionsCountRequest) GetAmounts() []float32 {
	if x != nil {
		return x.Amounts
	}
	return nil
}

func (x *GetTransactionsCountRequest) GetStartTimeSeconds() int64 {
	if x != nil {
		return x.StartTimeSeconds
	}
	return 0
}

func (x *GetTransactionsCountRequest) GetEndTimeSeconds() int64 {
	if x != nil {
		return x.EndTimeSeconds
	}
	return 0
}

type TransactionsSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalAmount       float32 `protobuf:"fixed32,1,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	TransactionsCount int32   `protobuf:"varint,2,opt,name=transactions_count,json=transactionsCount,proto3" json:"transactions_count,omitempty"`
}

func (x *TransactionsSummary) Reset() {
	*x = TransactionsSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_c2b_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionsSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionsSummary) ProtoMessage() {}

func (x *TransactionsSummary) ProtoReflect() protoreflect.Message {
	mi := &file_c2b_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionsSummary.ProtoReflect.Descriptor instead.
func (*TransactionsSummary) Descriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{18}
}

func (x *TransactionsSummary) GetTotalAmount() float32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *TransactionsSummary) GetTransactionsCount() int32 {
	if x != nil {
		return x.TransactionsCount
	}
	return 0
}

type ArchiveTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromTimeSeconds int64    `protobuf:"varint,1,opt,name=from_time_seconds,json=fromTimeSeconds,proto3" json:"from_time_seconds,omitempty"`
	ToTimeSeconds   int64    `protobuf:"varint,2,opt,name=to_time_seconds,json=toTimeSeconds,proto3" json:"to_time_seconds,omitempty"`
	RefNumbers      []string `protobuf:"bytes,3,rep,name=ref_numbers,json=refNumbers,proto3" json:"ref_numbers,omitempty"`
	ArchiveName     string   `protobuf:"bytes,4,opt,name=archive_name,json=archiveName,proto3" json:"archive_name,omitempty"`
	GenerateStat    bool     `protobuf:"varint,5,opt,name=generate_stat,json=generateStat,proto3" json:"generate_stat,omitempty"`
}

func (x *ArchiveTransactionsRequest) Reset() {
	*x = ArchiveTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_c2b_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveTransactionsRequest) ProtoMessage() {}

func (x *ArchiveTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c2b_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveTransactionsRequest.ProtoReflect.Descriptor instead.
func (*ArchiveTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{19}
}

func (x *ArchiveTransactionsRequest) GetFromTimeSeconds() int64 {
	if x != nil {
		return x.FromTimeSeconds
	}
	return 0
}

func (x *ArchiveTransactionsRequest) GetToTimeSeconds() int64 {
	if x != nil {
		return x.ToTimeSeconds
	}
	return 0
}

func (x *ArchiveTransactionsRequest) GetRefNumbers() []string {
	if x != nil {
		return x.RefNumbers
	}
	return nil
}

func (x *ArchiveTransactionsRequest) GetArchiveName() string {
	if x != nil {
		return x.ArchiveName
	}
	return ""
}

func (x *ArchiveTransactionsRequest) GetGenerateStat() bool {
	if x != nil {
		return x.GenerateStat
	}
	return false
}

type GetRandomTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountsNumber   []string `protobuf:"bytes,1,rep,name=accounts_number,json=accountsNumber,proto3" json:"accounts_number,omitempty"`
	StartTimeSeconds int64    `protobuf:"varint,2,opt,name=start_time_seconds,json=startTimeSeconds,proto3" json:"start_time_seconds,omitempty"`
	EndTimeSeconds   int64    `protobuf:"varint,3,opt,name=end_time_seconds,json=endTimeSeconds,proto3" json:"end_time_seconds,omitempty"`
	Amount           float32  `protobuf:"fixed32,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *GetRandomTransactionRequest) Reset() {
	*x = GetRandomTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_c2b_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRandomTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRandomTransactionRequest) ProtoMessage() {}

func (x *GetRandomTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c2b_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRandomTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetRandomTransactionRequest) Descriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{20}
}

func (x *GetRandomTransactionRequest) GetAccountsNumber() []string {
	if x != nil {
		return x.AccountsNumber
	}
	return nil
}

func (x *GetRandomTransactionRequest) GetStartTimeSeconds() int64 {
	if x != nil {
		return x.StartTimeSeconds
	}
	return 0
}

func (x *GetRandomTransactionRequest) GetEndTimeSeconds() int64 {
	if x != nil {
		return x.EndTimeSeconds
	}
	return 0
}

func (x *GetRandomTransactionRequest) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type Stat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatId            string  `protobuf:"bytes,1,opt,name=stat_id,json=statId,proto3" json:"stat_id,omitempty"`
	Date              string  `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	ShortCode         string  `protobuf:"bytes,3,opt,name=short_code,json=shortCode,proto3" json:"short_code,omitempty"`
	AccountName       string  `protobuf:"bytes,4,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	TotalTransactions int32   `protobuf:"varint,5,opt,name=total_transactions,json=totalTransactions,proto3" json:"total_transactions,omitempty"`
	TotalAmount       float32 `protobuf:"fixed32,6,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	CreateDateSeconds int64   `protobuf:"varint,7,opt,name=create_date_seconds,json=createDateSeconds,proto3" json:"create_date_seconds,omitempty"`
	UpdateTimeSeconds int64   `protobuf:"varint,8,opt,name=update_time_seconds,json=updateTimeSeconds,proto3" json:"update_time_seconds,omitempty"`
}

func (x *Stat) Reset() {
	*x = Stat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_c2b_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stat) ProtoMessage() {}

func (x *Stat) ProtoReflect() protoreflect.Message {
	mi := &file_c2b_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stat.ProtoReflect.Descriptor instead.
func (*Stat) Descriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{21}
}

func (x *Stat) GetStatId() string {
	if x != nil {
		return x.StatId
	}
	return ""
}

func (x *Stat) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *Stat) GetShortCode() string {
	if x != nil {
		return x.ShortCode
	}
	return ""
}

func (x *Stat) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *Stat) GetTotalTransactions() int32 {
	if x != nil {
		return x.TotalTransactions
	}
	return 0
}

func (x *Stat) GetTotalAmount() float32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *Stat) GetCreateDateSeconds() int64 {
	if x != nil {
		return x.CreateDateSeconds
	}
	return 0
}

func (x *Stat) GetUpdateTimeSeconds() int64 {
	if x != nil {
		return x.UpdateTimeSeconds
	}
	return 0
}

type GetStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dates       []string `protobuf:"bytes,1,rep,name=dates,proto3" json:"dates,omitempty"`
	ShortCode   string   `protobuf:"bytes,2,opt,name=short_code,json=shortCode,proto3" json:"short_code,omitempty"`
	AccountName string   `protobuf:"bytes,3,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
}

func (x *GetStatsRequest) Reset() {
	*x = GetStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_c2b_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatsRequest) ProtoMessage() {}

func (x *GetStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c2b_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatsRequest.ProtoReflect.Descriptor instead.
func (*GetStatsRequest) Descriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{22}
}

func (x *GetStatsRequest) GetDates() []string {
	if x != nil {
		return x.Dates
	}
	return nil
}

func (x *GetStatsRequest) GetShortCode() string {
	if x != nil {
		return x.ShortCode
	}
	return ""
}

func (x *GetStatsRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

type StatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats         []*Stat `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
	NextPageToken string  `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *StatsResponse) Reset() {
	*x = StatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_c2b_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsResponse) ProtoMessage() {}

func (x *StatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_c2b_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsResponse.ProtoReflect.Descriptor instead.
func (*StatsResponse) Descriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{23}
}

func (x *StatsResponse) GetStats() []*Stat {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *StatsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListStatsFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortCodes       []string `protobuf:"bytes,1,rep,name=short_codes,json=shortCodes,proto3" json:"short_codes,omitempty"`
	AccountsNumber   []string `protobuf:"bytes,2,rep,name=accounts_number,json=accountsNumber,proto3" json:"accounts_number,omitempty"`
	StartTimeSeconds int64    `protobuf:"varint,3,opt,name=start_time_seconds,json=startTimeSeconds,proto3" json:"start_time_seconds,omitempty"`
	EndTimeSeconds   int64    `protobuf:"varint,4,opt,name=end_time_seconds,json=endTimeSeconds,proto3" json:"end_time_seconds,omitempty"`
	TxDate           string   `protobuf:"bytes,5,opt,name=tx_date,json=txDate,proto3" json:"tx_date,omitempty"`
}

func (x *ListStatsFilter) Reset() {
	*x = ListStatsFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_c2b_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStatsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStatsFilter) ProtoMessage() {}

func (x *ListStatsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_c2b_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStatsFilter.ProtoReflect.Descriptor instead.
func (*ListStatsFilter) Descriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{24}
}

func (x *ListStatsFilter) GetShortCodes() []string {
	if x != nil {
		return x.ShortCodes
	}
	return nil
}

func (x *ListStatsFilter) GetAccountsNumber() []string {
	if x != nil {
		return x.AccountsNumber
	}
	return nil
}

func (x *ListStatsFilter) GetStartTimeSeconds() int64 {
	if x != nil {
		return x.StartTimeSeconds
	}
	return 0
}

func (x *ListStatsFilter) GetEndTimeSeconds() int64 {
	if x != nil {
		return x.EndTimeSeconds
	}
	return 0
}

func (x *ListStatsFilter) GetTxDate() string {
	if x != nil {
		return x.TxDate
	}
	return ""
}

type ListStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageToken string           `protobuf:"bytes,1,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	PageSize  int32            `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Filter    *ListStatsFilter `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListStatsRequest) Reset() {
	*x = ListStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_c2b_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStatsRequest) ProtoMessage() {}

func (x *ListStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c2b_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStatsRequest.ProtoReflect.Descriptor instead.
func (*ListStatsRequest) Descriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{25}
}

func (x *ListStatsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListStatsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListStatsRequest) GetFilter() *ListStatsFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ExportPhonesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExportFilter *ListC2BPaymentsFilter `protobuf:"bytes,1,opt,name=export_filter,json=exportFilter,proto3" json:"export_filter,omitempty"`
}

func (x *ExportPhonesRequest) Reset() {
	*x = ExportPhonesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_c2b_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportPhonesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportPhonesRequest) ProtoMessage() {}

func (x *ExportPhonesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_c2b_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportPhonesRequest.ProtoReflect.Descriptor instead.
func (*ExportPhonesRequest) Descriptor() ([]byte, []int) {
	return file_c2b_proto_rawDescGZIP(), []int{26}
}

func (x *ExportPhonesRequest) GetExportFilter() *ListC2BPaymentsFilter {
	if x != nil {
		return x.ExportFilter
	}
	return nil
}

var File_c2b_proto protoreflect.FileDescriptor

var file_c2b_proto_rawDesc = []byte{
	0x0a, 0x09, 0x63, 0x32, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x67, 0x69, 0x64,
	0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf1, 0x03, 0x0a, 0x0a, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x67, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6f, 0x72, 0x67, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x3a, 0x34, 0x92, 0x41, 0x31, 0x0a, 0x2f, 0x2a, 0x0a, 0x43, 0x32, 0x42, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x21, 0x4c, 0x69, 0x70, 0x61, 0x20, 0x6e, 0x61, 0x20, 0x4d,
	0x50, 0x45, 0x53, 0x41, 0x20, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd2, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0d, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x69,
	0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x43, 0x32, 0x42, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6d, 0x70, 0x65, 0x73,
	0x61, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x3a, 0x59, 0x92, 0x41, 0x56, 0x0a, 0x54, 0x2a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x29, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x6f, 0x66, 0x20,
	0x6d, 0x70, 0x65, 0x73, 0x61, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0xd2, 0x01, 0x0d,
	0x6d, 0x70, 0x65, 0x73, 0x61, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x91, 0x01,
	0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x56, 0x92, 0x41, 0x53, 0x0a, 0x51,
	0x2a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x35, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69,
	0x64, 0x22, 0x87, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x4b,
	0x92, 0x41, 0x48, 0x0a, 0x46, 0x2a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x21, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x20, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0xd2, 0x01,
	0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x16,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x5c, 0x92, 0x41, 0x59, 0x0a, 0x57, 0x2a, 0x16, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x32, 0x30, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f,
	0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6d,
	0x70, 0x65, 0x73, 0x61, 0x20, 0x63, 0x32, 0x62, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0xd2, 0x01, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x17, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x32, 0x42,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a,
	0x4e, 0x92, 0x41, 0x4b, 0x0a, 0x49, 0x2a, 0x17, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x32, 0x42,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x63, 0x32, 0x62,
	0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22,
	0x8d, 0x03, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x41, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e,
	0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6e,
	0x6c, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x3a, 0x42, 0x92, 0x41, 0x3f,
	0x0a, 0x3d, 0x2a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x32, 0x24, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x20, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0xe4, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e,
	0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x3a, 0x51, 0x92, 0x41, 0x4e, 0x0a, 0x4c, 0x2a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x32, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x20, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x0e, 0x6d, 0x70,
	0x65, 0x73, 0x61, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73,
	0x61, 0x2e, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x6d, 0x70,
	0x65, 0x73, 0x61, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x51, 0x92, 0x41, 0x4e,
	0x0a, 0x4c, 0x2a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x31, 0x52, 0x65, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20,
	0x61, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20,
	0x6d, 0x70, 0x65, 0x73, 0x61, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x88,
	0x02, 0x0a, 0x06, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x63, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x3a, 0x30, 0x92, 0x41, 0x2d, 0x0a, 0x2b, 0x2a, 0x06,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x32, 0x21, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x11, 0x53, 0x61,
	0x76, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a,
	0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x3a, 0x42, 0x92, 0x41, 0x3f, 0x0a, 0x3d, 0x2a, 0x11, 0x53, 0x61, 0x76, 0x65, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x15, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x64, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0xd2, 0x01, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x06, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x22, 0x79, 0x0a, 0x12, 0x53, 0x61, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x69, 0x64,
	0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x3a, 0x35, 0x92, 0x41, 0x32, 0x0a, 0x30, 0x2a,
	0x12, 0x53, 0x61, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0x1a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22,
	0x76, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x3a, 0x44, 0x92, 0x41, 0x41, 0x0a, 0x3f, 0x2a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x21, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0xd2, 0x01, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x76, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x3a, 0x33, 0x92, 0x41, 0x30, 0x0a,
	0x2e, 0x2a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x19, 0x52, 0x65, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22,
	0xbb, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x32, 0x42, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x3a, 0x54, 0x92, 0x41, 0x51, 0x0a, 0x4f, 0x2a, 0x18,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x33, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x4d, 0x70, 0x65, 0x73,
	0x61, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x87, 0x02,
	0x0a, 0x18, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d,
	0x70, 0x65, 0x73, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x3a, 0x62, 0x92, 0x41, 0x5f, 0x0a, 0x5d, 0x2a, 0x18, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x32, 0x41, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f,
	0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x20, 0x61, 0x6e, 0x20, 0x6d, 0x70, 0x65, 0x73,
	0x61, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x1c, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x41, 0x6c, 0x6c, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x3a, 0x5c, 0x92, 0x41, 0x59, 0x0a, 0x57, 0x2a, 0x1c,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x6c, 0x6c, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x37, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x20, 0x4d, 0x70, 0x65, 0x73, 0x61, 0x20, 0x74, 0x78, 0x20, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x74, 0x6f,
	0x20, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x6f, 0x72, 0x20,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x22, 0xa9, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x73, 0x69, 0x73, 0x64, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x3a,
	0x50, 0x92, 0x41, 0x4d, 0x0a, 0x4b, 0x2a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x2c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20,
	0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x99, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x30, 0x92, 0x41, 0x2d,
	0x0a, 0x2b, 0x2a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x32, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xc5, 0x02,
	0x0a, 0x1a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x74, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x3a, 0x6a, 0x92, 0x41, 0x67, 0x0a, 0x65,
	0x2a, 0x1a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x47, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x20, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x20,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x89, 0x02, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x3a, 0x4c, 0x92, 0x41, 0x49, 0x0a, 0x47, 0x2a, 0x18, 0x52, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x32, 0x2b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f,
	0x20, 0x61, 0x20, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xcc, 0x02, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x74,
	0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x3a, 0x23, 0x92, 0x41, 0x20,
	0x0a, 0x1e, 0x2a, 0x04, 0x53, 0x74, 0x61, 0x74, 0x32, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x22, 0xbf, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x54, 0x92, 0x41,
	0x51, 0x0a, 0x4f, 0x2a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x32, 0x3c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f,
	0x20, 0x67, 0x65, 0x74, 0x20, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x20, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65,
	0x73, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x3d, 0x92, 0x41, 0x3a, 0x0a, 0x38, 0x2a, 0x0d, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x27, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x8c, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78,
	0x44, 0x61, 0x74, 0x65, 0x3a, 0x3e, 0x92, 0x41, 0x3b, 0x0a, 0x39, 0x2a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x32, 0x26, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x20, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d,
	0x70, 0x65, 0x73, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x37, 0x92, 0x41,
	0x34, 0x0a, 0x32, 0x2a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x1e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74,
	0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a,
	0x0d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70,
	0x65, 0x73, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x32, 0x92, 0x41, 0x2f, 0x0a, 0x2d, 0x2a, 0x13,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0x16, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x6f, 0x20,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x51, 0x0a, 0x0e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x19, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4e,
	0x4f, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x02, 0x32, 0xfc,
	0x12, 0x0a, 0x0b, 0x4c, 0x69, 0x70, 0x61, 0x4e, 0x61, 0x4d, 0x50, 0x45, 0x53, 0x41, 0x12, 0x7d,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x25, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73,
	0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67, 0x69, 0x64, 0x79,
	0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x63, 0x32, 0x62, 0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22,
	0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73,
	0x61, 0x2e, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x24, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74,
	0x78, 0x2f, 0x63, 0x32, 0x62, 0x2f, 0x7b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x12, 0xb1, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x32, 0x42, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e,
	0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x32, 0x42, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67,
	0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x51, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x12, 0x23, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x63, 0x32, 0x62, 0x2f, 0x7b, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x5a, 0x24, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f,
	0x63, 0x32, 0x62, 0x3a, 0x65, 0x78, 0x69, 0x73, 0x74, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x9d, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x67, 0x69, 0x64,
	0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x32,
	0x42, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12,
	0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x63, 0x32, 0x62,
	0x5a, 0x24, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f,
	0x63, 0x32, 0x62, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x8d, 0x01, 0x0a, 0x0a, 0x53, 0x61, 0x76, 0x65, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d,
	0x70, 0x65, 0x73, 0x61, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x46,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65,
	0x73, 0x74, 0x78, 0x2f, 0x63, 0x32, 0x62, 0x2f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x3a, 0x61,
	0x64, 0x64, 0x3a, 0x01, 0x2a, 0x5a, 0x1f, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70,
	0x65, 0x73, 0x74, 0x78, 0x2f, 0x63, 0x32, 0x62, 0x3a, 0x73, 0x61, 0x76, 0x65, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x96, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70,
	0x65, 0x73, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70,
	0x65, 0x73, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x12, 0x20, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x63, 0x32, 0x62, 0x2f, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x5a,
	0x1e, 0x22, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x63,
	0x32, 0x62, 0x3a, 0x67, 0x65, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0xa0, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x32, 0x42, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d,
	0x70, 0x65, 0x73, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x32, 0x42, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x22, 0x1f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x63, 0x32, 0x62, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x3a, 0x01,
	0x2a, 0x5a, 0x1f, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78,
	0x2f, 0x63, 0x32, 0x62, 0x3a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x32, 0x42, 0x3a,
	0x01, 0x2a, 0x12, 0xa0, 0x01, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x43, 0x32,
	0x42, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f,
	0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x43,
	0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45,
	0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x63, 0x32,
	0x62, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x3a, 0x01, 0x2a, 0x5a, 0x1f, 0x22, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65,
	0x73, 0x74, 0x78, 0x2f, 0x63, 0x32, 0x62, 0x3a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x43,
	0x32, 0x42, 0x3a, 0x01, 0x2a, 0x12, 0xaf, 0x01, 0x0a, 0x15, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x41, 0x6c, 0x6c, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x2a, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x6c, 0x6c, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4c, 0x22, 0x22, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x63, 0x32, 0x62, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x61, 0x6c, 0x6c, 0x3a,
	0x01, 0x2a, 0x5a, 0x23, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74,
	0x78, 0x2f, 0x63, 0x32, 0x62, 0x3a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x6c, 0x6c,
	0x43, 0x32, 0x42, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xc7, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x29, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x69,
	0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x61,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5b, 0x12, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65,
	0x73, 0x74, 0x78, 0x2f, 0x63, 0x32, 0x62, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x67, 0x65, 0x74, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5a, 0x29, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x63, 0x32, 0x62, 0x3a, 0x67, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01,
	0x2a, 0x12, 0xbe, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x67, 0x69, 0x64,
	0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d,
	0x70, 0x65, 0x73, 0x61, 0x2e, 0x43, 0x32, 0x42, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5b, 0x12, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70,
	0x65, 0x73, 0x74, 0x78, 0x2f, 0x63, 0x32, 0x62, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x67, 0x65, 0x74, 0x2d, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x2d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x29, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x63, 0x32, 0x62, 0x3a, 0x67, 0x65, 0x74, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a,
	0x01, 0x2a, 0x12, 0xb7, 0x01, 0x0a, 0x13, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e, 0x67, 0x69, 0x64,
	0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x5e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x58, 0x12, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74,
	0x78, 0x2f, 0x63, 0x32, 0x62, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5a, 0x28, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74,
	0x78, 0x2f, 0x63, 0x32, 0x62, 0x3a, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x90, 0x01, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x67, 0x69, 0x64, 0x79,
	0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f,
	0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x12, 0x21, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x63, 0x32, 0x62, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5a, 0x1d, 0x22, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f,
	0x63, 0x32, 0x62, 0x3a, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0x94, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1e, 0x2e,
	0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x44, 0x12, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f,
	0x63, 0x32, 0x62, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5a, 0x1e, 0x22, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x63, 0x32, 0x62, 0x3a, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x94, 0x01, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e,
	0x2e, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x63, 0x32, 0x62, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5a, 0x21, 0x22, 0x1c, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x74, 0x78, 0x2f, 0x63, 0x32, 0x62, 0x3a, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x42, 0x8c, 0x04,
	0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x64,
	0x79, 0x6f, 0x6e, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x32, 0x62, 0x92, 0x41, 0xdb,
	0x03, 0x12, 0xc7, 0x02, 0x0a, 0x15, 0x4d, 0x50, 0x45, 0x53, 0x41, 0x20, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x32, 0x62, 0x20, 0x4d, 0x50, 0x45,
	0x53, 0x41, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x61, 0x20, 0x43, 0x52, 0x55, 0x44, 0x20, 0x52, 0x65, 0x73, 0x74, 0x20, 0x2b, 0x20, 0x67,
	0x52, 0x50, 0x43, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x43, 0x32, 0x42, 0x20,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x15, 0x47, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x20, 0x3c, 0x47, 0x69, 0x64, 0x65, 0x6f, 0x6e, 0x20, 0x4b, 0x61, 0x6d, 0x61,
	0x75, 0x3e, 0x12, 0x51, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2f, 0x6d, 0x70,
	0x65, 0x73, 0x61, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x62, 0x6c, 0x6f, 0x62,
	0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x69, 0x64, 0x65, 0x6f, 0x6e, 0x68, 0x61, 0x63,
	0x65, 0x72, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2a, 0x58, 0x0a, 0x1a,
	0x47, 0x4e, 0x55, 0x20, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x20, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x43, 0x20, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x12, 0x3a, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x69, 0x64, 0x79, 0x6f, 0x6e, 0x2f, 0x6d, 0x70, 0x65, 0x73, 0x61, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x4c,
	0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x32, 0x03, 0x30, 0x2e, 0x31, 0x2a, 0x02, 0x01, 0x02, 0x32,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f,
	0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x5a, 0x59, 0x0a, 0x57, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12,
	0x4d, 0x08, 0x02, 0x12, 0x38, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x3a, 0x20, 0x42,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x20, 0x3c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3e, 0x1a, 0x0d, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x62, 0x0c,
	0x0a, 0x0a, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x00, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_c2b_proto_rawDescOnce sync.Once
	file_c2b_proto_rawDescData = file_c2b_proto_rawDesc
)

func file_c2b_proto_rawDescGZIP() []byte {
	file_c2b_proto_rawDescOnce.Do(func() {
		file_c2b_proto_rawDescData = protoimpl.X.CompressGZIP(file_c2b_proto_rawDescData)
	})
	return file_c2b_proto_rawDescData
}

var file_c2b_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_c2b_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_c2b_proto_goTypes = []interface{}{
	(ProcessedState)(0),                  // 0: gidyon.mpesa.ProcessedState
	(*C2BPayment)(nil),                   // 1: gidyon.mpesa.C2BPayment
	(*CreateC2BPaymentRequest)(nil),      // 2: gidyon.mpesa.CreateC2BPaymentRequest
	(*CreateC2BPaymentResponse)(nil),     // 3: gidyon.mpesa.CreateC2BPaymentResponse
	(*GetC2BPaymentRequest)(nil),         // 4: gidyon.mpesa.GetC2BPaymentRequest
	(*ExistC2BPaymentRequest)(nil),       // 5: gidyon.mpesa.ExistC2BPaymentRequest
	(*ExistC2BPaymentResponse)(nil),      // 6: gidyon.mpesa.ExistC2BPaymentResponse
	(*ListC2BPaymentsFilter)(nil),        // 7: gidyon.mpesa.ListC2BPaymentsFilter
	(*ListC2BPaymentsRequest)(nil),       // 8: gidyon.mpesa.ListC2BPaymentsRequest
	(*ListC2BPaymentsResponse)(nil),      // 9: gidyon.mpesa.ListC2BPaymentsResponse
	(*Scopes)(nil),                       // 10: gidyon.mpesa.Scopes
	(*SaveScopesRequest)(nil),            // 11: gidyon.mpesa.SaveScopesRequest
	(*SaveScopesResponse)(nil),           // 12: gidyon.mpesa.SaveScopesResponse
	(*GetScopesRequest)(nil),             // 13: gidyon.mpesa.GetScopesRequest
	(*GetScopesResponse)(nil),            // 14: gidyon.mpesa.GetScopesResponse
	(*ProcessC2BPaymentRequest)(nil),     // 15: gidyon.mpesa.ProcessC2BPaymentRequest
	(*PublishC2BPaymentRequest)(nil),     // 16: gidyon.mpesa.PublishC2BPaymentRequest
	(*PublishAllC2BPaymentsRequest)(nil), // 17: gidyon.mpesa.PublishAllC2BPaymentsRequest
	(*GetTransactionsCountRequest)(nil),  // 18: gidyon.mpesa.GetTransactionsCountRequest
	(*TransactionsSummary)(nil),          // 19: gidyon.mpesa.TransactionsSummary
	(*ArchiveTransactionsRequest)(nil),   // 20: gidyon.mpesa.ArchiveTransactionsRequest
	(*GetRandomTransactionRequest)(nil),  // 21: gidyon.mpesa.GetRandomTransactionRequest
	(*Stat)(nil),                         // 22: gidyon.mpesa.Stat
	(*GetStatsRequest)(nil),              // 23: gidyon.mpesa.GetStatsRequest
	(*StatsResponse)(nil),                // 24: gidyon.mpesa.StatsResponse
	(*ListStatsFilter)(nil),              // 25: gidyon.mpesa.ListStatsFilter
	(*ListStatsRequest)(nil),             // 26: gidyon.mpesa.ListStatsRequest
	(*ExportPhonesRequest)(nil),          // 27: gidyon.mpesa.ExportPhonesRequest
	(*emptypb.Empty)(nil),                // 28: google.protobuf.Empty
}
var file_c2b_proto_depIdxs = []int32{
	1,  // 0: gidyon.mpesa.CreateC2BPaymentRequest.mpesa_payment:type_name -> gidyon.mpesa.C2BPayment
	0,  // 1: gidyon.mpesa.ListC2BPaymentsFilter.process_state:type_name -> gidyon.mpesa.ProcessedState
	7,  // 2: gidyon.mpesa.ListC2BPaymentsRequest.filter:type_name -> gidyon.mpesa.ListC2BPaymentsFilter
	1,  // 3: gidyon.mpesa.ListC2BPaymentsResponse.mpesa_payments:type_name -> gidyon.mpesa.C2BPayment
	10, // 4: gidyon.mpesa.SaveScopesRequest.scopes:type_name -> gidyon.mpesa.Scopes
	10, // 5: gidyon.mpesa.SaveScopesResponse.scopes:type_name -> gidyon.mpesa.Scopes
	10, // 6: gidyon.mpesa.GetScopesResponse.scopes:type_name -> gidyon.mpesa.Scopes
	0,  // 7: gidyon.mpesa.PublishC2BPaymentRequest.processed_state:type_name -> gidyon.mpesa.ProcessedState
	0,  // 8: gidyon.mpesa.PublishAllC2BPaymentsRequest.processed_state:type_name -> gidyon.mpesa.ProcessedState
	22, // 9: gidyon.mpesa.StatsResponse.stats:type_name -> gidyon.mpesa.Stat
	25, // 10: gidyon.mpesa.ListStatsRequest.filter:type_name -> gidyon.mpesa.ListStatsFilter
	7,  // 11: gidyon.mpesa.ExportPhonesRequest.export_filter:type_name -> gidyon.mpesa.ListC2BPaymentsFilter
	2,  // 12: gidyon.mpesa.LipaNaMPESA.CreateC2BPayment:input_type -> gidyon.mpesa.CreateC2BPaymentRequest
	4,  // 13: gidyon.mpesa.LipaNaMPESA.GetC2BPayment:input_type -> gidyon.mpesa.GetC2BPaymentRequest
	5,  // 14: gidyon.mpesa.LipaNaMPESA.ExistC2BPayment:input_type -> gidyon.mpesa.ExistC2BPaymentRequest
	8,  // 15: gidyon.mpesa.LipaNaMPESA.ListC2BPayments:input_type -> gidyon.mpesa.ListC2BPaymentsRequest
	11, // 16: gidyon.mpesa.LipaNaMPESA.SaveScopes:input_type -> gidyon.mpesa.SaveScopesRequest
	13, // 17: gidyon.mpesa.LipaNaMPESA.GetScopes:input_type -> gidyon.mpesa.GetScopesRequest
	15, // 18: gidyon.mpesa.LipaNaMPESA.ProcessC2BPayment:input_type -> gidyon.mpesa.ProcessC2BPaymentRequest
	16, // 19: gidyon.mpesa.LipaNaMPESA.PublishC2BPayment:input_type -> gidyon.mpesa.PublishC2BPaymentRequest
	17, // 20: gidyon.mpesa.LipaNaMPESA.PublishAllC2BPayments:input_type -> gidyon.mpesa.PublishAllC2BPaymentsRequest
	18, // 21: gidyon.mpesa.LipaNaMPESA.GetTransactionsCount:input_type -> gidyon.mpesa.GetTransactionsCountRequest
	21, // 22: gidyon.mpesa.LipaNaMPESA.GetRandomTransaction:input_type -> gidyon.mpesa.GetRandomTransactionRequest
	20, // 23: gidyon.mpesa.LipaNaMPESA.ArchiveTransactions:input_type -> gidyon.mpesa.ArchiveTransactionsRequest
	23, // 24: gidyon.mpesa.LipaNaMPESA.GetStats:input_type -> gidyon.mpesa.GetStatsRequest
	26, // 25: gidyon.mpesa.LipaNaMPESA.ListStats:input_type -> gidyon.mpesa.ListStatsRequest
	27, // 26: gidyon.mpesa.LipaNaMPESA.ExportPhones:input_type -> gidyon.mpesa.ExportPhonesRequest
	3,  // 27: gidyon.mpesa.LipaNaMPESA.CreateC2BPayment:output_type -> gidyon.mpesa.CreateC2BPaymentResponse
	1,  // 28: gidyon.mpesa.LipaNaMPESA.GetC2BPayment:output_type -> gidyon.mpesa.C2BPayment
	6,  // 29: gidyon.mpesa.LipaNaMPESA.ExistC2BPayment:output_type -> gidyon.mpesa.ExistC2BPaymentResponse
	9,  // 30: gidyon.mpesa.LipaNaMPESA.ListC2BPayments:output_type -> gidyon.mpesa.ListC2BPaymentsResponse
	28, // 31: gidyon.mpesa.LipaNaMPESA.SaveScopes:output_type -> google.protobuf.Empty
	14, // 32: gidyon.mpesa.LipaNaMPESA.GetScopes:output_type -> gidyon.mpesa.GetScopesResponse
	28, // 33: gidyon.mpesa.LipaNaMPESA.ProcessC2BPayment:output_type -> google.protobuf.Empty
	28, // 34: gidyon.mpesa.LipaNaMPESA.PublishC2BPayment:output_type -> google.protobuf.Empty
	28, // 35: gidyon.mpesa.LipaNaMPESA.PublishAllC2BPayments:output_type -> google.protobuf.Empty
	19, // 36: gidyon.mpesa.LipaNaMPESA.GetTransactionsCount:output_type -> gidyon.mpesa.TransactionsSummary
	1,  // 37: gidyon.mpesa.LipaNaMPESA.GetRandomTransaction:output_type -> gidyon.mpesa.C2BPayment
	28, // 38: gidyon.mpesa.LipaNaMPESA.ArchiveTransactions:output_type -> google.protobuf.Empty
	24, // 39: gidyon.mpesa.LipaNaMPESA.GetStats:output_type -> gidyon.mpesa.StatsResponse
	24, // 40: gidyon.mpesa.LipaNaMPESA.ListStats:output_type -> gidyon.mpesa.StatsResponse
	28, // 41: gidyon.mpesa.LipaNaMPESA.ExportPhones:output_type -> google.protobuf.Empty
	27, // [27:42] is the sub-list for method output_type
	12, // [12:27] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_c2b_proto_init() }
func file_c2b_proto_init() {
	if File_c2b_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_c2b_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*C2BPayment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_c2b_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateC2BPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_c2b_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateC2BPaymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_c2b_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetC2BPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_c2b_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistC2BPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_c2b_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistC2BPaymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_c2b_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListC2BPaymentsFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_c2b_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListC2BPaymentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_c2b_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListC2BPaymentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_c2b_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scopes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_c2b_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveScopesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_c2b_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveScopesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_c2b_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScopesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_c2b_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScopesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_c2b_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessC2BPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_c2b_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishC2BPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_c2b_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishAllC2BPaymentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_c2b_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionsCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_c2b_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionsSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_c2b_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_c2b_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRandomTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_c2b_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_c2b_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_c2b_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_c2b_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStatsFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_c2b_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_c2b_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportPhonesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_c2b_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_c2b_proto_goTypes,
		DependencyIndexes: file_c2b_proto_depIdxs,
		EnumInfos:         file_c2b_proto_enumTypes,
		MessageInfos:      file_c2b_proto_msgTypes,
	}.Build()
	File_c2b_proto = out.File
	file_c2b_proto_rawDesc = nil
	file_c2b_proto_goTypes = nil
	file_c2b_proto_depIdxs = nil
}
